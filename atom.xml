<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大前端_LSF</title>
  
  <subtitle>斯是陋室，为吾德馨</subtitle>
  <link href="https://www.frontblog.top/atom.xml" rel="self"/>
  
  <link href="https://www.frontblog.top/"/>
  <updated>2021-11-19T06:00:47.258Z</updated>
  <id>https://www.frontblog.top/</id>
  
  <author>
    <name>const name=&quot;LSF&quot;</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ES6的解构赋值</title>
    <link href="https://www.frontblog.top/article/d72f084c.html"/>
    <id>https://www.frontblog.top/article/d72f084c.html</id>
    <published>2021-11-19T05:58:59.000Z</published>
    <updated>2021-11-19T06:00:47.258Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录<code>ES6</code>中解构赋值知识，包括数组解构、对象解构。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录&lt;code&gt;ES6&lt;/code&gt;中解构赋值知识，包括数组解构、对象解构。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="解构赋值" scheme="https://www.frontblog.top/tags/%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>ES6的箭头函数</title>
    <link href="https://www.frontblog.top/article/cba6040a.html"/>
    <id>https://www.frontblog.top/article/cba6040a.html</id>
    <published>2021-11-18T08:26:19.000Z</published>
    <updated>2021-11-19T05:58:10.238Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录ES6里面的箭头函数。</p><h1 id="认识箭头函数"><a href="#认识箭头函数" class="headerlink" title="认识箭头函数"></a>认识箭头函数</h1><p>在ES6前，我们书写一个函数需要写一个<code>function</code>来定义一个函数，而在ES6中，我们可以使用箭头函数来定义，这中写法是：<code>()=&gt;&#123;&#125;</code>,括号里面是参数，<code>=&gt;</code>代表了函数，花括号代表函数体。箭头函数是一个匿名函数，所以需要赋值给一个常量或者变量（一般是常量）来方便函数调用。其结构是这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const 函数名 = 参数 =&gt;&#123;函数体&#125;</span><br></pre></td></tr></table></figure><h1 id="箭头函数的注意事项"><a href="#箭头函数的注意事项" class="headerlink" title="箭头函数的注意事项"></a>箭头函数的注意事项</h1><p><strong>单个参数</strong></p><p>单个参数是<strong>能省略</strong>()，没有参数或者多个参数<strong>不能省略</strong>()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x+<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> add1 = <span class="function">()  =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> add1 = <span class="function">(<span class="params">x,y,z</span>)  =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x+y+z</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>单行函数体</strong></p><p>单行函数体可以 <strong>同时省略</strong>{}和return语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function"><span class="params">x</span> =&gt;</span> x+<span class="number">1</span></span><br></pre></td></tr></table></figure><p>多行函数体不能简化。</p><p><strong>单行对象</strong></p><p>对象也能简化，在{}外面加一层()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">x, y</span>) =&gt;</span> (&#123; <span class="attr">x</span>: x + y &#125;);</span><br><span class="line"><span class="keyword">const</span> arr = <span class="function">(<span class="params">x, y</span>) =&gt;</span> [x,y];</span><br></pre></td></tr></table></figure><h1 id="箭头函数this指向"><a href="#箭头函数this指向" class="headerlink" title="箭头函数this指向"></a>箭头函数this指向</h1><p>在箭头函数中，没有this指向，但是会继承上一层的this，这里的上一层就是通过作用域 链找this，看下面例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> calc = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">add</span>:<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">calc.add()<span class="comment">//window</span></span><br></pre></td></tr></table></figure><ul><li>首先，箭头函数没有this，这里调用函数，根据JS的作用域，它肯定需要往面找this这个东西，函数作用域没有，往外，对象没有作用域，再往外就是全局，全局的作用就是window，所以这里的this指向的是window。</li></ul><p>下面再来一个复杂一点的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> calc = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">add</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// this</span></span><br><span class="line">        <span class="keyword">const</span> adder = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        adder()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> adder = calc.add</span><br><span class="line">adder()<span class="comment">//window</span></span><br><span class="line">calc.add();<span class="comment">//calc这个对象</span></span><br></pre></td></tr></table></figure><ul><li>首先对象里面的add函数里面还有箭头函数，这个this再箭头函数是没有的，寻找上一层，就是add这个函数的this，只要知道是这个this，那么就简单了，只需要知道谁在调用，就知道this指向谁了，第一个赋值给了全局，在全局调用就是window，第二个是被对象调用，this指向的就是这个对象。</li></ul><h1 id="不适合箭头函数的场景"><a href="#不适合箭头函数的场景" class="headerlink" title="不适合箭头函数的场景"></a>不适合箭头函数的场景</h1><p><strong>构造函数</strong></p><p>箭头函数是不能作为构造函数的，因为没有this指向，下面这种是错误的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> u = <span class="keyword">new</span> User()</span><br></pre></td></tr></table></figure><p><strong>需要this指向调用对象的时候</strong></p><p>以下例子中，我们本意是指向dom，但是这里会指向全局：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(</span><br><span class="line">        <span class="string">&#x27;click&#x27;</span>,</span><br><span class="line">        <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="built_in">this</span>);<span class="comment">//window</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="literal">false</span></span><br><span class="line">      );</span><br></pre></td></tr></table></figure><p><strong>需要使用类数组对象arguments的时候</strong></p><p>箭头函数是不能使用类数组对象arguments。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">add1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录ES6里面的箭头函数。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="箭头函数" scheme="https://www.frontblog.top/tags/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>ES6的模板字符</title>
    <link href="https://www.frontblog.top/article/bcee68e2.html"/>
    <id>https://www.frontblog.top/article/bcee68e2.html</id>
    <published>2021-11-17T14:29:10.000Z</published>
    <updated>2021-11-18T08:25:33.531Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录ES6中大的模板字符知识。</p><h1 id="什么是模板字符串"><a href="#什么是模板字符串" class="headerlink" title="什么是模板字符串"></a>什么是模板字符串</h1><p><strong>认识模板字符串：</strong></p><p>在<code>ES6</code>前我们使用双引号或者单引号来包裹字符串，而在<code>ES6</code>中我们可以使用``来包裹字符串，这样的字符串就是模板字符串。</p><p><strong>模板字符串与一般字符串差别：</strong></p><p>它们的区别在于使用上才能能体现出来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;Alex&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">23</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一般字符串</span></span><br><span class="line"><span class="keyword">const</span> info = <span class="string">&#x27;我的名字是：&#x27;</span>+user.name+<span class="string">&#x27;年龄：&#x27;</span>+user.age</span><br><span class="line"><span class="built_in">console</span>.log(info)</span><br><span class="line"><span class="comment">//ES6模板字符串</span></span><br><span class="line"><span class="keyword">const</span> info1 = <span class="string">`我的名字是：<span class="subst">$&#123;user.name&#125;</span>,年龄：<span class="subst">$&#123;user.age&#125;</span>`</span></span><br><span class="line"><span class="built_in">console</span>.log(info1)</span><br></pre></td></tr></table></figure><h1 id="模板字符串的注意事项"><a href="#模板字符串的注意事项" class="headerlink" title="模板字符串的注意事项"></a>模板字符串的注意事项</h1><p><strong>输出多行字符串</strong></p><p>模板字符串中，所有的空格、换行或者缩进都会被保留到输出之中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;col   col&#x27;</span>)<span class="comment">//col col</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`col   col`</span>)<span class="comment">//col   col</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;col\ncol&#x27;</span>)</span><br><span class="line"><span class="comment">//col</span></span><br><span class="line"><span class="comment">//col</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`col\ncol`</span>)</span><br><span class="line"><span class="comment">//col</span></span><br><span class="line"><span class="comment">//col</span></span><br></pre></td></tr></table></figure><p><strong>输出`和\等特殊字符</strong></p><p>需要在特殊字符前面使用\进行转义。</p><p><strong>模板字符串的注入</strong></p><p>只要最终可以得出一个值的就可以通过${}注入到模板字符串中</p><h1 id="模板字符串的应用"><a href="#模板字符串的应用" class="headerlink" title="模板字符串的应用"></a>模板字符串的应用</h1><p>这里使用一个显示用户信息的Demo进行：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      * &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-id">#app</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-id">#app</span> <span class="selector-class">.title</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-id">#app</span> <span class="selector-class">.info</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>用户信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>信息加载中...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;list&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> user = [</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>: <span class="string">&#x27;Test User one&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>: <span class="string">&#x27;Test User two&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">age</span>: <span class="number">25</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">password</span>: <span class="string">&#x27;154636&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>: <span class="string">&#x27;Test User three&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">age</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">password</span>: <span class="string">&#x27;156426&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">      ];</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> html = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; user.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">          html += <span class="string">`&lt;li&gt;用户名：<span class="subst">$&#123;user[i].name&#125;</span>;年龄:<span class="subst">$&#123;user[i].age&#125;</span>;密码:<span class="subst">$&#123;user[i].password&#125;</span>&lt;/li&gt;`</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        list.innerHTML = html;</span></span><br><span class="line"><span class="javascript">      &#125;, <span class="number">3000</span>);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录ES6中大的模板字符知识。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="ES6" scheme="https://www.frontblog.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6的let和const</title>
    <link href="https://www.frontblog.top/article/fee5585c.html"/>
    <id>https://www.frontblog.top/article/fee5585c.html</id>
    <published>2021-11-17T11:58:59.000Z</published>
    <updated>2021-11-17T14:30:04.070Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录ES6中新增的let和const。</p><h1 id="let和const简介"><a href="#let和const简介" class="headerlink" title="let和const简介"></a>let和const简介</h1><p>在ES6前定义一个变量只能使用var定义，在ES6中新增了let定义变量，const定义常量，在这里先知道的是，let定义的变量是能被修改，const定义的初值后是不能修改的即可。</p><h1 id="let块级作用域："><a href="#let块级作用域：" class="headerlink" title="let块级作用域："></a>let块级作用域：</h1><p>先实现一个案例，我们实现的这个案例是想点击按钮0输出0，点击按钮1输出1，点击按钮2输出2。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      * &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.center</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">310px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.center</span> <span class="selector-class">.btn</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.btn&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> info = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;info&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">        btns[i].addEventListener(</span></span><br><span class="line"><span class="javascript">          <span class="string">&#x27;click&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            info.innerText = i;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(i);</span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">          <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">        );</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>以上代码中每次点击的话输出其实都是3，为什么？首先我们明白两点，for里面的i是全局变量，函数只有调用才执行，弄清楚这两点后，我们思路已经很清晰了，for循环结束后i已经是3，我们点击的时候，函数触发，但是函数里面没有i，那怎么办，往外边寻找i，在全局是不是有个i啊，那在这个i是不是就是for循环结束的i，此时就是3。</li></ul><p>此时的作用域是这样的：</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211117203404.png"></p><ul><li>在ES6前想解决这个问题的办法就是使用闭包，以下是修改代码部分：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.btn&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> info = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;info&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span><br><span class="line">    btns[index].addEventListener(</span><br><span class="line">      <span class="string">&#x27;click&#x27;</span>,</span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        info.innerText = index;</span><br><span class="line">        <span class="built_in">console</span>.log(index);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="literal">false</span></span><br><span class="line">    );</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用立即执行函数，我们这个函数是不是就被执行了，i是不是就被传入，此时我们在去点击，会寻找index，是不是就是刚才传入的那个值，就不会去寻找最外面的i。</li><li>此时作用域是这样的：</li></ul><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211117203809.png"></p><p>在拥有ES6后，可以使用let定义变量，修改var位let即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.btn&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> info = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;info&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span><br><span class="line">  btns[i].addEventListener(</span><br><span class="line">    <span class="string">&#x27;click&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      info.innerText = i;</span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用let定义变量会产生块级作用域。此时的作用域是这样的。</li></ul><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211117210949.png"></p><p>至此我们知道let是具有块级作用域的！</p><h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><p>const声明的常量必须赋初值，赋值后不允许再次修改，基本数据类型是不允许修改，引用数据类型是可以的，但是不是通过直接赋值另外的一个新的引用数据类型，如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line">a = <span class="number">1</span><span class="comment">//报错</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;<span class="comment">//报错</span></span><br><span class="line">obj.name = <span class="string">&#x27;李四&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.name)</span><br></pre></td></tr></table></figure><p>可以得出const不能修改的是指向内存的地址，而内存地址的值是可以修改的。</p><h1 id="重复声明"><a href="#重复声明" class="headerlink" title="重复声明"></a>重复声明</h1><p>let和const是不能重复声明的。比如以下代码是不允许的！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>以下也是不允许的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">fun()</span><br></pre></td></tr></table></figure><p>但是如果是不同作用域下，是允许的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">fun()</span><br></pre></td></tr></table></figure><h1 id="变量声明提升"><a href="#变量声明提升" class="headerlink" title="变量声明提升"></a>变量声明提升</h1><p>let和const是不存在变量声明提升的。下面代码是错误的。</p><p>其实就是让我们养成习惯：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h1><p>只要作用域存在let、const，它们所声明的变量或者常量就会绑定到这个区域，不再受到外部影响。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">fun()</span><br></pre></td></tr></table></figure><ul><li>如果仅用刚才的知识，let是不会被提升，所以fun没有let变量，那么js会去往外部找，那这里问题就来了，我们运行程序是报错的，原因就是暂时性死区，再输出语句后面有一个let，它会绑定当前作用域，导致不会往外面找这个变量，从而直接报错。</li></ul><h1 id="window对象的属性和方法"><a href="#window对象的属性和方法" class="headerlink" title="window对象的属性和方法"></a>window对象的属性和方法</h1><p>使用var定义的变量或者声明的函数，都成为window对象的属性，而let和const不会</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">11</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">50</span></span><br><span class="line"><span class="keyword">const</span> add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">window</span>.a<span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">window</span>.b<span class="comment">//50</span></span><br><span class="line"><span class="built_in">window</span>.add<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><h1 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h1><p>let、const是存在块级作用域的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> a = <span class="number">0</span>;a&lt;<span class="number">3</span>;a++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//报错，没有定义</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>不存在作用域提升</li><li>存在块级作用域</li><li>存在暂时性死区</li><li>在<strong>同一作用域下</strong>不能重复声明</li><li>不能被全局window访问。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录ES6中新增的let和const。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="ES6" scheme="https://www.frontblog.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>JS的正则表达式</title>
    <link href="https://www.frontblog.top/article/d7136757.html"/>
    <id>https://www.frontblog.top/article/d7136757.html</id>
    <published>2021-11-17T07:42:16.000Z</published>
    <updated>2021-11-17T09:49:47.431Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录JavaScript的正则表达式。</p><h1 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h1><p>描述了字符串的“构成模式”，经常被用于检查字符串是否符合预定的格式要求。</p><p>检测某个字符串是否是6位数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;456123&#x27;</span></span><br><span class="line"><span class="keyword">var</span> regexp = <span class="regexp">/^\d&#123;6&#125;$/</span>;</span><br><span class="line"><span class="keyword">if</span>(regexp.tets(str))&#123;</span><br><span class="line">    alert(<span class="string">&#x27;符合&#x27;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;不符合&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>前后的 / 表示正则表达式</li><li>^匹配开头，$匹配结尾</li><li>\d表示数字</li><li>{6}表示6位数</li></ul><p>正则表达式是按位描述，也就是一个一个描述字符串，比如描述一个m开头，n结尾，中间3个数字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/^m\d\d\dn$/;</span><br><span class="line"><span class="regexp">/^m\d&#123;3&#125;n$/</span></span><br></pre></td></tr></table></figure><h1 id="正则表达是的基本使用"><a href="#正则表达是的基本使用" class="headerlink" title="正则表达是的基本使用"></a>正则表达是的基本使用</h1><p>创建表达式：</p><p>使用<code>/内容/</code>的语法形式，可以快速创建，也可以使用 new RegExp(‘内容’)的形式。typeof检测结果式object。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var regexp = /^m\d\d\dn$/;</span><br><span class="line">var regexp1 = new RegExp(&#x27;^m\\d\\d\\dn$&#x27;);</span><br></pre></td></tr></table></figure><h1 id="正则表达式和字符串"><a href="#正则表达式和字符串" class="headerlink" title="正则表达式和字符串"></a>正则表达式和字符串</h1><h1 id="正则表达式的应用"><a href="#正则表达式的应用" class="headerlink" title="正则表达式的应用"></a>正则表达式的应用</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录JavaScript的正则表达式。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="正则表达式" scheme="https://www.frontblog.top/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JS的Date对象和Math对象</title>
    <link href="https://www.frontblog.top/article/69963f7a.html"/>
    <id>https://www.frontblog.top/article/69963f7a.html</id>
    <published>2021-11-17T07:41:07.000Z</published>
    <updated>2021-11-17T09:49:31.575Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录Javascript中的Date对象和Math对象</p><h1 id="Date-日期对象"><a href="#Date-日期对象" class="headerlink" title="Date()日期对象"></a>Date()日期对象</h1><p>使用new Date()即可得到当前时间的日期对象，它式object类型值。使用new Date(2021,10,17)即可获得指定日期的对象，注意第二参数表示第二个月，从0开始，11表示12月，也可以使用new Date(‘2021-11-17’)获得指定日期，不过<strong>月份就不是从0开始计算</strong></p><p>需要注意的是：<code>new Date(&#39;2020-05-01&#39;);</code>这种写法最好是加0，因为不加虽然不会报错，但是就是没有时区。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//：Wed Nov 17 2021 16:06:24 GMT+0800</span></span><br><span class="line"><span class="keyword">var</span> d1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2020</span>, <span class="number">5</span>, <span class="number">1</span>);<span class="comment">//Mon Jun 01 2020 00:00:00 GMT+0800</span></span><br><span class="line"><span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2020-05-01&#x27;</span>);<span class="comment">//Fri May 01 2020 08:00:00 GMT+0800</span></span><br><span class="line"><span class="built_in">console</span>.log(d);</span><br><span class="line"><span class="built_in">console</span>.log(d1);</span><br><span class="line"><span class="built_in">console</span>.log(d2);</span><br></pre></td></tr></table></figure><h1 id="Date-常见方法"><a href="#Date-常见方法" class="headerlink" title="Date()常见方法"></a>Date()常见方法</h1><table><thead><tr><th align="center">方法</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">getDate()</td><td align="center">得到日期1~31</td></tr><tr><td align="center">getDay()</td><td align="center">得到星期0~6</td></tr><tr><td align="center">getMonth()</td><td align="center">得到月份0~11</td></tr><tr><td align="center">getFullYear()</td><td align="center">得到年份</td></tr><tr><td align="center">getHours()</td><td align="center">得到小时数0~23</td></tr><tr><td align="center">getMinutes()</td><td align="center">得到分钟数0~59</td></tr><tr><td align="center">getSeconds()</td><td align="center">得到秒数0~59</td></tr></tbody></table><h1 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h1><ul><li>时间戳表示1970年1月1日零点距离某时刻的毫秒数</li><li>通过getTime()方法或者Date.parse()函数可以将日期对象变为时间戳。</li><li>通过new Date(时间戳)的写法，可以将时间戳变为日期对象。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="keyword">var</span> timestamp1 = d.getTime();<span class="comment">//毫秒级</span></span><br><span class="line"><span class="keyword">var</span> timestamp2 = <span class="built_in">Date</span>.parse(d);<span class="comment">//秒，后面三位都是000</span></span><br><span class="line"><span class="keyword">var</span> dd = <span class="keyword">new</span> <span class="built_in">Date</span>(timestamp1)</span><br></pre></td></tr></table></figure><h1 id="实现倒计时"><a href="#实现倒计时" class="headerlink" title="实现倒计时"></a>实现倒计时</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span>2022年新年倒计时<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> info = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;info&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="comment">// 现在时间</span></span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> nd = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">       <span class="comment">//  目标时间</span></span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> td = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2022</span>, <span class="number">1</span>, <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">       <span class="comment">// 时间差，毫秒级</span></span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> diff = td - nd;</span></span><br><span class="line"><span class="javascript">       <span class="comment">// 换算</span></span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> day = <span class="built_in">parseInt</span>(diff / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>));</span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> hours = <span class="built_in">parseInt</span>((diff % (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>)) / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>));</span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> minutes = <span class="built_in">parseInt</span>((diff % (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>)) / (<span class="number">1000</span> * <span class="number">60</span>));</span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> seconds = <span class="built_in">parseInt</span>(</span></span><br><span class="line"><span class="javascript">         ((diff % (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>)) % (<span class="number">1000</span> * <span class="number">60</span>)) / <span class="number">1000</span></span></span><br><span class="line"><span class="javascript">       );</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">       info.innerText =</span></span><br><span class="line"><span class="javascript">         day + <span class="string">&#x27;天&#x27;</span> + hours + <span class="string">&#x27;小时&#x27;</span> + minutes + <span class="string">&#x27;分&#x27;</span> + seconds + <span class="string">&#x27;秒&#x27;</span>;</span></span><br><span class="line"><span class="javascript">     &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Math-数学对象"><a href="#Math-数学对象" class="headerlink" title="Math()数学对象"></a>Math()数学对象</h1><p>幂计算：Math.pow()、开方：Math.sqrt()</p><p>向上取整：Math.ceil()、向下取整：Math.floor()</p><p>四舍五入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.round(<span class="number">3.14</span>)<span class="comment">//3</span></span><br><span class="line"><span class="built_in">Math</span>.round(<span class="number">3.44</span>)<span class="comment">//3</span></span><br><span class="line"><span class="built_in">Math</span>.round(<span class="number">3.54</span>)<span class="comment">//4</span></span><br></pre></td></tr></table></figure><p>四舍五入到某个小数：</p><p>思路就是乘以倍数，再四舍五入，再除以倍数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3.52563</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(a*<span class="number">100</span>)/<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>得到参数列表的最大值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.max(<span class="number">2</span>,<span class="number">36</span>,<span class="number">454</span>,<span class="number">5</span>,<span class="number">12</span>)<span class="comment">//454</span></span><br></pre></td></tr></table></figure><p>得到参数最小值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">Math</span>.min(<span class="number">2</span>,<span class="number">36</span>,<span class="number">454</span>,<span class="number">5</span>,<span class="number">12</span>)<span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>得到数组的最大值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">10</span>]</span><br><span class="line"><span class="keyword">var</span> max = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>,arr)</span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">var</span> max1 =  <span class="built_in">Math</span>.max(...arr)</span><br><span class="line"><span class="built_in">console</span>.log(max)<span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>apply会把数组的数值打散。上下文指向谁不重要。</p><p>这里需要注意数组里面有个join的方法也是打散数值的，不过那是字符串类型，所以会报错NaN。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">225</span>, <span class="number">454512</span>, <span class="number">15221</span>, <span class="number">11</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.join();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(a));<span class="comment">//NaN</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录Javascript中的Date对象和Math对象&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>JS的包装类</title>
    <link href="https://www.frontblog.top/article/aae27dc2.html"/>
    <id>https://www.frontblog.top/article/aae27dc2.html</id>
    <published>2021-11-17T04:41:50.000Z</published>
    <updated>2021-11-17T09:49:31.578Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录JS的包装类对象</p><h1 id="什么是包装类"><a href="#什么是包装类" class="headerlink" title="什么是包装类"></a>什么是包装类</h1><p>Number()、String()、和Boolean()分别是数字、字符串、布尔值的“包装类”。包装类的目的就是为了让基本类型值可以从它们的构造函数的prototype上获得方法。</p><h1 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h1><p>下面例子来说明包装类：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">var</span> b=  <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;字符串&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>)</span><br><span class="line"> <span class="keyword">var</span> d = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a) <span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(b)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b)<span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(c)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> c)<span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(a.__proto__ === <span class="built_in">Number</span>.prototype)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>下面是运行的结果，可以看到，typeof的结果是一个对象，输出的是类型的原型链上有toFixed、toString等等方法，这也是我们为什么能调用方法的原因。</p><p>PrimitiveValue是原始值。</p><p>new出来的值是可以参与计算的。</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211117131123.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>Number()、String()和Boolean()的实例都是Object类型，它们的primitiveValue属性存储它们的本身值</li><li>new出来的基本数据类型值能参与计算</li><li>包装类的目的就是为了让基本数据类型可以从它们的构造函数的prototype(原型)上获得方法。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录JS的包装类对象&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="包装类" scheme="https://www.frontblog.top/tags/%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>JS的原型</title>
    <link href="https://www.frontblog.top/article/6f0dd71.html"/>
    <id>https://www.frontblog.top/article/6f0dd71.html</id>
    <published>2021-11-16T07:52:42.000Z</published>
    <updated>2021-11-17T10:18:14.974Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录Javascript中原型、原型链和继承等相关知识。</p><h1 id="什么是原型"><a href="#什么是原型" class="headerlink" title="什么是原型"></a>什么是原型</h1><p>任何函数都有prototype属性，这个属性就是原型。prototype属性值是一个对象，默认拥有constructor属性，指回函数本身。</p><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Fun.prototype);</span><br><span class="line"><span class="built_in">console</span>.log(Fun.prototype.constructor === Fun); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211116205125.png"></p><p>普通调用函数的原型没有作用，但是对于构造函数却大有作用。</p><h1 id="构造函数的原型是实例的原型"><a href="#构造函数的原型是实例的原型" class="headerlink" title="构造函数的原型是实例的原型"></a>构造函数的原型是实例的原型</h1><p>构造函数的原型是实例的原型。</p><p>怎么理解这话？来看下面例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">Fun.prototype.getAge = <span class="string">&#x27;1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f - <span class="keyword">new</span> Fun(<span class="number">12</span>)</span><br><span class="line">f.getAge()<span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>我们并没有在构造函数添加getName方法，但是我们的实例却可以调用并输出，所以说明实例的原型是指向构造函数的原型的。</p><p>实例打点调用原型的属性和方法就是“原型链查找”</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211116210729.png"></p><h1 id="hasOwnProperty方法"><a href="#hasOwnProperty方法" class="headerlink" title="hasOwnProperty方法"></a>hasOwnProperty方法</h1><p>hasOwnProperty方法可以检测对象是否”真正自己拥有”某属性或者方法，也就是检测是不是原型上的</p><h1 id="in方法"><a href="#in方法" class="headerlink" title="in方法"></a>in方法</h1><p>in方法检测某个属性或者方法是否可以被对象方法。</p><h1 id="构造函数原型绑定方法"><a href="#构造函数原型绑定方法" class="headerlink" title="构造函数原型绑定方法"></a>构造函数原型绑定方法</h1><p>能在原型上绑定属性，当然也能绑定方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">Fun.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f - <span class="keyword">new</span> Fun(<span class="number">12</span>)</span><br><span class="line">f.getName()<span class="comment">//12</span></span><br><span class="line"><span class="keyword">var</span> f1 = <span class="keyword">new</span> Fun(<span class="number">1</span>)</span><br><span class="line">f1.getName()<span class="comment">//1</span></span><br></pre></td></tr></table></figure><ul><li>这里的prototype里面的this指向的是Fun这个函数的空对象。</li></ul><p>这样写的好处在于，不会每new一个对象 ，都会去绑定方法，而是直接使用构造函数的原型里面的方法，这样就提高了性能。当然如果想去定义一个同名的，但是具有个人特色的方法，可以在实例上直接添加方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">Fun.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f - <span class="keyword">new</span> Fun(<span class="number">12</span>)</span><br><span class="line">f.getName()<span class="comment">//12</span></span><br><span class="line"><span class="keyword">var</span> f1 - <span class="keyword">new</span> Fun(<span class="number">1</span>)</span><br><span class="line">f1.getName=&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;this is age&#x27;</span>+age)</span><br><span class="line">&#125;</span><br><span class="line">f1.getName()<span class="comment">//this is age 1</span></span><br></pre></td></tr></table></figure><h1 id="原型链的终点"><a href="#原型链的终点" class="headerlink" title="原型链的终点"></a>原型链的终点</h1><p>我们函数的原型并不是原型的终点，原型的终点是Object。这也是为什么我们能调用hasOwnProperty和in方法，因为在Object这个对象的原型上绑定了这些方法。</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211117104528.png"></p><p>数组的原型：</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211117105327.png"></p><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>实现继承的本质就是通过继承原型链来实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.name = name;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    User.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;Hello：&#x27;</span> + <span class="built_in">this</span>.name);</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">User1</span>(<span class="params">name</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.name = name;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//实现继承的关键代码，把一个类的prototype指向另外的类</span></span></span><br><span class="line"><span class="javascript">    User1.prototype = <span class="keyword">new</span> User();</span></span><br><span class="line"><span class="javascript">      </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> u = <span class="keyword">new</span> User(<span class="string">&#x27;张三&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> u1 = <span class="keyword">new</span> User1(<span class="string">&#x27;测试&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    u.say();</span></span><br><span class="line"><span class="javascript">    u1.say();</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211117105825.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录Javascript中原型、原型链和继承等相关知识。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="原型" scheme="https://www.frontblog.top/tags/%E5%8E%9F%E5%9E%8B/"/>
    
    <category term="继承" scheme="https://www.frontblog.top/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>JS的构造函数</title>
    <link href="https://www.frontblog.top/article/6c46e40.html"/>
    <id>https://www.frontblog.top/article/6c46e40.html</id>
    <published>2021-11-15T09:00:42.000Z</published>
    <updated>2021-11-16T14:37:59.188Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录JS的构造函数。</p><p>构造函数时通过new一个函数，那么这个函数就是构造函数，下面这段代码说明构造函数和普通函数的区别</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name, age</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.name = name;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.age = age;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">User1</span>(<span class="params">name, age</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: name,</span></span><br><span class="line"><span class="javascript">        <span class="attr">age</span>: age,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> u = <span class="keyword">new</span> User(<span class="string">&#x27;张三&#x27;</span>, <span class="number">23</span>); <span class="comment">//构造函数</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> u1 = <span class="keyword">new</span> User(<span class="string">&#x27;李四&#x27;</span>, <span class="number">13</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(u);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(u1);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(User1(<span class="string">&#x27;王五&#x27;</span>, <span class="number">13</span>)); <span class="comment">// 普通函数</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(User1(<span class="string">&#x27;法外狂徒&#x27;</span>, <span class="number">23</span>));</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>构造函数会自动返回一个对象，而普通调用函数就需要手写返回对象。</li></ul><p>接下来我们分析构造函数返回的值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.a = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> obj = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&#x27;ZS&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> obj;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> u = <span class="keyword">new</span> User();</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(u);<span class="comment">//&#123;name:&#x27;ZS&#x27;&#125;</span></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>return的是对象，那么返回就是这个对象</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.a = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> b = <span class="number">3</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> obj = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&#x27;ZS&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> b;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> u = <span class="keyword">new</span> User();</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(u);<span class="comment">//&#123;a:1&#125;</span></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> b = <span class="number">3</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> obj = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&#x27;ZS&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> b;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> u = <span class="keyword">new</span> User();</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(u);<span class="comment">//&#123;&#125;</span></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> b = -<span class="number">3</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> obj = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&#x27;ZS&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> b;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> u = <span class="keyword">new</span> User();</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(u);<span class="comment">//&#123;&#125;</span></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>return的是数值，那么返回就是this这个对象，</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> arr = [<span class="number">12</span>, <span class="number">34</span>];</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> obj = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&#x27;ZS&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> arr;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> u = <span class="keyword">new</span> User();</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(u);<span class="comment">//[12,34]</span></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>return的是数值，那么返回就是这个数组。</li></ul><p>总结：如果return的是引用类型值，那么返回的就是引用类型，如果return基础类型的，那就是返回this对象</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文记录JS的构造函数。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="构造函数" scheme="https://www.frontblog.top/tags/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>JS中new四步走</title>
    <link href="https://www.frontblog.top/article/52d92bef.html"/>
    <id>https://www.frontblog.top/article/52d92bef.html</id>
    <published>2021-11-15T07:29:52.000Z</published>
    <updated>2021-11-16T14:37:59.185Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录new一个函数后发生了什么</p><h1 id="关于自己的理解"><a href="#关于自己的理解" class="headerlink" title="关于自己的理解"></a>关于自己的理解</h1><p>在学到这里的时候，网上很多都会说JS去new一个对象，我总觉得不是很准确，new后面跟着的是一个函数，这个函数被new调用就是构造函数，它会默认返回一个对象。在JS中，类是一个类似类的类，换句话说就是类不是真正意义上的类，还是一个函数，包括ES6里面关键字新增的class也是语法糖，本质上就是一个构造函数，而函数是不是构造函数取决于它是不是通过new调用。</p><h1 id="new关键字的this指向"><a href="#new关键字的this指向" class="headerlink" title="new关键字的this指向"></a>new关键字的this指向</h1><p>先看一段代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.a = a;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> obj1 = <span class="keyword">new</span> fun(<span class="number">5</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(obj1);</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>这里的this会指向谁呢</li></ul><p>关于new操作符调用函数的四步走：</p><ol><li>函数 内自身自动创建空对象</li><li>函数上下文会指向这个对象</li><li>函数内语句执行</li><li>函数会自动返回上下文对象，即使函数没有return语句</li></ol><p>看完这4个步骤：</p><p>首先，函数内会创建一个空对象，就是这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    function fun(a) &#123;</span><br><span class="line">      &#123;&#125;;</span><br><span class="line">      this.a = a;</span><br><span class="line">    &#125;</span><br><span class="line">    var obj1 = new fun(5);</span><br><span class="line">    console.log(obj1);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>第二步，就是this里面指向的是这个对象，即此时this即使刚才的空对象</p><p>第三步，执行函数语句，new fun(5)是不是就执行了，this.a = a就相当于参数赋值给了这个对象，此时对象里面的内容就是{a:5}</p><p>第四步，返回上下文对象，是不是就是那个创建的空对象，我们使用了obj1去接受它，所以输出obj1就是一个对象，{a:5}。</p><h1 id="模拟私有变量"><a href="#模拟私有变量" class="headerlink" title="模拟私有变量"></a>模拟私有变量</h1><p>在<a href="https://www.frontblog.top/article/6341a1da.html">JS闭包</a>这篇文章中实现了模拟私有变量，下面是另外的一种形式的实现。结合闭包、IIFE立即执行函数、构造函数实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Fun = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> _a;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Fun</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">a</span>)</span> &#123;</span><br><span class="line">      _a = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">say</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;a是：&#x27;</span> + _a);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Fun;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">var</span> v = <span class="keyword">new</span> Fun(<span class="number">1</span>);</span><br><span class="line">v.say();</span><br></pre></td></tr></table></figure><ul><li>首先定义了常量const，立即执行了一个函数，这个函数返回了一个类，我们使用new Fun()调用函数，返回的其实是这个类的 示例，就是一个对象，现在这个对象上只有say这个方法。</li><li>我们需要知道一个：constructor是构造函数，say是原型上的方法。</li><li></li></ul><p>有个问题：</p><ul><li>如果我示例化两个对象，后面的会覆盖掉原先的私有变量。不信可以运行下面代码：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Fun = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> _a;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Fun</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">a</span>)</span> &#123;</span><br><span class="line">      _a = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">say</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;a是：&#x27;</span> + _a);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Fun;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">var</span> v = <span class="keyword">new</span> Fun(<span class="number">1</span>);</span><br><span class="line">v.say();<span class="comment">//1</span></span><br><span class="line"><span class="keyword">var</span> vv = <span class="keyword">new</span> Fun(<span class="number">50</span>);</span><br><span class="line">vv.say();<span class="comment">//50</span></span><br><span class="line">v.say();<span class="comment">//50，被覆盖</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录new一个函数后发生了什么&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>JS的this指向</title>
    <link href="https://www.frontblog.top/article/7be86ae8.html"/>
    <id>https://www.frontblog.top/article/7be86ae8.html</id>
    <published>2021-11-14T07:56:23.000Z</published>
    <updated>2021-11-18T09:11:52.034Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录JS的this的指针规则。</p><h1 id="什么是this指向"><a href="#什么是this指向" class="headerlink" title="什么是this指向"></a>什么是this指向</h1><p>先来看个生活中的例子。</p><p>这是非常好的习惯，值得表扬。</p><p>看到这句话时，可能不知道这里的这指的什么，如果我们换个说法：学会垃圾分类，这是非常好的习惯，值得表扬。我们就知道这里的这指的时垃圾分类，英文this翻译过来就是这，在JS中，也存在这种情况，this代表这，那它指向的是什么，是全局还是局部，又或者对象本身的的属性。</p><h1 id="函数上下文"><a href="#函数上下文" class="headerlink" title="函数上下文"></a>函数上下文</h1><p>函数也可以使用this关键字，表示函数的上下文，函数的this指向谁，是根据调用函数的所处环境来判断的，也就是定义一个函数，this的指针是不明确的，只有在调用时才知道。比如下面的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>，</span><br><span class="line">    <span class="attr">b</span>:<span class="number">2</span>，</span><br><span class="line">    <span class="attr">say</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;a:&#x27;</span>+<span class="built_in">this</span>.a+<span class="string">&#x27;b:&#x27;</span>+<span class="built_in">this</span>.b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.say()<span class="comment">//a:1b:2</span></span><br><span class="line"><span class="keyword">var</span> vsay = obj.say</span><br><span class="line">vsay()<span class="comment">//a:undefinedb:undefined</span></span><br></pre></td></tr></table></figure><p>当我们直接调用属性方法并执行的时候，this指向的是对象自己，当我们把方法赋值给变量的时候，this指向的是全局对象window，可以通过打印this观察到，这也就证明函数的 this跟执行时所处环境是有关系的。但是也因为这样，this的指针如果不知道规则，就不知道这个this是什么了。</p><h1 id="this规则一"><a href="#this规则一" class="headerlink" title="this规则一"></a>this规则一</h1><p>对象打点调用它的方法函数，则函数的上下文就是这个打点调用。构成对象.方法()形式</p><p>例子1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.a+<span class="built_in">this</span>.b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">66</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">33</span>,</span><br><span class="line">    <span class="attr">fn</span>:fn</span><br><span class="line">&#125;</span><br><span class="line">obj.fn()<span class="comment">//99</span></span><br></pre></td></tr></table></figure><ul><li>函数的this在定义的时候是不明确的，在obj对象中使用，最后使用<code>obj.fn()</code>执行了函数，此时的this指向的正是obj对象。</li></ul><p>例子2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">fn</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.a+<span class="built_in">this</span>.b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="attr">fn</span>:obj1.fn</span><br><span class="line">&#125;</span><br><span class="line">obj2.fn()<span class="comment">//5</span></span><br></pre></td></tr></table></figure><ul><li>记住一点函数执行的时候才知道this指向谁，这里是obj2在调用，所以this指向的是obj2</li></ul><p>例子3：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">22</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">a</span>:<span class="number">33</span>,</span><br><span class="line">        <span class="attr">b</span>:<span class="number">44</span>,</span><br><span class="line">        <span class="attr">fn</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.a+<span class="built_in">this</span>.b)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">outher().fn();<span class="comment">//77</span></span><br></pre></td></tr></table></figure><ul><li>这题目返回的是一个对象，对象打点调用属性方法，this指向的就是这个对象，所以是77</li></ul><p>例子4：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.a+<span class="built_in">this</span>.b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">c</span>:[&#123;</span><br><span class="line">        <span class="attr">a</span>:<span class="number">3</span></span><br><span class="line">        <span class="attr">b</span>:<span class="number">4</span>,</span><br><span class="line">        <span class="attr">c</span>:fun</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line">obj.c[<span class="number">0</span>].c();<span class="comment">//7</span></span><br></pre></td></tr></table></figure><ul><li>这里可能会困惑的是this指向哪个对象，是obj还是c数组里里面的对象，其实只要熟悉上面的，<strong>对象打点调用它的方法函数，则函数的上下文就是这个打点调用</strong>，那么此时谁在调用它，显然是c里面的对象，所以输出7</li></ul><p>这里截取网上一片文章的总结</p><blockquote><p>情况1：如果一个函数中有this，但是它没有被上一级的对象所调用，那么this指向的就是window，这里需要说明的是在js的严格版中this指向的不是window，但是我们这里不探讨严格版的问题，你想了解可以自行上网查找。</p><p>情况2：如果一个函数中有this，这个函数有被上一级的对象所调用，那么this指向的就是上一级的对象。</p><p>情况3：如果一个函数中有this，<strong>这个函数中包含多个对象，尽管这个函数是被最外层的对象所调用，this指向的也只是它上一级的对象</strong>                                                                         —-截取至 : <a href="https://www.cnblogs.com/pssp/p/5216085.html">https://www.cnblogs.com/pssp/p/5216085.html</a></p></blockquote><h1 id="this规则二"><a href="#this规则二" class="headerlink" title="this规则二"></a>this规则二</h1><p>圆括号直接调用函数，则函数的上下文是window对象(非严格模式下，在严格模式下是undefined，因为函数没有被谁调用，在非严格模式下就会把undefined变成window，会让人觉得是window在调用，其实不是，this的指向是谁调用，就指向谁，而不在乎在哪调用)。函数()</p><p>例子1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">fn</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="built_in">this</span>.a+<span class="built_in">this</span>.b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">var</span> fn = obj1.fn;</span><br><span class="line">fn();<span class="comment">//7</span></span><br></pre></td></tr></table></figure><ul><li><code>obj1.fn</code>赋值给了全局变量，fn这个函数属于直接提取到外面执行，所以指向全局的a和b</li></ul><p>例子2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.a+<span class="built_in">this</span>.b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="attr">b</span>:fun(),</span><br><span class="line">    <span class="attr">fun</span>:fun</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> result = obj.fun()</span><br><span class="line"><span class="built_in">console</span>.log(result)<span class="comment">//6</span></span><br></pre></td></tr></table></figure><ul><li> b:fun()和fun:fun一个是执行后一个是没执行，这是我们重点要关注的，b:fun()执行的时候，fun函数this执行是不是就是全局，全局的a和b是不是就是1和2，相加是不是就是3，所以obj的b属性值就是3，再来看obj.fun()，是执行了fun函数，此时是obj在调用，所以这里的this指向的是obj对象，obj对象的a和b就是3和3，相加就是6。</li></ul><h1 id="this规则三"><a href="#this规则三" class="headerlink" title="this规则三"></a>this规则三</h1><p>数组（类数组对象）枚举出函数进行 调用，上下文是这个数组（类数组对象），<code>数组[下标]()</code></p><p>例子1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr =  [<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="number">5</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="built_in">this</span>[<span class="number">0</span>])&#125;];</span><br><span class="line">arr[<span class="number">3</span>]()<span class="comment">//A</span></span><br></pre></td></tr></table></figure><ul><li>这里的this指向的是arr这个数组，如果<code>arr[3]</code>赋值给一个变量，在执行变量，那么this就是全局，适合规则二</li></ul><p>例子2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">3</span>]()<span class="comment">//A</span></span><br><span class="line">&#125;</span><br><span class="line">fun(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="number">5</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="built_in">this</span>[<span class="number">0</span>])&#125;)</span><br></pre></td></tr></table></figure><ul><li>类数组对象也适合规则三。</li></ul><h1 id="this规则四"><a href="#this规则四" class="headerlink" title="this规则四"></a>this规则四</h1><p>IIFE中的函数，上下文是window对象。<code>(function()&#123;&#125;)()</code></p><p>例子1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">fun</span>:(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="built_in">this</span>.a;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(a+<span class="built_in">this</span>.a)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)()</span><br><span class="line">&#125;</span><br><span class="line">obj.fun();<span class="comment">//3</span></span><br></pre></td></tr></table></figure><ul><li>首先<code>obj.fun();</code>说明这个返回的是函数，再看fun这个属性，它是一个立即执行函数，返回一个函数，立即执行函数是window， <code>var a = this.a;</code>这一句是全局是变量的a赋值给a，执行函数返回的函数是在最后一行执行，所以这个函数里面的a是指向obj的，所以这里的this.a是2，刚才的a是1，所以相加是3</li></ul><h1 id="this规则五"><a href="#this规则五" class="headerlink" title="this规则五"></a>this规则五</h1><p>定时器、延时器调用函数，上下文是window对象。格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setInterval(函数,时间)</span><br><span class="line">setTimeout(函数,时间)</span><br></pre></td></tr></table></figure><p>例子1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">fun</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.a+<span class="built_in">this</span>.b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(obj.fun,<span class="number">2000</span>)<span class="comment">//7</span></span><br></pre></td></tr></table></figure><ul><li>这里的<code>obj.fun</code>会让人觉得是调用obj里面，其实这是错误的想法，这里这是调用，执行setTimeout这个函数</li></ul><p>改造一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">fun</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.a + <span class="built_in">this</span>.b); <span class="comment">//3</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(obj.fun, <span class="number">2000</span>); <span class="comment">//7</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">4</span>;</span><br><span class="line">obj.fun();</span><br></pre></td></tr></table></figure><ul><li>这里会输出3，2秒后输出7，所以说明setTimeout里面的this指向是window。</li></ul><p>再改造一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">fun</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.a+<span class="built_in">this</span>.b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    obj.fun()<span class="comment">//3</span></span><br><span class="line">&#125;,<span class="number">2000</span>)</span><br></pre></td></tr></table></figure><ul><li>这里就不是setTimeout在调用，这里是obj在调用，所以this指向的是obj，所以是3</li></ul><h1 id="this规则六"><a href="#this规则六" class="headerlink" title="this规则六"></a>this规则六</h1><p>事件处理函数的上下文是绑定事件的DOM元素。格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOM元素.onclick = function()&#123; &#125;</span><br></pre></td></tr></table></figure><p>例子1：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#box</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#box1</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#box2</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> box2 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box2&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    box.onclick = fun;</span></span><br><span class="line"><span class="javascript">    box1.onclick = fun;</span></span><br><span class="line"><span class="javascript">    box2.onclick = fun;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> that = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        that.style.backgroundColor = <span class="string">&#x27;red&#x27;</span>;</span></span><br><span class="line"><span class="javascript">      &#125;, <span class="number">2000</span>);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>这里使用  <code>that.style.backgroundColor = &#39;red&#39;;</code>是因为延时器this指向的window，我们需要这个this指向的DOM对象，所以有了上面的赋值语句<code>var that = this;</code></li></ul><h1 id="this规则七call和apply"><a href="#this规则七call和apply" class="headerlink" title="this规则七call和apply"></a>this规则七call和apply</h1><p>可以任意指定上下文，格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">函数.call(上下文)</span><br><span class="line">函数.apply(上下文)</span><br></pre></td></tr></table></figure><p>例子1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.a)</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="built_in">console</span>.log(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">5</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">fun.call(obj,<span class="number">1</span>,<span class="number">2</span>)<span class="comment">//5、1、2</span></span><br><span class="line">fun.apply(obj,[<span class="number">1</span>,<span class="number">2</span>])<span class="comment">//5、1、2</span></span><br></pre></td></tr></table></figure><ul><li>这个例子中使用call和apply指定了上下文的关系，把这个this指向了对象，所以<code>this.a</code>访问的是obj的a，a是参数，所以是1</li><li>两者的区别在于参数的不同，一个需要逗号隔开，一个需要数组</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录JS的this的指针规则。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="this" scheme="https://www.frontblog.top/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>JS面向对象</title>
    <link href="https://www.frontblog.top/article/a58353f0.html"/>
    <id>https://www.frontblog.top/article/a58353f0.html</id>
    <published>2021-11-14T01:19:29.000Z</published>
    <updated>2021-11-14T07:47:20.444Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录学习面向对象的基础知识。</p><h1 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h1><p>对象是一种K:V值的存在，键值对的集合，使用大括号包裹。</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;LSF&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">12</span>,</span><br><span class="line">  <span class="attr">var</span>: <span class="string">&#x27;舒克&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;va-r&#x27;</span>: <span class="string">&#x27;贝塔&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>不符合命名规范的属性需要引号包裹。</p></blockquote><p>属性值访问：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;LSF&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">12</span>,</span><br><span class="line">  <span class="attr">var</span>: <span class="string">&#x27;舒克&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;va-r&#x27;</span>: <span class="string">&#x27;贝塔&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> name1 = <span class="string">&#x27;name&#x27;</span></span><br><span class="line">obj.name<span class="comment">//LSF</span></span><br><span class="line">obj[<span class="string">&#x27;var&#x27;</span>]<span class="comment">//舒克</span></span><br><span class="line">obj[<span class="string">&#x27;va-r&#x27;</span>]<span class="comment">//贝塔</span></span><br><span class="line">obj.name1 <span class="comment">//undefined</span></span><br><span class="line">obj[name1]<span class="comment">//LSF</span></span><br></pre></td></tr></table></figure><blockquote><p>不符合命名规范的属性想要调用，需要使用[‘’]访问。变量存储的也需要使用[‘’]访问</p></blockquote><p>属性的更改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">obj.a++</span><br><span class="line">obj.a = <span class="number">30</span></span><br></pre></td></tr></table></figure><p>属性的创建：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">obj.b = <span class="number">30</span></span><br></pre></td></tr></table></figure><p>属性的 删除：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">10</span></span><br><span class="line">    <span class="attr">b</span>:<span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>.obj.b</span><br></pre></td></tr></table></figure><h1 id="对象的方法"><a href="#对象的方法" class="headerlink" title="对象的方法"></a>对象的方法</h1><p>如果对象的某个属性值是函数，则称为对象“方法”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stu=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;LSF&#x27;</span></span><br><span class="line">    <span class="attr">age</span>: <span class="number">22</span></span><br><span class="line">    <span class="attr">sayhello</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">stu.sayhello()</span><br></pre></td></tr></table></figure><h1 id="对象的遍历"><a href="#对象的遍历" class="headerlink" title="对象的遍历"></a>对象的遍历</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">11</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">15</span>,</span><br><span class="line">    <span class="attr">c</span>:<span class="number">46</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;属性:&#x27;</span>+k+<span class="string">&#x27;属性值:&#x27;</span>+obj[k])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="对象的深浅克隆"><a href="#对象的深浅克隆" class="headerlink" title="对象的深浅克隆"></a>对象的深浅克隆</h1><p>对象是引用类型，直接赋值其实还是相同地址</p><p>浅克隆：(for k in obj)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj =&#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">c</span>:<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj)&#123;</span><br><span class="line">     obj1[k] = obj[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>深克隆：（递归）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> obj = &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">a</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">b</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">c</span>: [</span></span><br><span class="line"><span class="javascript">        <span class="number">3</span>,</span></span><br><span class="line"><span class="javascript">        <span class="number">4</span>,</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">d</span>: <span class="number">5</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">e</span>: <span class="number">66</span>,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">      ],</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">o</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(o)) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> result = [];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; o.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">          result.push(deepClone(o[i]));</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> o == <span class="string">&#x27;object&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> result = &#123;&#125;;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> o) &#123;</span></span><br><span class="line"><span class="javascript">          result[k] = deepClone(o[k]);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> result = o;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> result;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> obj2 = deepClone(obj);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(obj2);</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录学习面向对象的基础知识。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="面向对象" scheme="https://www.frontblog.top/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>DOM的事件对象</title>
    <link href="https://www.frontblog.top/article/c298f46c.html"/>
    <id>https://www.frontblog.top/article/c298f46c.html</id>
    <published>2021-11-13T09:51:54.000Z</published>
    <updated>2021-11-14T01:29:10.722Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录DOM的事件对象，待完成中…</p><h1 id="什么时事件对象"><a href="#什么时事件对象" class="headerlink" title="什么时事件对象"></a>什么时事件对象</h1><h1 id="鼠标位置"><a href="#鼠标位置" class="headerlink" title="鼠标位置"></a>鼠标位置</h1><h1 id="键盘字符码"><a href="#键盘字符码" class="headerlink" title="键盘字符码"></a>键盘字符码</h1><h1 id="阻止默认事件"><a href="#阻止默认事件" class="headerlink" title="阻止默认事件"></a>阻止默认事件</h1><h1 id="阻止事件传播"><a href="#阻止事件传播" class="headerlink" title="阻止事件传播"></a>阻止事件传播</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录DOM的事件对象，待完成中…&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="事件对象" scheme="https://www.frontblog.top/tags/%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>DOM的事件传播</title>
    <link href="https://www.frontblog.top/article/be14c4ce.html"/>
    <id>https://www.frontblog.top/article/be14c4ce.html</id>
    <published>2021-11-13T09:09:32.000Z</published>
    <updated>2021-11-13T09:41:28.230Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍DOM的事件传播。</p><h1 id="一个问题"><a href="#一个问题" class="headerlink" title="一个问题"></a>一个问题</h1><p>如果一个盒子里面套一个盒子，每个盒子都有点击事件，当我们点击最里面的盒子，事件是怎么开始触发的</p><h1 id="事件传播"><a href="#事件传播" class="headerlink" title="事件传播"></a>事件传播</h1><p>事件传播分为捕获阶段和冒泡阶段，即由外到内，再由内到外触发，on开头只能监听冒泡阶段，add开头则可以监听捕获阶段，addEventListener最后的布尔值表示是否监听捕获阶段。</p><h1 id="观察"><a href="#观察" class="headerlink" title="观察"></a>观察</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-id">#box</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-id">#box1</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-id">#box2</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> box2 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      box.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;box&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      box1.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;box1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      box2.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;box2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      box.addEventListener(</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;click&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&#x27;box捕获阶段&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">      );</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      box1.addEventListener(</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;click&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&#x27;box1捕获阶段&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">      );</span></span><br><span class="line"><span class="javascript">      box2.addEventListener(</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;click&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&#x27;box2捕获阶段&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">      );</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的时，最后一个的元素，冒泡和捕获阶段的根据书写顺序执行，其他就是先捕获再冒泡</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍DOM的事件传播。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="事件传播" scheme="https://www.frontblog.top/tags/%E4%BA%8B%E4%BB%B6%E4%BC%A0%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>DOM的事件监听</title>
    <link href="https://www.frontblog.top/article/448136fd.html"/>
    <id>https://www.frontblog.top/article/448136fd.html</id>
    <published>2021-11-13T04:00:49.000Z</published>
    <updated>2021-11-13T09:08:46.852Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录DOM的事件监听</p><h1 id="什么是事件监听"><a href="#什么是事件监听" class="headerlink" title="什么是事件监听"></a>什么是事件监听</h1><p>事件就是用户与网页的交互，监听就是对用户的操作做出反应，执行一些程序代码。</p><p>最简单的给元素设置事件监听的方法就是设置它们的on XXX属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//点击元素，做出反应</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="常见鼠标事件"><a href="#常见鼠标事件" class="headerlink" title="常见鼠标事件"></a>常见鼠标事件</h1><table><thead><tr><th align="center">事件名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">onclick</td><td align="center">单击</td></tr><tr><td align="center">ondblcick</td><td align="center">双击</td></tr><tr><td align="center">onmousedown</td><td align="center">按下</td></tr><tr><td align="center">onmouseup</td><td align="center">松开</td></tr><tr><td align="center">onmousemove</td><td align="center">划过的时候触发</td></tr><tr><td align="center">onmouseenter</td><td align="center">鼠标进入</td></tr><tr><td align="center">onmouseleave</td><td align="center">鼠标离开</td></tr></tbody></table><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">     <span class="selector-class">.btn</span> &#123;</span></span><br><span class="line"><span class="css">       <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">       <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">       <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">       <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">       <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">       <span class="attribute">line-height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">       <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">       <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="css">       <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="css">     &#125;</span></span><br><span class="line"><span class="css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>onclick单击<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;button1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>ondblclick双击<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;button2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>onmousedown按下<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;button3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>onmouseup松开<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;button4&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>onmousemove划过<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;button5&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>onmouseenter鼠标进入<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;button6&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>onmouseleave鼠标离开<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> button = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> button1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> button2 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> button3 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button3&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> button4 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button4&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> button5 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button5&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> button6 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button6&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     button.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       button.innerText = <span class="string">&#x27;我被点击了&#x27;</span>;</span></span><br><span class="line"><span class="javascript">     &#125;;</span></span><br><span class="line"><span class="javascript">     button1.ondblclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       button1.innerText = <span class="string">&#x27;我被双击了&#x27;</span>;</span></span><br><span class="line"><span class="javascript">     &#125;;</span></span><br><span class="line"><span class="javascript">     button2.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       button2.innerText = <span class="string">&#x27;我按下了&#x27;</span>;</span></span><br><span class="line"><span class="javascript">       button2.style = <span class="string">&#x27; background-color: red&#x27;</span>;</span></span><br><span class="line"><span class="javascript">     &#125;;</span></span><br><span class="line"><span class="javascript">     button3.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       button3.innerText = <span class="string">&#x27;鼠标松开&#x27;</span>;</span></span><br><span class="line"><span class="javascript">       button3.style = <span class="string">&#x27; background-color: green&#x27;</span>;</span></span><br><span class="line"><span class="javascript">     &#125;;</span></span><br><span class="line"><span class="javascript">     button4.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       button4.innerText = <span class="string">&#x27;鼠标划过&#x27;</span>;</span></span><br><span class="line"><span class="javascript">       button4.style = <span class="string">&#x27; background-color: green&#x27;</span>;</span></span><br><span class="line"><span class="javascript">     &#125;;</span></span><br><span class="line"><span class="javascript">     button5.onmouseenter = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       button5.innerText = <span class="string">&#x27;鼠标进入&#x27;</span>;</span></span><br><span class="line"><span class="javascript">       button5.style = <span class="string">&#x27; background-color: green&#x27;</span>;</span></span><br><span class="line"><span class="javascript">     &#125;;</span></span><br><span class="line"><span class="javascript">     button6.onmouseleave = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       button6.innerText = <span class="string">&#x27;鼠标离开&#x27;</span>;</span></span><br><span class="line"><span class="javascript">       button6.style = <span class="string">&#x27; background-color: green&#x27;</span>;</span></span><br><span class="line"><span class="javascript">     &#125;;</span></span><br><span class="line"><span class="javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="常见键盘事件"><a href="#常见键盘事件" class="headerlink" title="常见键盘事件"></a>常见键盘事件</h1><table><thead><tr><th align="center">事件名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">onkeypress</td><td align="center">按下，无法识别系统按钮</td></tr><tr><td align="center">onkeydown</td><td align="center">按下，系统按钮可以识别，优先onkeypress</td></tr><tr><td align="center">onkeyup</td><td align="center">松开</td></tr></tbody></table><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> input = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    input.onkeyup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(input.value);</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="常见表单事件"><a href="#常见表单事件" class="headerlink" title="常见表单事件"></a>常见表单事件</h1><table><thead><tr><th align="center">事件名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">onchange</td><td align="center">当用户改变域的内容</td></tr><tr><td align="center">onfocus</td><td align="center">某元素获得焦点</td></tr><tr><td align="center">onblur</td><td align="center">某元素失去焦点</td></tr><tr><td align="center">onsubmit</td><td align="center">表单被提交</td></tr><tr><td align="center">onreset</td><td align="center">表单被重置</td></tr><tr><td align="center">oninput</td><td align="center">输入框输入状态</td></tr></tbody></table><h1 id="常见页面事件"><a href="#常见页面事件" class="headerlink" title="常见页面事件"></a>常见页面事件</h1><table><thead><tr><th align="center">事件名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">onload</td><td align="center">页面加载完成</td></tr><tr><td align="center">onunlad</td><td align="center">退出页面</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文记录DOM的事件监听&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="事件监听" scheme="https://www.frontblog.top/tags/%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/"/>
    
  </entry>
  
  <entry>
    <title>DOM的基础</title>
    <link href="https://www.frontblog.top/article/6b13fd80.html"/>
    <id>https://www.frontblog.top/article/6b13fd80.html</id>
    <published>2021-11-12T08:56:19.000Z</published>
    <updated>2021-11-13T04:45:30.761Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录DOM的基础用法，如何增删改查一个DOM元素。</p><h1 id="DOM是什么"><a href="#DOM是什么" class="headerlink" title="DOM是什么"></a>DOM是什么</h1><p>DOM（Document Object Model,文档类型对象）</p><p>JS想要去操作HTML和CSS代码，就需要使用DOM，它是属于JS的Api，通过调用这些Api就才能去操作页面结构，DOM的思想是把页面的HTML标签当作一个节点，通过获取这些节点进行具体的操作，让页面具有“动态性”</p><p>一个DOM树：</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211112172437.png"></p><h1 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h1><p>检测节点类型，使用nodeType，带☆指比较常见的。</p><table><thead><tr><th align="center">nodeType值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">☆  1</td><td align="center">元素节点</td></tr><tr><td align="center">2</td><td align="center">属性节点</td></tr><tr><td align="center">☆  3</td><td align="center">文字节点</td></tr><tr><td align="center">4</td><td align="center">文档中的 CDATA 部分（不会由解析器解析的文本）</td></tr><tr><td align="center">5</td><td align="center">实体引用</td></tr><tr><td align="center">6</td><td align="center">实体</td></tr><tr><td align="center">7</td><td align="center">处理指令</td></tr><tr><td align="center">☆  8</td><td align="center">注释节点</td></tr><tr><td align="center">☆  9</td><td align="center">doctument节点</td></tr><tr><td align="center">☆ 10</td><td align="center">DTD节点</td></tr><tr><td align="center">11</td><td align="center">轻量级的 Document 对象，能够容纳文档的某个部分</td></tr><tr><td align="center">12</td><td align="center">DTD 中声明的符号</td></tr></tbody></table><h1 id="节点关系"><a href="#节点关系" class="headerlink" title="节点关系"></a>节点关系</h1><p>先看一张图片：</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211112174201.png"></p><p>父节点要访问子节点可以通过：firstChild调用第一个子节点、lastChild调用最后一个节点、childNodes调用子节点。</p><p>子节点想要访问父节点可以通过：parentNode调用父节点</p><p>同层级兄弟节点可以通过：nextSibling访问下一个节点，previousSibling访问上一个节点</p><p>需要注意的是，<strong>空白文本节点也是节点，使用上面的api会获取空白节点。</strong>通过只考虑元素节点的api就可以排除空白节点的干扰。</p><table><thead><tr><th align="center">关系</th><th align="center">考虑所有节点</th><th align="center">只考虑元素节点(IE9)</th></tr></thead><tbody><tr><td align="center">第一个子节点</td><td align="center">firstChild</td><td align="center">firstElementChild</td></tr><tr><td align="center">最后一个子节点</td><td align="center">lastChild</td><td align="center">lastElementChild</td></tr><tr><td align="center">子节点</td><td align="center">childNodes</td><td align="center">children</td></tr><tr><td align="center">父节点</td><td align="center">parentNode</td><td align="center">同</td></tr><tr><td align="center">前一个兄弟节点</td><td align="center">previousSibling</td><td align="center">previousElementSibling</td></tr><tr><td align="center">后一个兄弟节点</td><td align="center">nextSibling</td><td align="center">nextElementSibling</td></tr></tbody></table><h1 id="document对象-获取节点"><a href="#document对象-获取节点" class="headerlink" title="document对象(获取节点)"></a>document对象(获取节点)</h1><p>document对象是本文档的根，几乎所有DOM的功能都封装在这个对象里面</p><p>访问元素节点的五个常用方法：</p><table><thead><tr><th align="center">方法</th><th align="center">功能</th><th align="center">兼容性</th></tr></thead><tbody><tr><td align="center">getElementById()</td><td align="center">通过<strong>id</strong>得到元素</td><td align="center">IE6</td></tr><tr><td align="center">getElementsByTagName()</td><td align="center">通过<strong>标签</strong>得到<strong>元素数组</strong></td><td align="center">IE6</td></tr><tr><td align="center">getElementsByClassName()</td><td align="center">通过<strong>类名</strong>得到<strong>元素数组</strong></td><td align="center">IE9</td></tr><tr><td align="center">querySelector()</td><td align="center">通过<strong>选择器</strong>得到<strong>元素</strong></td><td align="center">IE8部分兼容、IE9完全兼容</td></tr><tr><td align="center">querySelectorAll()</td><td align="center">通过<strong>选择器</strong>得到<strong>元素数组</strong></td><td align="center">IE8部分兼容、IE9完全兼容</td></tr></tbody></table><p>getElementById()：如果页面有两个相同ID，只会获取第一个ID的盒子</p><p>getElementsByTagName()：得到的是一个节点数组。某个节点也可以调用getElementsByTagName()，从而得到内部的子节点。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>box段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>box段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>box段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>box段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 得到app里面的p</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> p = app.getElementsByTagName(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(p);</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>querySelector()：通过选择器选中节点，但是如果多个符合条件，只能选中第一个。</p><p>querySelectorAll()：通过选择器选中节点,可以选中多个。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      我是段落</span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是Span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      我是段落</span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是Span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#app p span&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app1 = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;#app p span&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(app1[<span class="number">0</span>]);</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h1><blockquote><p>注意，下面提到的app都是节点的代号，无其他含义</p></blockquote><p><strong>获取节点后，肯定是需要对节点相应的操作。对节点的操作有两个属性：innerHTML和innerText</strong></p><p>innerHTML：可以插入文字节点和HTML标签</p><p>innerText：只能插入纯文字</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    app.innerHTML = <span class="string">&#x27;&lt;h1&gt;Vue is Good&lt;/h1&gt;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    app.innerHTML = <span class="string">&#x27;Vue is Good&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    app.innerText = <span class="string">&#x27;Vue is Good&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    app.innerText = <span class="string">&#x27;&lt;h1&gt;Vue is Good&lt;/h1&gt;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>操作节点改变CSS属性:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/base.css&quot;</span> <span class="attr">id</span>=<span class="string">&quot;css&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">     <span class="selector-id">#app</span> &#123;</span></span><br><span class="line"><span class="css">       <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">       <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">       <span class="comment">/* background-color: aqua; */</span></span></span><br><span class="line"><span class="css">     &#125;</span></span><br><span class="line"><span class="css">     <span class="selector-class">.style2</span> &#123;</span></span><br><span class="line"><span class="css">       <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css">     &#125;</span></span><br><span class="line"><span class="css">     <span class="selector-class">.style3</span> &#123;</span></span><br><span class="line"><span class="css">       <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">     &#125;</span></span><br><span class="line"><span class="css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     <span class="comment">//下面两种效果一样，都属于内联式：通过内联式修改</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">//app.style.backgroundColor = &#x27;red&#x27;;</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">//app.style.cssText = &#x27;background-color:blue&#x27;;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="comment">//更改类名为style2或者style3：通过修改类名来修改样式</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">// app.setAttribute(&#x27;class&#x27;, &#x27;style2&#x27;);</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">// app.className = &#x27;style3&#x27;;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="comment">//通过更改href属性来修改样式</span></span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> css = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;css&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     css.setAttribute(<span class="string">&#x27;href&#x27;</span>, <span class="string">&#x27;css/base1.css&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     <span class="comment">//css.href = &#x27;./css/base1.css&#x27;;</span></span></span><br><span class="line"><span class="javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要有三种方法：</p><ul><li><code>app.style.backgroundColor</code>：直接调用属性，赋值属性值，<code>app.style.cssText</code>则是赋值属性和属性值，两者都是内联式，直接添加到标签里面</li><li><code>app.setAttribute(&#39;class&#39;, &#39;style2&#39;)</code>：是通过更改类名，达到修改样式作用，前提是这个类名需要在样式表定义好。<code>app.className = &#39;style3&#39;;</code>也是同样的道理，修改类名。</li><li> <code>css.setAttribute(&#39;href&#39;, &#39;css/base1.css&#39;);</code>和<code>css.href = &#39;./css/base1.css&#39;;</code>都是通过修改引入样式表的文件来修改样式。</li></ul><p>操作节点属性也特别简单，只需要获取节点后，调用属性即可，例如：app.href、app.src等等。</p><p><strong>setAttribute和getAttribute</strong></p><p>上面使用setAttribute，其实和getAttribute是配对的，我们可以使用setAttribute设置属性，getAttribute获取属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    app.setAttribute(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;10&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(app.getAttribute(<span class="string">&#x27;test&#x27;</span>)); <span class="comment">//10</span></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="节点创建、移动、删除、克隆"><a href="#节点创建、移动、删除、克隆" class="headerlink" title="节点创建、移动、删除、克隆"></a>节点创建、移动、删除、克隆</h1><p><strong>节点创建和挂载</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第一个子节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第二个子节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第三个子节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//获取父节点</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//获取p段落</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> paragraph = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//创建节点</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//节点插入文字</span></span></span><br><span class="line"><span class="javascript">    p.innerText = <span class="string">&#x27;我是段落&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//节点挂载</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//app.appendChild(p);//插入到父节点中最后的子节点</span></span></span><br><span class="line"><span class="javascript">    app.insertBefore(p, paragraph[<span class="number">2</span>]); <span class="comment">//插入到父节点里面的任意位置，需要一个标记，在这个标记的前面</span></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建的节点只是创建了标签，要想在页面上显示，就必须把标签挂在到DOM树上，使用appendChild和insertBefore就可以把节点挂载到DOM树上。两个不同在于，insertBefore更加灵活，需要指定一个标记。</p><p>用法：</p><p>appendChild:   父节点.appendChild(新的子节点)</p><p>insertBefore:    父节点.insertBefore(新的子节点,标杆节点)</p><p>小案例，动态创建表格：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="css">   <span class="attribute">order</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">   <span class="attribute">width</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">   <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">   <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">   <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;table&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">//获取节点</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> tab = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;table&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">//创建table</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> table = <span class="built_in">document</span>.createElement(<span class="string">&#x27;table&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 挂载</span></span></span><br><span class="line"><span class="javascript">      tab.appendChild(table);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//20列</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> tr = <span class="built_in">document</span>.createElement(<span class="string">&#x27;tr&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        table.appendChild(tr);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">12</span>; j++) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//12行</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> td = <span class="built_in">document</span>.createElement(<span class="string">&#x27;td&#x27;</span>);</span></span><br><span class="line"><span class="javascript">          tr.appendChild(td);</span></span><br><span class="line"><span class="javascript">          td.innerText = j;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>动态创建九九乘法表：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">55px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">      <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> table = <span class="built_in">document</span>.createElement(<span class="string">&#x27;table&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    app.appendChild(table);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//9行</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> tr = <span class="built_in">document</span>.createElement(<span class="string">&#x27;tr&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      table.appendChild(tr);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 第一行输出一列</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> td = <span class="built_in">document</span>.createElement(<span class="string">&#x27;td&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        tr.appendChild(td);</span></span><br><span class="line"><span class="javascript">        td.innerText = j + <span class="string">&#x27;*&#x27;</span> + i + <span class="string">&#x27;=&#x27;</span> + i * j;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>节点的移动：</strong></p><p>appendChild和insertBefore不仅可以挂载到DOM树上面，还可以移动节点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是移动过来的<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>标杆节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>标杆节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>标杆节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//获取原父节点</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//获取新的父节点</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 获取要移动的节点</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> p = app.firstElementChild;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 获取标杆</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> vp = box.children[<span class="number">1</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// box.appendChild(p);//移动到新的父节点里面的最后</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    box.insertBefore(p, vp); <span class="comment">//标杆节点前面</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><strong>节点的删除：</strong></p><p>使用removeChild()方法从DOM中删除一个子节点，子节点不能主动删除自己，必须由父节点删除它</p><p>父节点.removeChild(要删除的子节点)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我被删除<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    app.removeChild(app.firstElementChild);</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>节点的克隆：</strong></p><p>使用cloneNode()方法可以克隆节点，克隆的节点需要挂载到DOM树，参数是布尔值，默认是false，true代表深克隆，即节点下面的子节点都会一起克隆，反之不会。</p><p>var 克隆节点 = 旧节点.clineNode()</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>深克隆<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>标杆节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>标杆节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>标杆节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取标杆</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vp = box.children[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> newnode = app.cloneNode(<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//box.appendChild(newnode);</span></span></span><br><span class="line"><span class="javascript">    box.insertBefore(newnode, vp); <span class="comment">//标杆节点前面</span></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="延迟执行"><a href="#延迟执行" class="headerlink" title="延迟执行"></a>延迟执行</h1><p>可以使用window.onload = function(){}，使页面加载完成后再执行指定代码。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>JS的DOM节点无非就是获取，操作和挂载这几个方向，但是一个页面是非常复杂的，频繁操作DOM也非常消耗性能，这也是为啥现在大都使用MVVM框架。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录DOM的基础用法，如何增删改查一个DOM元素。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="DOM" scheme="https://www.frontblog.top/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript全局作用和局部作用闭包相关面试题</title>
    <link href="https://www.frontblog.top/article/634c77b2.html"/>
    <id>https://www.frontblog.top/article/634c77b2.html</id>
    <published>2021-11-11T02:45:46.000Z</published>
    <updated>2021-11-13T03:59:43.857Z</updated>
    
    <content type="html"><![CDATA[<p>近段时间看了许多JS基础的面试题，特此记录一下，本文主要通过例子和分析的形式记录。</p><h1 id="第一个例子："><a href="#第一个例子：" class="headerlink" title="第一个例子："></a>第一个例子：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br></pre></td></tr></table></figure><ul><li>这可以说面试中基本会遇到的，稍微查过的都知道这里输出6个5。</li><li>首先for 循环里的 <code>setTimeout</code> 执行了 5 次，每次都会将这个函数的执行推迟 <code>1000ms</code> ：</li><li>接下来就是这个函数被执行，那么此时函数的输出语句i就会往外找，而此时i已经是最终的5（最后的i++变成5），所以输出的都是5，for循环和<code>setTimeout</code>是不相互影响，可以理解为for循环把<code>setTimeout</code>平放了5次，那么5次之后，这些函数就会同时输出5。</li><li>最终结果就是：先输出最外层的5,<code>1000ms</code>后同时输出5个5</li></ul><h1 id="第二个例子："><a href="#第二个例子：" class="headerlink" title="第二个例子："></a>第二个例子：</h1><p>个人觉得也很套路的题目。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = []</span><br><span class="line">    <span class="keyword">var</span> i</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        num[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num[<span class="number">9</span>]</span><br><span class="line">&#125;</span><br><span class="line">test()()</span><br></pre></td></tr></table></figure><ul><li>先看看这段代码在干嘛：test()()是调用了该函数后立即执行掉，也就是test函数返回一个函数，再看test函数，里面定义了一个空数组和变量i，一个for循环了10次，数组的每一项推入一个函数，这个函数输出i，最后test函数返回数组的第9项。</li><li>可能会这样想：<code>num[i]</code>对象的函数就是  <code>console.log(i)</code>，换句话就是，<code>num[5]</code>输出的就是5，其实这样想就已经掉坑了，<strong>函数只有被调用的时候才执行</strong>，你这里的函数在for循环里面执行了吗，显然没有，我们是在test()()这里才执行的，所以，这里函数的i是不是要往外找，而这个i已经是最终的10，所以你无论下标是多少都是输出10</li><li>最终结果就是：输出10</li></ul><h1 id="第三个例子："><a href="#第三个例子：" class="headerlink" title="第三个例子："></a>第三个例子：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">test()();</span><br></pre></td></tr></table></figure><ul><li>依旧看代码代码在干嘛：全局定义了变量a，定义函数，函数调用后执行返回的函数，再看test函数，变量a属于全局，返回函数，这个函数输出的是a，最后又定义了a等于3。</li><li>这题目主要是要看全，注意变量提升，JS的执行阶段都会把变量提升到当前作用域前面，所以函数里面的a初看是全局，但是变量提升后，使得它变成了局部变量，注意，变量只提升定义，所以a在执行阶段就赋值了a等于2，返回的函数里卖弄没有i，往外找就是找到外层函数i，正是刚才的2.</li><li>最终结果就是：输出2</li></ul><h1 id="第四个例子："><a href="#第四个例子：" class="headerlink" title="第四个例子："></a>第四个例子：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">foo</span>:<span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> foo(c,a);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> func1=foo(<span class="number">0</span>);<span class="comment">//undefined</span></span><br><span class="line">func1.foo(<span class="number">1</span>);<span class="comment">//0</span></span><br><span class="line">func1.foo(<span class="number">2</span>);<span class="comment">//0</span></span><br><span class="line">func1.foo(<span class="number">3</span>);<span class="comment">//0</span></span><br><span class="line"><span class="keyword">var</span> func2=foo(<span class="number">0</span>).foo(<span class="number">1</span>).foo(<span class="number">2</span>).foo(<span class="number">3</span>);<span class="comment">//undefined、0、0、0</span></span><br><span class="line"><span class="keyword">var</span> func3=foo(<span class="number">0</span>).foo(<span class="number">1</span>);<span class="comment">//undefined、0</span></span><br><span class="line">func3.foo(<span class="number">2</span>);<span class="comment">//1</span></span><br><span class="line">func3.foo(<span class="number">3</span>);<span class="comment">//1</span></span><br></pre></td></tr></table></figure><ul><li>当初看这题目瞬间就懵了，这写的什么，foo连续调用什么东西，什么abc的，其实这些都是为了混淆，只要仔细分析，基础扎实，这题还是容易的</li><li>我把上面的题目简化成了一下这种，当然就是输出了a和b的值：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&#x27;a——&gt;&#x27;</span> + a);</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&#x27;b——&gt;&#x27;</span> + b);</span><br><span class="line">       <span class="keyword">return</span> &#123;</span><br><span class="line">         <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> foo(c, a);</span><br><span class="line">         &#125;,</span><br><span class="line">       &#125;;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">var</span> func1 = foo(<span class="number">0</span>); <span class="comment">//0,undefined</span></span><br><span class="line">     func1.foo(<span class="number">1</span>); <span class="comment">//1,0</span></span><br><span class="line">     func1.foo(<span class="number">2</span>); <span class="comment">//2,0</span></span><br><span class="line">     func1.foo(<span class="number">3</span>); <span class="comment">//3,0</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">var</span> func2 = foo(<span class="number">0</span>).foo(<span class="number">1</span>).foo(<span class="number">2</span>).foo(<span class="number">3</span>); <span class="comment">//0,undefine,1,0,2,1,3,2 写法更上面一样</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">var</span> func3 = foo(<span class="number">0</span>).foo(<span class="number">1</span>); <span class="comment">//0，undefine,1,0  </span></span><br><span class="line">     func3.foo(<span class="number">2</span>); <span class="comment">//2，1</span></span><br><span class="line">     func3.foo(<span class="number">3</span>); <span class="comment">//3，1</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211111151132.png"></p><ul><li><p>这题目可以分为三种写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;a——&gt;&#x27;</span> + a);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;b——&gt;&#x27;</span> + b);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> foo(c, a);</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func1 = foo(<span class="number">0</span>); <span class="comment">//0,undefined</span></span><br><span class="line">func1.foo(<span class="number">1</span>); <span class="comment">//1,0</span></span><br><span class="line">func1.foo(<span class="number">2</span>); <span class="comment">//2,0</span></span><br><span class="line">func1.foo(<span class="number">3</span>); <span class="comment">//3,0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//等同于：</span></span><br><span class="line"><span class="comment">//foo(0).foo(1)</span></span><br><span class="line"><span class="comment">//foo(0).foo(2)</span></span><br><span class="line"><span class="comment">//foo(0).foo(3)</span></span><br></pre></td></tr></table></figure></li></ul><p><code>var func1 = foo(0)</code>：这段代码传入了一个参数为0，那么这里a就是0，b为undefined，输出0，undefined，这一点不难理解。</p><p><code>func1.foo(1)</code>foo函数返回了一个对象，这个对象的属性又是一个函数，这个函数返回foo函数，这里千万不能被绕晕了，这段代码给了一个1的数字，其实就是传给了变量c，调用foo函数，传入的c就是给了a，这里a就输出了1，再回来看foo对象里面的函数里面的a，它会往外找，这是JS的作用域链，我们闭包的变量是存放在内存中不会被回收的，所以这里的a就是上面的0</p><p><code>func1.foo(2)</code>和<code>func1.foo(3)</code>同样的，都是调用了对象传入参数，c对应a，a对应b，c是我们传入的2、3，那么a就是闭包记住的0。</p><p>回到最初的题目，看下是不是一样的</p><ul><li>第二种写法初看会觉得很懵，但是仔细推敲，其实不难。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;a——&gt;&#x27;</span> + a);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;b——&gt;&#x27;</span> + b);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> foo(c, a);</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="keyword">var</span> func2 = foo(<span class="number">0</span>).foo(<span class="number">1</span>).foo(<span class="number">2</span>).foo(<span class="number">3</span>); <span class="comment">//0,undefined,1,0,2,1,3,2</span></span><br></pre></td></tr></table></figure><p>首先<code>foo(0)</code>是在调用函数，之后则是调用对象里面的方法，调用函数，最先输出0和undefined，记住此时a是0</p><p>接下来<code>foo(1)</code>是在调用对象的属性函数，c是传入给a，输出a等于1，那么a往外找就是0，输出1和0，记住此时a是1</p><p><code>foo(2)</code>也在调用对象的属性函数，c传给a，输出a等于2，a往外找是1，输出的是2和1，记住此时a是2</p><p><code>foo(3)</code>同理，输出3和2，因为2是刚才的a。</p><p>看到这里，不免有些困惑，那刚才的a怎么就没记住，其实记住了，那就是0如果没懂，第三种写法你就会看出什么了。</p><ul><li>第三种则是前两种的结合。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">undefined</span>，<span class="number">1</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;a——&gt;&#x27;</span> + a);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;b——&gt;&#x27;</span> + b);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> foo(c, a);</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="keyword">var</span> func3 = foo(<span class="number">0</span>).foo(<span class="number">1</span>); <span class="comment">//0，undefined、1、0</span></span><br><span class="line">func3.foo(<span class="number">2</span>); <span class="comment">//2，1</span></span><br><span class="line">func3.foo(<span class="number">3</span>); <span class="comment">//3，1</span></span><br></pre></td></tr></table></figure><ul><li><code>var func3 = foo(0).foo(1)</code>输出的确实是0，undefined、1、0，调用函数时：undefined，1，这里a = 0、b=undefined、调用对象时：a=1，b=0，记住这里的a时被记住的，也就是后面的a输出为啥是1；</li><li><code>func3.foo(2)</code>输出的是2、1，c等于a输出2，这个没问题，那这个a会往外找，而此时a是1，所以是2和1。</li><li><code>func3.foo(3)</code>是一样的，a记住的是1，输出3和1</li></ul><p>至此回头看原题，答案一目了然！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;近段时间看了许多JS基础的面试题，特此记录一下，本文主要通过例子和分析的形式记录。&lt;/p&gt;</summary>
    
    
    
    <category term="面试题" scheme="https://www.frontblog.top/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="面试题" scheme="https://www.frontblog.top/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript基础知识总结</title>
    <link href="https://www.frontblog.top/article/f32bf739.html"/>
    <id>https://www.frontblog.top/article/f32bf739.html</id>
    <published>2021-11-10T09:45:55.000Z</published>
    <updated>2021-11-12T04:27:28.343Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要总结近段时间以来的JavaScript的基础知识。</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>JS在ES5中使用var定义变量，在ES6中新增了let和const。</p><p>var的变量可以是任何数据类型，这点是区别Java或者C等强类型语言的。</p><p>使用var变量会存在变量声明提升问题，变量的提升会提升到当前的作用域，只提升变量不会提升值。</p><p>需要注意的是，除了函数和函数参数属于局部变量，使用var定义的变量都属于全局变量。</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p><strong>Number类型：</strong></p><p>在JS中，所有的数字都属于Number类型，科学计数法也属于，<strong>数字类型中一个特别的值：NaN，它是一个不自等的值</strong></p><p><strong>String类型：</strong></p><p>字符串是使用引号包裹的一串字符。</p><p>常用的7个方法：</p><ul><li>charAt(a)：返回指定位置的字符，位置从0开始</li><li>substring(a,b)：返回<strong>a开始到b结束，不包括b</strong>的子串 ，<strong>b不写则会一直截取到结束，不接受负的参数</strong>，自动调换位置。从小到大的形式</li><li>substr(a,b)：返回<strong>从a开始，b作为长度的子串，如果b省略，则会一直选择到字符串结尾</strong>，a还可以是负数，表示倒数，<strong>b不可以是负数</strong>，<strong>倒数后是往后边选的</strong></li><li>slice(a,b)：返回<strong>从a开始，b结束（不包括b）的子串，a，b可以是负数，表示倒数第几位，a必须小于b</strong>，<strong>不会自动调换位置</strong></li><li>toUpperCase()：返回字符串的小写形式</li><li>toLowerCase()：返回字符串大写形式</li><li>indexOf()：返回字符串首次出现位置，没有返回-1</li></ul><p><strong>Boolean类型:</strong></p><p>表示真假的数据类型，布尔类型值只有<code>true</code>和<code>false</code>，在判断条件中，除了以下六种情况都为真</p><p>1、undefined（未定义，找不到值时出现）</p><p>2、null（代表空值）</p><p>3、false（布尔值的false，字符串”false”布尔值为true）</p><p>4、0（数字0，字符串”0”布尔值为true）</p><p>5、<code>NaN</code>（无法计算结果时出现，表示”非数值”；但是typeof NaN===”number”）</p><p>6、””（双引号）或’’（单引号） （<strong>空字符串，中间有空格时也是true</strong>）</p><p><strong>Undefine类型：</strong></p><p>变量的默认值，它既是类型也是值，它的类型只有一个值，就是它本身，在变量声明中，提升的默认就是undefined</p><p><strong>Null类型:</strong></p><p>null表示’空‘，它是空对象</p><p><strong>数据类型检测：</strong></p><p>使用typeof可以对数据类型检测。</p><p><strong>如何判断变量值为NaN?</strong></p><p>使用isNaN传入变量值，会返回布尔值，但是因为其原理还是使用Number函数</p><p><strong>类型转换：</strong></p><ul><li><p>其他数-&gt;数字：使用Number函数，除了使用Number函数，还可以使用<code>parseInt</code>函数，将字符串转为整数，还可以使用<code>parseFloat</code>函数，<code>parseFloat</code>函数是将字符串转为浮点数，<code>parseInt</code>和<code>parseFloat</code>去**对布尔、null和undefined类型转换会变成<code>NaN</code>**，因为会被隐式转换为字符串，字符串转数字得到结果就是<code>NaN</code></p></li><li><p>其他数-&gt;字符串：使用String函数，还可以使用使用toString()方法</p></li><li><p>其他数-&gt;布尔值：使用Boolean函数</p></li></ul><p><strong>包装对象：</strong></p><p><strong>存取</strong>字符串、数字或布尔值的属性时，<strong>创建的临时对象</strong>称为包装对象，null和undefined没有包装对象，尝试使用“.”访问它们的属性会报错。</p><h1 id="表达式和运算符"><a href="#表达式和运算符" class="headerlink" title="表达式和运算符"></a>表达式和运算符</h1><p><strong>运算符</strong>：也叫操作符，是一种符号。通过运算符可以对一个或多个值进行运算，并获取运算结果。</p><p><strong>表达式</strong>：由数字、运算符、变量的组合（组成的式子）。</p><p>运算符主要分为：</p><p>算术运算符:+、-、*、/、%</p><p>关系运算符:&gt;、&lt;、&gt;=、&lt;=、==、!=、===、!==</p><p>逻辑运算符：！、&amp;&amp;、||</p><p>赋值运算符：=、+=、-=、*=、/=、%=、++、–</p><p>优先级：非运算-&gt;数学运算-&gt;关系运算-&gt;逻辑运算</p><p>隐式转换：如果参与数学运算符的某操作数不是数字类型，那么JavaScript会自动将操作数转换为数字型，本质是内部调用Number函数。如果是加号，其中有字符串，那么就不是进行计算而是进行拼接</p><p>IEEE754：小数结算可能会出现不准，使用tofix()保留小数点后几位</p><h1 id="逻辑判断和循环语句"><a href="#逻辑判断和循环语句" class="headerlink" title="逻辑判断和循环语句"></a>逻辑判断和循环语句</h1><p>if语句：if语句是最简单的条件语句，也称选择语句，它通常结合else一起使用，表示如果..就…否则…，if…else…一定会选择一条语句执行</p><p>if…elseif…语句：else if()条件分支“暗含”了不符合之前所有条件。</p><p>switch语句:在switch中圆括号中一般是一个变量命，这个变量被分类讨论，case表示“情况”，它后面没有圆括号，直接跟一个值，程序会依次将case后面的值与switch中圆括号的值<strong>全等比对</strong></p><p>三元运算符：条件表达式？表达式1：表达式2，表达式为真则执行表达式1，否则执行表达式2</p><p>for语句：适合一些规定范围</p><p>while语句：适合不定范围</p><p>do…while语句:至少会执行一次</p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>定义数组的三种方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ary = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)<span class="comment">//这样写有个缺点,既我想输入一个数字，其实只是去定义长度</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">4</span>)<span class="comment">//定义数组长度为4，值为undefined</span></span><br></pre></td></tr></table></figure><p>数组方法：</p><p>push()方法：在数组尾部插入新项：参数就是要插入的项，如果要插入多项，可以用逗号隔开，使用push()方法后，数组会立即改变</p><p>pop()方法：在数组尾部删除一项：没有参数，只能删除一项,返回的值是被删除的项。</p><p>unshift()方法:在数组头部插入新项：参数就是要插入的项，如果要插入多项，可以用逗号隔开，使用unshift()方法后，数组会立即改变</p><p>shift()方法:在数组头部删除一项：没有参数，只能删除一项</p><p><strong>splice()方法</strong>：可以对数组的<strong>增删改</strong>，它的本质就是去改变数组，参数第一和第二位必须是整数。</p><p>slice()方法:用来得到子数组，类似于字符串的slice方法，会返回<strong>从a下标开始，b下标结束（不包括b下标）的子串，a,b可以是负数，a，b必须是同时都是负数，否则得到空数组，表示倒数第几位数组项，a必须小于b，不会改变数组</strong></p><p>join()方法：使数组转为字符串，<strong>参数表示以什么字符作为连接符，如果留空则默认以逗号分隔</strong></p><p>split()方法:使字符串转为数组，参数表示以什么字符拆分字符串，一般不留空，只留空字符</p><p>concat()方法：合并多个数组。不会改变原数组</p><p>reverse()方法：将数组的全部项顺序置反，立即更改原来数组</p><p>indexof()方法:搜索数组中的元素，并返回该元素首次出现的下标，如果元素不存在，返回-1，参数是和数组的项是全等关系</p><p>includes()方法：判断数组中是否存在一个指定的值，返回的是布尔值，参数也是和数组项时全等关系。</p><p>二维数组：数组中的数组。</p><h1 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h1><p>这里需要知道基本数据类型和引用数据类型：</p><p>基本数据类型:会存放在一个内存地址中，我们把变量赋值给另外一个，则相当于开辟了新空间，这两个变量是不会影响的</p><p>引用数据类型：会存放在一块内存地址中，我们把一个对象或者数组赋值给另外一个变量，指向的内存地址是一样的，这就好比两个人住一个房间，其中一个对其修改，那么另外一个也受其影响。</p><p>浅拷贝：浅克隆是指只克隆数组第一层，如果是多为数组，或者数组中的项是其他引用数据类型，则不克隆其他层</p><p>深拷贝：通过递归方式进行深克隆：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var arr = [[1,2,3],[3,4,5]];</span><br><span class="line">function deepclone(arr)&#123;</span><br><span class="line">    var result = [];</span><br><span class="line">    for(var i = 0;i&lt;arr.lenght;i++)&#123;</span><br><span class="line">        if(Array.isArray(arr[i]))&#123;</span><br><span class="line">            //递归</span><br><span class="line">            result.push(deepclone(arr[i]))</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            result.push(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line">var arr2 = deepclone(arr)</span><br><span class="line">console.log(arr2)</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数就像一个工厂，通过传入参数，最终计算过后的结果。</p><p>函数也存在声明提升现象，并且优先于变量提升，函数提升可以调用一个后声明的函数，而不会引发错误，但是如果赋值给一个变量，则是变量声明提升规则，函数不会被提升。</p><p>立即执行函数：定义函数后立即被执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;立即执行函数&#x27;</span>)</span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure><p>闭包：函数和函数自身能访问到的变量;记忆性、私有变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">1</span>;</span><br><span class="line">    add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; n++ &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(n)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = fun()</span><br><span class="line">f()<span class="comment">//1</span></span><br><span class="line">add()</span><br><span class="line">f()<span class="comment">//2</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>JS的基础部分知识和其他语言基本相似，但是需要特别注意变量的声明提升，作用域链，JS中比较难的知识点：闭包、递归；比较杂多的知识点：数组方法。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要总结近段时间以来的JavaScript的基础知识。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="总结" scheme="https://www.frontblog.top/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的全局变量和局部变量</title>
    <link href="https://www.frontblog.top/article/998c8364.html"/>
    <id>https://www.frontblog.top/article/998c8364.html</id>
    <published>2021-11-09T08:13:24.000Z</published>
    <updated>2021-11-11T02:45:51.322Z</updated>
    
    <content type="html"><![CDATA[<p>本文意在通过例子的方式总结全局变量和局部变量的区别。</p><h1 id="例子一"><a href="#例子一" class="headerlink" title="例子一"></a>例子一</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)<span class="comment">//1，2，3，4，5，6，7，8，9</span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">window</span>.i)<span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>实际上JS编译时这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)<span class="comment">//1，2，3，4，5，6，7，8，9</span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">window</span>.i)<span class="comment">//10</span></span><br></pre></td></tr></table></figure><ul><li>能通过window调用，说明时全局的变量，这里的i在js预解析阶段被提升到前面，在执行的时候再为其赋值，如果使用let，则不会被提升。</li></ul><h1 id="例子二"><a href="#例子二" class="headerlink" title="例子二"></a>例子二</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)<span class="comment">//15</span></span><br><span class="line">&#125;</span><br><span class="line">fun(<span class="number">15</span>)</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">window</span>.a)<span class="comment">//undefine</span></span><br></pre></td></tr></table></figure><ul><li>函数的参数属于局部变量，不能通过window调用</li></ul><h1 id="例子三-重点"><a href="#例子三-重点" class="headerlink" title="例子三(重点)"></a>例子三(重点)</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">    arr.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">2</span>]()<span class="comment">//5</span></span><br></pre></td></tr></table></figure><ul><li>这个例子中无论哪个下标执行都会输出5，因为，i属于全局变量，函数输出的值是全局的，如果先要输出不同值，就需要设置成局部的变量，有两种方法，一种使用立即执行函数，另外一种就是使用let,</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var arr = [];</span><br><span class="line">for(var i = 0;i&lt;5;i++)&#123;</span><br><span class="line">    arr.push((function(i)&#123;//形参i属于局部变量</span><br><span class="line">        console.log(i)</span><br><span class="line">    &#125;)(i))//实参</span><br><span class="line">&#125;</span><br><span class="line">arr[2]()//2</span><br></pre></td></tr></table></figure><ul><li>使用了IIFE的方式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var arr = [];</span><br><span class="line">for(let i = 0;i&lt;5;i++)&#123;</span><br><span class="line">    arr.push(function()&#123;</span><br><span class="line">        console.log(i)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">arr[2]()//2</span><br></pre></td></tr></table></figure><ul><li>let不会被提升，所以也就完整的保留再函数里面</li></ul><h1 id="例子三-一"><a href="#例子三-一" class="headerlink" title="例子三.一"></a>例子三.一</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = []</span><br><span class="line">    <span class="keyword">var</span> i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        num[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> num[<span class="number">9</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test()()</span><br></pre></td></tr></table></figure><ul><li>这题目和前面的差不多，num[9]输出都是10，因为匿名函数输出这个i是上层的i，而这个i是不断变化的，我们输出的i的最终值。</li><li>在循环中将函数赋给数组，却并没有执行，也就是程序并不知道函数内部是个啥。等执行的时候，i已经变成了10，数组每一项的运行结果都是10</li><li>很套路的题目。。</li></ul><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211110224238.png"></p><h1 id="例子四"><a href="#例子四" class="headerlink" title="例子四"></a>例子四</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a)<span class="comment">//5</span></span><br><span class="line">&#125;</span><br><span class="line">fun()</span><br><span class="line"> <span class="built_in">console</span>.log(a)<span class="comment">//10</span></span><br></pre></td></tr></table></figure><ul><li>这里第一眼可能就会觉得a++属于全局变量，其实不然，a++属于局部变量，因为后面的var a被提升了，所以js的理解时这样的：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    a++;<span class="comment">//NaN</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a)<span class="comment">//5</span></span><br><span class="line">&#125;</span><br><span class="line">fun()</span><br><span class="line"> <span class="built_in">console</span>.log(a)<span class="comment">//10</span></span><br></pre></td></tr></table></figure><ul><li>如果把函数的var a变成let a,那么就不会被提升，函数里面的a++就是全局变量</li></ul><h1 id="例子五"><a href="#例子五" class="headerlink" title="例子五"></a>例子五</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">&quot;global&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> name=<span class="string">&quot;local&quot;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br></pre></td></tr></table></figure><ul><li>  第一眼看感觉是local和global,因为会就近的找变量，其实不然，输出语句都是local，因为判断里面的var name被提升了，到执行阶段name赋值了local，而我们说过，除了函数内部和函数参数属于局部变量，其他都属于全局变量，所以local把global覆盖掉了，两次都是local</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文意在通过例子的方式总结全局变量和局部变量的区别。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript的闭包</title>
    <link href="https://www.frontblog.top/article/6341a1da.html"/>
    <id>https://www.frontblog.top/article/6341a1da.html</id>
    <published>2021-11-09T07:11:17.000Z</published>
    <updated>2021-11-10T13:50:33.867Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录闭包的基本概念</p><h1 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h1><p>关于闭包网上文章有许多说法，这里我的理解是这样：闭包是<strong>「函数」和「函数内部能访问到的变量」的总和，就是一个闭包。</strong>当我们写一个函数，那么函数里面的变量，作用域相关就已经确定了，你也可以这样理解：创建的函数都会创建闭包，因为这时候，它的环境是确定的，封闭的。但是我们写法通常是函数套函数，里面的函数返回外层函数的变量。</p><h1 id="闭包的记忆性"><a href="#闭包的记忆性" class="headerlink" title="闭包的记忆性"></a>闭包的记忆性</h1><p>当闭包产生时，函数所处环境的状态会始终保持在内存中，不会再外层函数调用后被自动清除，这就是闭包的记忆性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCheckTemp</span>(<span class="params">standardTemp</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkTemp</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= standardTemp) &#123;</span><br><span class="line">            alert(<span class="string">&#x27;你的体温正常&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            alert(<span class="string">&#x27;你的体温偏高&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> checkTemp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个checkTemp函数，它以37.1度为标准线</span></span><br><span class="line"><span class="keyword">var</span> checkTemp_A = createCheckTemp(<span class="number">37.1</span>);</span><br><span class="line"><span class="comment">// 再创建一个checkTemp函数，它以37.3度为标准线</span></span><br><span class="line"><span class="keyword">var</span> checkTemp_B = createCheckTemp(<span class="number">37.3</span>);</span><br><span class="line"></span><br><span class="line">checkTemp_A(<span class="number">37.2</span>);</span><br><span class="line">checkTemp_A(<span class="number">37.0</span>);</span><br><span class="line">checkTemp_B(<span class="number">37.2</span>);</span><br><span class="line">checkTemp_B(<span class="number">37.0</span>);</span><br></pre></td></tr></table></figure><h1 id="闭包模拟私有变量"><a href="#闭包模拟私有变量" class="headerlink" title="闭包模拟私有变量"></a>闭包模拟私有变量</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装一个函数，这个函数的功能就是私有化变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个局部变量a</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">getA</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">add</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            a++;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">pow</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            a *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = fun();</span><br><span class="line"><span class="comment">// 如果想在fun函数外面使用变量a，唯一的方法就是调用getA()方法</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.getA());</span><br><span class="line"><span class="comment">// 想让变量a进行加1操作</span></span><br><span class="line">obj.add();</span><br><span class="line">obj.add();</span><br><span class="line">obj.add();</span><br><span class="line"><span class="built_in">console</span>.log(obj.getA());</span><br><span class="line">obj.pow();</span><br><span class="line"><span class="built_in">console</span>.log(obj.getA());</span><br></pre></td></tr></table></figure><h1 id="一些例子"><a href="#一些例子" class="headerlink" title="一些例子"></a>一些例子</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    add = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        a++;</span><br><span class="line">    &#125;</span><br><span class="line">    f2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fun()())</span><br><span class="line">add()</span><br><span class="line"><span class="built_in">console</span>.log(fun()())</span><br></pre></td></tr></table></figure><ul><li>以上代码可能会觉得输出1和2，因为中间自增1，闭包具有记忆性，其实这是错误的，正确的是输出都是1，原因在于fun返回的函数被执行掉了，也就销毁了，add虽然自增了，但是重新调用就被覆盖了，所以两次都是1。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    add = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        a++;</span><br><span class="line">    &#125;</span><br><span class="line">    f2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> funa = fun()</span><br><span class="line"><span class="built_in">console</span>.log(funa())</span><br><span class="line">add()</span><br><span class="line"><span class="built_in">console</span>.log(funa())</span><br></pre></td></tr></table></figure><ul><li>这段代码才是输出1和2，原因是fun函数里面的函数被赋值给了一个全局变量，这个变量不知道什么时候被引用，所以就一直存在于内存中。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;xiuyan&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&#x27;BigBear&#x27;</span>;</span><br><span class="line">    showName();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changeName();</span><br></pre></td></tr></table></figure><ul><li>在 showName 函数的函数作用域内查找是否有局部变量 name</li><li>发现没找到，于是根据<strong>书写的位置</strong>，查找上层作用域（全局作用域），找到了 name 的值是 xiuyan，所以结果会打印 xiuyan。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录闭包的基本概念&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="闭包" scheme="https://www.frontblog.top/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
</feed>
