<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大前端_LSF</title>
  
  <subtitle>斯是陋室，为吾德馨</subtitle>
  <link href="https://www.frontblog.top/atom.xml" rel="self"/>
  
  <link href="https://www.frontblog.top/"/>
  <updated>2021-12-05T13:29:45.056Z</updated>
  <id>https://www.frontblog.top/</id>
  
  <author>
    <name>const name=&quot;LSF&quot;</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTML5总结</title>
    <link href="https://www.frontblog.top/article/6555244d.html"/>
    <id>https://www.frontblog.top/article/6555244d.html</id>
    <published>2021-12-05T12:11:36.000Z</published>
    <updated>2021-12-05T13:29:45.056Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要用来总结HTML5相关知识。</p><h1 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h1><p>HTML 不是一门编程语言，而是一种用于定义内容结构的<em>标记语言</em>。你可以使用其完成网页开发，HTML运行在浏览器，由浏览器解析。</p><h1 id="W3C标准"><a href="#W3C标准" class="headerlink" title="W3C标准"></a>W3C标准</h1><p><code>W3C</code>指万维网联盟（World Wide Web Consortium）， <code>W3C</code>组织是对网络标准制定的一个非赢利组织，像HTML、XHTML、CSS、XML的标准就是由<code>W3C</code>来定制。</p><p>应该遵循的一些标准：</p><ul><li>DTD:文档类型声明。</li><li>标签需要闭合。</li><li>定义语言编码：meta-&gt;charset-&gt;utf-8、GBK</li><li>定义Script标签类型</li><li>CSS定义：使用style type=”text/css”</li><li>所有标签的元素和属性的名字都必须使用小写</li></ul><h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><p>HTML的结构首先是DTD文档类型声明，这是告诉浏览器执行哪个版本的HTML</p><p>这是在HTML5声明的文档：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来就是html标签，它是网页的根节点，也就是所有的html标签都包括在里面。再然后就是head标签，里面包裹大都是配置项：title,网页标题，meta，定义关于 HTML 文档的元信息；之后就是body，也就是网页的主体内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">            Hello,World</span><br><span class="line">        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="语义化"><a href="#语义化" class="headerlink" title="语义化"></a>语义化</h1><p>HTML主要是在结构上的呈现，好的语义化有利于维护开发，也有利于搜索引擎的爬取，保持页面结构清晰，标题整洁，不要发生标题级别跳跃，</p><h1 id="新增的特性"><a href="#新增的特性" class="headerlink" title="新增的特性"></a>新增的特性</h1><p>video、auio</p><h1 id="标签元素"><a href="#标签元素" class="headerlink" title="标签元素"></a>标签元素</h1><h2 id="根元素："><a href="#根元素：" class="headerlink" title="根元素："></a>根元素：</h2><table><thead><tr><th align="center">元素</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td></tr></tbody></table><h1 id="标签属性"><a href="#标签属性" class="headerlink" title="标签属性"></a>标签属性</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要用来总结HTML5相关知识。&lt;/p&gt;</summary>
    
    
    
    
    <category term="总结" scheme="https://www.frontblog.top/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>flex布局</title>
    <link href="https://www.frontblog.top/article/e43580c1.html"/>
    <id>https://www.frontblog.top/article/e43580c1.html</id>
    <published>2021-12-01T02:37:00.000Z</published>
    <updated>2021-12-05T02:24:08.395Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录flex相关知识。</p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>flex是一种弹性布局，在父盒子设置flex称为flex容器，里面的子元素称为flex项，主要分为容器属性和项目属性。</p><h1 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h1><ul><li><h2 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h2></li></ul><p>属性值：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">box &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>row：默认主轴（靠左）</li><li>row-reverse：主轴倒序（靠右）</li><li>column：纵向</li><li>column-reverse:纵向倒序</li></ol><ul><li><h2 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h2></li></ul><p>属性值：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">box &#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>no-wrap：不换行（默认,会压缩）</li><li>wrap：换行</li><li>wrap-reverse:换行，相反换行，顺序没有换。</li></ol><ul><li><h2 id="flex-flow-flex-direction和flex-wrap的组合"><a href="#flex-flow-flex-direction和flex-wrap的组合" class="headerlink" title="flex-flow (flex-direction和flex-wrap的组合)"></a>flex-flow (flex-direction和flex-wrap的组合)</h2></li></ul><p>属性值：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">box &#123;</span><br><span class="line">  <span class="attribute">flex-flow</span>: row nowarp | row-reverse nowarp |</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>row nowarp (默认)</li><li>row wrap</li><li>row  wrap-reverse</li><li>row-reverse nowarp </li><li>row-reverse </li><li>row-reverse</li><li>column</li><li>column</li><li>column</li><li>column-reverse</li><li>column-reverse</li><li>column-reverse</li></ol><ul><li><h2 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h2></li></ul><p>属性值：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">box &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>flex-start：主轴开始（左对齐）</li><li>flex-end：主轴结束（右对齐）</li><li>center：居中对齐</li><li>space-between：两端对齐(两端)</li><li>space-around：两侧对齐（项目两侧是相等间隔）</li></ol><ul><li><h2 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h2></li></ul><p>属性值：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">box &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>stretch:默认值（在项目没有设置高度的情况，会占满高度）</li><li>flex-start：纵轴开始</li></ol><ul><li><h2 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h2></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录flex相关知识。&lt;/p&gt;</summary>
    
    
    
    <category term="CSS" scheme="https://www.frontblog.top/categories/CSS/"/>
    
    
    <category term="flex" scheme="https://www.frontblog.top/tags/flex/"/>
    
  </entry>
  
  <entry>
    <title>ES6的Promise</title>
    <link href="https://www.frontblog.top/article/b0c5fd63.html"/>
    <id>https://www.frontblog.top/article/b0c5fd63.html</id>
    <published>2021-11-29T09:57:32.000Z</published>
    <updated>2021-11-30T03:17:52.832Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录ES6中的Promise对象。</p><h1 id="Promise解决的问题"><a href="#Promise解决的问题" class="headerlink" title="Promise解决的问题"></a>Promise解决的问题</h1><p>Promise一般用来解决了传统开发中回调函数层层调用的问题，也是异步编程的一种方案。</p><p>下面是一个回调地狱的例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-id">#box</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: red;</span><br><span class="line">      <span class="attribute">transition</span>: all <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// el-&gt;Element;x,y-&gt;横轴纵轴;end-&gt;回调函数</span></span><br><span class="line"><span class="keyword">const</span> move = <span class="function">(<span class="params">el, &#123; x = <span class="number">0</span>, y = <span class="number">0</span> &#125; = &#123;&#125;, end = () =&gt; &#123; &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  el.style.transform = <span class="string">`translate3d(<span class="subst">$&#123;x&#125;</span>px,<span class="subst">$&#123;y&#125;</span>px,0)`</span>;</span><br><span class="line">  el.addEventListener(<span class="string">&#x27;transitionend&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    end()</span><br><span class="line">  &#125;,</span><br><span class="line">    <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>)</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  move(box, &#123; <span class="attr">x</span>: <span class="number">150</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    move(box, &#123; <span class="attr">x</span>: <span class="number">150</span>, <span class="attr">y</span>: <span class="number">150</span> &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      move(box, &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">150</span> &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        move(box, &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>上面是一个盒子移动的例子，当移动某个位置后再进行下一步的操作，这里就出现层层嵌套的问题，如果需要改变某一个运动轨迹，就需要改动很多代码。</p><h1 id="Promise含义"><a href="#Promise含义" class="headerlink" title="Promise含义"></a>Promise含义</h1><p>Promise简单说就是一个容器，在里面书写异步操作，当这个异步成功，或者失败，返回结果。</p><p>两个特点：</p><ul><li>对象不受外界影响。Promise有三种状态，分别是：Pending(进行中)、Fulfilled(成功)、Rejected(失败)，只有异步操作才能影响是哪一种状态。</li><li>状态之间是不可逆的，只有Pending到Fulfilled，或者是Pending到Rejected。</li></ul><p>存在的缺点：</p><ul><li>无法取消Promise，一旦新建就会立即执行Promise</li><li>不设置回调函数，Promise内部的错误不会反应到外部。</li><li>当处于Pending状态时，无法得知是在哪个阶段。</li></ul><h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><p>一般使用的格式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> promise(<span class="function">(<span class="params">resolved,rejected</span>)=&gt;</span>&#123;</span><br><span class="line">    resolved(<span class="string">&#x27;succen&#x27;</span>)</span><br><span class="line">    rejected(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">p.then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Promise解决回调地狱问题"><a href="#Promise解决回调地狱问题" class="headerlink" title="Promise解决回调地狱问题"></a>Promise解决回调地狱问题</h1><h1 id="then方法"><a href="#then方法" class="headerlink" title="then方法"></a>then方法</h1><h1 id="catch方法"><a href="#catch方法" class="headerlink" title="catch方法"></a>catch方法</h1><h1 id="all方法"><a href="#all方法" class="headerlink" title="all方法"></a>all方法</h1><h1 id="race方法"><a href="#race方法" class="headerlink" title="race方法"></a>race方法</h1><h1 id="resolve方法"><a href="#resolve方法" class="headerlink" title="resolve方法"></a>resolve方法</h1><h1 id="reject方法"><a href="#reject方法" class="headerlink" title="reject方法"></a>reject方法</h1><h1 id="done方法"><a href="#done方法" class="headerlink" title="done方法"></a>done方法</h1><h1 id="finally方法"><a href="#finally方法" class="headerlink" title="finally方法"></a>finally方法</h1><h1 id="手写Promise"><a href="#手写Promise" class="headerlink" title="手写Promise"></a>手写Promise</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录ES6中的Promise对象。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="Promise" scheme="https://www.frontblog.top/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>mongodb备份和恢复</title>
    <link href="https://www.frontblog.top/article/79550af1.html"/>
    <id>https://www.frontblog.top/article/79550af1.html</id>
    <published>2021-11-26T07:15:14.000Z</published>
    <updated>2021-11-26T07:34:02.825Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录docker安装方式下mongodb的备份和恢复</p><p>备份</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mongo-lsf mongodump -h localhost -u root -p 123456 -d testDb -o /tmp/test</span><br></pre></td></tr></table></figure><ul><li><code>docker exec -it</code>指的是进入容器</li><li><code>mongo-lsf</code>是自己的容器名称</li><li><code>mongodump</code>是数据库的命令</li><li><code>-h localhost</code>是连接到本地</li><li><code>-u root -p 123456</code>是用户名和密码</li><li><code>-d testDb</code>是指定哪个数据库，不加就是全部数据库</li><li><code>-o /tmp/test</code>是备份到哪个文件夹</li></ul><p>上面的命令后还没完，只是备份到容器里边，需要从容器拷贝出来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp mongodb-lsf:/tmp/test /home/db</span><br></pre></td></tr></table></figure><ul><li><code>docker cp mongodb-lsf:/tmp/test</code>是拷贝容器里面的文件</li></ul><p>恢复：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp /home/db mongodb-lsf:/tmp/test</span><br></pre></td></tr></table></figure><ul><li>把宿主机文件拷贝到容器。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mongo-lsf mongorestore -h localhost -u root -p 123456 --dir /home/db</span><br></pre></td></tr></table></figure><ul><li><code>--dir /home/db</code>指定恢复数据库的文件。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录docker安装方式下mongodb的备份和恢复&lt;/p&gt;</summary>
    
    
    
    
    <category term="mongodb" scheme="https://www.frontblog.top/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>Flyblog开源项目Node(四)</title>
    <link href="https://www.frontblog.top/article/11e4da3a.html"/>
    <id>https://www.frontblog.top/article/11e4da3a.html</id>
    <published>2021-11-22T03:56:27.000Z</published>
    <updated>2021-11-26T07:34:02.827Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录使用NodeMailer配置邮箱服务，感觉前面一点一点过程记录枯燥且没什么实际内容，以后还是记录怎么实现某个功能。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录使用NodeMailer配置邮箱服务，感觉前面一点一点过程记录枯燥且没什么实际内容，以后还是记录怎么实现某个功能。&lt;/p&gt;</summary>
    
    
    
    <category term="开源项目" scheme="https://www.frontblog.top/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>Flyblog开源项目Vue(三)</title>
    <link href="https://www.frontblog.top/article/e810feb9.html"/>
    <id>https://www.frontblog.top/article/e810feb9.html</id>
    <published>2021-11-21T03:18:28.000Z</published>
    <updated>2021-11-26T07:34:02.817Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录完成前端部分的过程，这篇完成的是登录、注册、忘记密码和验证码等逻辑交互功能，并且实现前端数据的错误验证。</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这里使用的是layui的fly社区作为模板，不是个人设计的静态页面，没错就这，因为规划原因，不可能从原型图-&gt;静态-&gt;逻辑交互-&gt;接口设计-&gt;后端实现-&gt;数据库设计等全部完成，项目还是扩宽自己的知识为主。关于Fly社区开源静态地址：<a href="https://github.com/layui/fly">https://github.com/layui/fly</a></p><h1 id="资源导入"><a href="#资源导入" class="headerlink" title="资源导入"></a>资源导入</h1><p>把res文件夹里里面的文件复制到assets文件夹。然后在App.vue导入样式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">@import &quot;assets/layui/css/layui.css&quot;;</span><br><span class="line">@import &quot;assets/css/global.css&quot;;</span><br><span class="line">@import &quot;assets/layui/css/modules/layer/default/layer.css&quot;;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="组件拆分"><a href="#组件拆分" class="headerlink" title="组件拆分"></a>组件拆分</h1><p>首先我们可以看到静态页面是一个上中下的结构，我们可以把header和footer拆分出来，作为一个组件，然后中间部分就是路由的跳转。</p><p>需要注意的点：</p><ul><li>Vue组件的name需要大写开头，否则控制有error。</li><li>footer是html标签，需要起别名。</li><li>页面的跳转： <code>&lt;router-link :to=&quot;&#123; name: &#39;reg&#39; &#125;&quot;&gt;注册&lt;/router-link&gt;</code>，to去哪里，name是路由里面设置的name</li><li>验证码使用<code>v-html</code></li></ul><h1 id="登录、注册和忘记密码"><a href="#登录、注册和忘记密码" class="headerlink" title="登录、注册和忘记密码"></a>登录、注册和忘记密码</h1><ul><li>这三组件大都差不多，都需要获取验证码和路由的相互跳转。</li></ul><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>router/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../views/Home.vue&#x27;</span></span><br><span class="line"><span class="comment">// 登录注册忘记密码组件</span></span><br><span class="line"><span class="keyword">const</span> Login = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/Login.vue&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Reg = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/Reg.vue&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Forget = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/Forget.vue&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// 首页</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: Home</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 登录</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: Login</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 注册</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/reg&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;reg&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: Reg</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 找回密码</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/forget&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;forget&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: Forget</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><ul><li>这里<code>const Login = () =&gt; import(&#39;../views/Login.vue&#39;)</code>是使用懒加载的形式。</li></ul><h1 id="vee-validate3-x"><a href="#vee-validate3-x" class="headerlink" title="vee-validate3.x"></a>vee-validate3.x</h1><p>我们一般的网站，在登录时候，都有一个先拦截用户错误的请求这么一个东西，就是让你输入邮箱，但是输入了一个电话，那么就会报错，这里呢，就使用vee-validate来实现，为什么？因为这个库，还可以在请求后端后，也就是验证密码错误后，在指定的输入框后面显示错误信息。</p><p>安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vee-validate --save</span><br></pre></td></tr></table></figure><p>封装使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; extend, localize &#125; <span class="keyword">from</span> <span class="string">&#x27;vee-validate&#x27;</span></span><br><span class="line"><span class="keyword">import</span> zh <span class="keyword">from</span> <span class="string">&#x27;vee-validate/dist/locale/zh_CN.json&#x27;</span></span><br><span class="line"><span class="comment">// eslint-disable-next-line</span></span><br><span class="line"><span class="keyword">import</span> &#123; confirmed, email, is_not, length, max, min, required &#125; <span class="keyword">from</span> <span class="string">&#x27;vee-validate/dist/rules&#x27;</span></span><br><span class="line"></span><br><span class="line">extend(<span class="string">&#x27;required&#x27;</span>, required)</span><br><span class="line">extend(<span class="string">&#x27;email&#x27;</span>, email)</span><br><span class="line">extend(<span class="string">&#x27;min&#x27;</span>, min)</span><br><span class="line">extend(<span class="string">&#x27;max&#x27;</span>, max)</span><br><span class="line">extend(<span class="string">&#x27;length&#x27;</span>, length)</span><br><span class="line">extend(<span class="string">&#x27;confirmed&#x27;</span>, confirmed)</span><br><span class="line">extend(<span class="string">&#x27;is_not&#x27;</span>, is_not)</span><br><span class="line"><span class="comment">// 自定义规则</span></span><br><span class="line">extend(<span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">validate</span>: <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> !(<span class="regexp">/^\d+/</span>).test(value)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&#x27;不能以纯数字为昵称&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">localize(<span class="string">&#x27;zh_CN&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">messages</span>: &#123;</span><br><span class="line">    ...zh.messages,</span><br><span class="line">    <span class="attr">required</span>: <span class="string">&#x27;请输入&#123;_field_&#125;&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">names</span>: &#123;</span><br><span class="line">    <span class="attr">email</span>: <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">    <span class="attr">code</span>: <span class="string">&#x27;验证码&#x27;</span>,</span><br><span class="line">    <span class="attr">vcode</span>: <span class="string">&#x27;邮箱验证码&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;昵称&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">    <span class="comment">// usernamecode: &#x27;邮箱验证码&#x27;,</span></span><br><span class="line">    <span class="attr">oldpassword</span>: <span class="string">&#x27;旧密码&#x27;</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;标题&#x27;</span>,</span><br><span class="line">    <span class="attr">catalog</span>: <span class="string">&#x27;分类&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">fields</span>: &#123;</span><br><span class="line">    <span class="attr">catalog</span>: &#123;</span><br><span class="line">      <span class="attr">is_not</span>: <span class="string">&#x27;请选择&#123;_field_&#125;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">password</span>: &#123;</span><br><span class="line">      <span class="attr">min</span>: <span class="function">(<span class="params">field, &#123; length &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`请输入至少<span class="subst">$&#123;length&#125;</span>位数`</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">confirmed</span>: <span class="function">(<span class="params">field, &#123; target &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`两次输入的<span class="subst">$&#123;field&#125;</span>不一致！`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">code</span>: &#123;</span><br><span class="line">      <span class="attr">length</span>: <span class="string">&#x27;请输入4位数的验证码&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>最后在main.js引入即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#x27;@/utils/veevalidate&#x27;</span><br></pre></td></tr></table></figure><h1 id="验证码联调（axios）"><a href="#验证码联调（axios）" class="headerlink" title="验证码联调（axios）"></a>验证码联调（axios）</h1><p>这里使用axios去请求后端api。（这里是最简单的使用方式，我当然不会说自己不会封装axios了！！）</p><p>安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i axios -S</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">&#x27;http://localhost:3000/getCaptch&#x27;</span>).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">    <span class="keyword">if</span>(res.status === <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> obj = res.data</span><br><span class="line">        <span class="keyword">if</span>(obj.code === <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.svg = obj.data</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录完成前端部分的过程，这篇完成的是登录、注册、忘记密码和验证码等逻辑交互功能，并且实现前端数据的错误验证。&lt;/p&gt;</summary>
    
    
    
    <category term="开源项目" scheme="https://www.frontblog.top/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>Flyblog开源项目Node(二)</title>
    <link href="https://www.frontblog.top/article/ec59dc47.html"/>
    <id>https://www.frontblog.top/article/ec59dc47.html</id>
    <published>2021-11-20T10:49:32.000Z</published>
    <updated>2021-11-21T03:16:34.378Z</updated>
    
    <content type="html"><![CDATA[<p>本文将使用Koa这个框架实现验证码功能，主要是为了实现前端的验证。关于我是如何学习Koa的，可以到这篇文章查看：<a href="https://www.frontblog.top/article/9bc0fcfe.html">koa入门</a></p><p>验证码实现</p><p>这里使用<code>svg-captcha</code></p><p>安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i svg-captcha -S</span><br></pre></td></tr></table></figure><p>相关接口文档：<a href="https://github.com/produck/svg-captcha/blob/HEAD/README_CN.md">https://github.com/produck/svg-captcha/blob/HEAD/README_CN.md</a></p><p>使用：</p><p><code>api/publicController</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> svgCaptcha <span class="keyword">from</span> <span class="string">&#x27;svg-captcha&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">publicController</span></span>&#123;</span><br><span class="line">  <span class="keyword">async</span> getCaptcha (ctx) &#123;</span><br><span class="line">   <span class="comment">// 定义svg验证码的格式</span></span><br><span class="line">  <span class="keyword">const</span> newCaptcha = svgCaptcha.create(&#123;</span><br><span class="line">      <span class="attr">size</span>: <span class="number">4</span>,</span><br><span class="line">      <span class="attr">ignoreChars</span>: <span class="string">&#x27;0Oo1il&#x27;</span>,</span><br><span class="line">      <span class="attr">color</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">noise</span>: <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">5</span>),</span><br><span class="line">      <span class="attr">width</span>: <span class="number">150</span>,</span><br><span class="line">      <span class="attr">height</span>: <span class="number">38</span></span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">//返回状态码和data</span></span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">msg</span>: newCaptcha,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> publicController()</span><br></pre></td></tr></table></figure><p><code>routes/publicRouter.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;koa-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> publicController <span class="keyword">from</span> <span class="string">&#x27;../api/publicController&#x27;</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router()</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/getCaptcha&#x27;</span>, publicController.getCaptcha)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p><code>routes/routes.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> combineRoutes <span class="keyword">from</span> <span class="string">&#x27;koa-combine-routers&#x27;</span></span><br><span class="line"><span class="keyword">import</span> publicRouter <span class="keyword">from</span> <span class="string">&#x27;./publicRouter&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> combineRoutes(publicRouter)</span><br></pre></td></tr></table></figure><p>这样，我们就完成了一个验证码，但是没有验证的功能，好吧，这里是需要redis去存放用户传递过来的k-v值，简单说，就是需要这个验证码存到resis数据库，然后做个比对，因为涉及到数据库，所以这里不详细说。（我当然不会说我不会redis了）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文将使用Koa这个框架实现验证码功能，主要是为了实现前端的验证。关于我是如何学习Koa的，可以到这篇文章查看：&lt;a href=&quot;https://www.frontblog.top/article/9bc0fcfe.html&quot;&gt;koa入门&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="开源项目" scheme="https://www.frontblog.top/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>Koa入门</title>
    <link href="https://www.frontblog.top/article/9bc0fcfe.html"/>
    <id>https://www.frontblog.top/article/9bc0fcfe.html</id>
    <published>2021-11-20T10:36:59.000Z</published>
    <updated>2021-11-21T02:01:55.302Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录关于使用Koa前的一些知识，意在记录如何使用Koa开发一个能基本使用的Web应用，不会太多介绍其框架的本身。内容大多数来自我以前的记录，在这里集合在一起并做整理，这个框架也是我使用在开源社区的Web框架。</p><h1 id="koa简介："><a href="#koa简介：" class="headerlink" title="koa简介："></a>koa简介：</h1><blockquote><p>Koa 是一个新的 web 框架，由 Express 幕后的原班人马打造， 致力于成为 web 应用和 API 开发领域中的一个更小、更富有表现力、更健壮的基石。 通过利用 async 函数，Koa 帮你丢弃回调函数，并有力地增强错误处理。 Koa 并没有捆绑任何中间件， 而是提供了一套优雅的方法，帮助您快速而愉快地编写服务端应用程序。</p></blockquote><p>这是中文网上的一段话，Koa是一个非常轻量的框架，没有集成任何中间件，框架本身主要实现http的协议处理，koa支持acync/await写法，使用同步的写法实现异步的方法</p><p>官网：<a href="https://koajs.com/">https://koajs.com/</a></p><p><strong>使用方式：</strong></p><ul><li><p>新建一个文件夹，使用<code>npm init -y</code>初始化项目</p></li><li><p>使用<code>npm i koa -S</code>，安装Koa</p></li><li><p>新建<code>index.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);<span class="comment">//引入Koa这个包，</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();<span class="comment">//实例化这个对象</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 启动应用程序  参数：端口号</span></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure></li><li><p>控制台输入node index.js运行，打开浏览器输入<a href="http://localhost:3000/">http://localhost:3000</a> ,可以看到Hello World，这样我们就完成了第一个koa的应用。</p></li></ul><h1 id="核心概念："><a href="#核心概念：" class="headerlink" title="核心概念："></a>核心概念：</h1><ul><li>Koa Application（应用程序）</li><li>Context（上下文）</li><li>Request（请求）、Response(响应)</li></ul><p>在上面一篇中介绍了<code>Koa</code>的基本概念，这篇具体介绍<code>Request</code>属性，路由以及<code>app.use</code>的引用</p><h1 id="Request属性"><a href="#Request属性" class="headerlink" title="Request属性"></a>Request属性</h1><p>首先我们来看下以下的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ctx);</span><br><span class="line">  ctx.body = <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>控制台输入可能会出现以下内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  request: &#123;</span><br><span class="line">    method: &#x27;GET&#x27;,</span><br><span class="line">    url: &#x27;/&#x27;,</span><br><span class="line">    header: &#123;</span><br><span class="line">      host: &#x27;localhost:<span class="number">3000</span>&#x27;,</span><br><span class="line">      connection: &#x27;keep-alive&#x27;,</span><br><span class="line">      &#x27;sec-ch-ua&#x27;: &#x27;<span class="string">&quot; Not;A Brand&quot;</span>;v=<span class="string">&quot;99&quot;</span>, <span class="attr">&quot;Google Chrome&quot;</span>;v=<span class="attr">&quot;91&quot;</span>, <span class="attr">&quot;Chromium&quot;</span>;v=<span class="attr">&quot;91&quot;</span>&#x27;,</span><br><span class="line">      &#x27;sec-ch-ua-mobile&#x27;: &#x27;?<span class="number">0</span>&#x27;,</span><br><span class="line">      &#x27;upgrade-insecure-requests&#x27;: &#x27;<span class="number">1</span>&#x27;,</span><br><span class="line">      &#x27;user-agent&#x27;: &#x27;Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36&#x27;,</span><br><span class="line">      accept: &#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*<span class="comment">/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;,</span></span><br><span class="line"><span class="comment">      &#x27;sec-fetch-site&#x27;: &#x27;none&#x27;,</span></span><br><span class="line"><span class="comment">      &#x27;sec-fetch-mode&#x27;: &#x27;navigate&#x27;,</span></span><br><span class="line"><span class="comment">      &#x27;sec-fetch-user&#x27;: &#x27;?1&#x27;,</span></span><br><span class="line"><span class="comment">      &#x27;sec-fetch-dest&#x27;: &#x27;document&#x27;,</span></span><br><span class="line"><span class="comment">      &#x27;accept-encoding&#x27;: &#x27;gzip, deflate, br&#x27;,</span></span><br><span class="line"><span class="comment">      &#x27;accept-language&#x27;: &#x27;zh-CN,zh;q=0.9&#x27;,</span></span><br><span class="line"><span class="comment">      cookie: &#x27;discount_free_trigger=true; vipPromorunningtmr=; isvipretainend=; freePromorunningtmr=1320000&#x27;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  &#125;,</span></span><br><span class="line"><span class="comment">  response: &#123;</span></span><br><span class="line"><span class="comment">    status: 404,</span></span><br><span class="line"><span class="comment">    message: &#x27;Not Found&#x27;,</span></span><br><span class="line"><span class="comment">    header: [Object: null prototype] &#123;&#125;</span></span><br><span class="line"><span class="comment">  &#125;,</span></span><br><span class="line"><span class="comment">  app: &#123; subdomainOffset: 2, proxy: false, env: &#x27;development&#x27; &#125;,</span></span><br><span class="line"><span class="comment">  originalUrl: &#x27;/&#x27;,</span></span><br><span class="line"><span class="comment">  req: &#x27;&lt;original node req&gt;&#x27;,</span></span><br><span class="line"><span class="comment">  res: &#x27;&lt;original node res&gt;&#x27;,</span></span><br><span class="line"><span class="comment">  socket: &#x27;&lt;original node socket&gt;&#x27;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><p>很明显看到了<code>request</code>、<code>response</code>等对象内容，说明ctx包含了这些对象，这样我们就可以通过ctx.request拿到前端传过来的数据。</p><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>我们知道一个web应用应该有不同的api，对应着不同的方法，而koa本身是没有实现的，所以在这里就需要用到一个中间件，<code>koa-router</code>，接下来让我们来使用这个中间件。</p><p>使用<code>npm i koa-router -S</code>进行安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>,<span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ctx);</span><br><span class="line">  ctx.body = <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="string">&#x27;/api&#x27;</span>,<span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ctx);</span><br><span class="line">  ctx.body = <span class="string">&#x27;Hello api&#x27;</span>;</span><br><span class="line">&#125;)</span><br><span class="line">app.use(router.routes()).use(router.allowedMethods())</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><ul><li><p>这里引入了<code>koa-router</code>并且实例化。</p></li><li><p>创建两个路由，根目录访问后得到Hello World，访问api后得到Hello api。</p></li><li><p>最后使用use把中间件挂载在koa这个应用上来，也就是使用这个中间件。</p></li><li><p>使用 <code>koa-router</code>这个中间件就解决了koa路由的问题，不同的api对应这不同的方法</p></li></ul><blockquote><p>TIP：使用<code>router.prefix</code>可以为路由设置前缀，前提是这个必须放在子路由的前面</p></blockquote><h1 id="中间件的处理流程"><a href="#中间件的处理流程" class="headerlink" title="中间件的处理流程"></a>中间件的处理流程</h1><p>在上面的应用中，我们使用了<code>app.use</code>引用了中间件，那么什么是中间件？<code>app.use</code>又是在干嘛？</p><p><strong>中间件</strong></p><p>中间件其实就是一个个函数，通过<code>app.use()</code>注册；在 <code>koa</code> 中只会自动执行第一个中间件，后面的都需要我们自己调用，koa 在执行中间件的时候都会携带两个参数<code>context</code>(可简化为<code>ctx</code>)和<code>next</code>，<code>context</code>是 <code>Koa</code> 的上下文对象，<code>next</code>就是下一个中间件函数;</p><p>也就是洋葱模型；所谓洋葱模型，就是指每一个 <code>Koa</code> 中间件都是一层洋葱圈，它即可以掌管请求进入，也可以掌管响应返回。换句话说：外层的中间件可以影响内层的请求和响应阶段，内层的中间件只能影响外层的响应阶段。</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/yc.png"></p><p><strong><code>app.use</code>的顺序执行</strong></p><p>中间件的执行顺序按照 <code>app.use()</code>的顺序执行，中间件可以通过 await next()来执行下一个中间件，同时在最后一个中间件执行完成后，依然有恢复执行的能力。即，通过洋葱模型，await next()控制调用 “下游”中间件，直到 “下游”没有中间件且堆栈执行完毕，最终流回“上游”中间件。</p><p><strong>示例</strong></p><p>下面通过一段代码来解释koa中间件的执行流程</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`this is a middleware 1`</span>)</span><br><span class="line">  <span class="keyword">await</span> next()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`this is a middleware 1 end `</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`this is a middleware 2`</span>)</span><br><span class="line">  <span class="keyword">await</span> next()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`this is a middleware 2 end `</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`this is a middleware 3`</span>)</span><br><span class="line">  <span class="keyword">await</span> next()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`this is a middleware 3 end `</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>控制台输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">this is a middleware 1</span><br><span class="line">this is a middleware 2</span><br><span class="line">this is a middleware 3</span><br><span class="line">this is a middleware 3 end</span><br><span class="line">this is a middleware 2 end</span><br><span class="line">this is a middleware 1 end</span><br></pre></td></tr></table></figure><p>可以看出以下几点：</p><ul><li>Koa应用执行完第一个后 丢给了下一个中间件，执行所有中间件后又一层一层返回</li><li>next后面的内容会在执行完中间件后执行</li></ul><p>在来看一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> middleware1 = <span class="function"><span class="keyword">function</span> <span class="title">async</span> (<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;this is a middleware1&#x27;</span>);</span><br><span class="line">  next()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;this is a middleware1 end&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> middleware2 = <span class="function"><span class="keyword">function</span> <span class="title">async</span> (<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;this is a middleware2&#x27;</span>);</span><br><span class="line">  next()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;this is a middleware2 end&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> middleware3 = <span class="function"><span class="keyword">function</span> <span class="title">async</span> (<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;this is a middleware3&#x27;</span>);</span><br><span class="line">  next()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;this is a middleware3 end&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">app.use(middleware2)</span><br><span class="line">app.use(middleware1)</span><br><span class="line">app.use(middleware3)</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">this is a middleware2</span><br><span class="line">this is a middleware1</span><br><span class="line">this is a middleware3</span><br><span class="line">this is a middleware3 end</span><br><span class="line">this is a middleware1 end</span><br><span class="line">this is a middleware2 end</span><br></pre></td></tr></table></figure><p>可以看出以下几点：</p><ul><li>app.use<strong>影响了中间件的执行顺序</strong>，先引用先执行</li><li>next后面的数据是经过中间件处理后，从最后一个中间间开始执行，也就是先进后出的原理</li></ul><h1 id="Koa实现Restful接口"><a href="#Koa实现Restful接口" class="headerlink" title="Koa实现Restful接口"></a>Koa实现Restful接口</h1><p>在上面的两篇文章中，我们了解到Koa的使用方式和原理，接下来的将使用Koa开发RESTful接口，达到实际使用的效果</p><p>在开发RESTful接口前，我们要思考的问题：</p><ul><li>访问的api</li><li>怎么拿到前端的参数数据，（get、post）</li><li>数据格式化，怎么返回json数据</li><li>跨域的问题怎么解决</li></ul><p><strong>开发依赖</strong></p><p>针对上面的问题，我们去安装必要的中间件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i koa koa-router koa-body koa-json @koa/cors -S</span><br></pre></td></tr></table></figure><ul><li>koa   Web框架</li><li>koa-router  api路由</li><li>koa-body  post过来body数据的数据处理 </li><li>koa-json   格式化json数据</li><li>@koa/cors   解决跨域问题</li></ul><p><strong>示例</strong></p><p>接下来让我们看以下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> json = <span class="built_in">require</span>(<span class="string">&#x27;koa-json&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> koaBody = <span class="built_in">require</span> (<span class="string">&#x27;koa-body&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/get&#x27;</span>,<span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> params = ctx.request.query</span><br><span class="line">  <span class="built_in">console</span>.log(params.name);<span class="comment">//取参数</span></span><br><span class="line">  ctx.body =  &#123;</span><br><span class="line">    <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;请求成功！&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&#x27;/post&#x27;</span>,<span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123;body&#125; = ctx.request<span class="comment">//取参数</span></span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;请求成功！&#x27;</span>,</span><br><span class="line">    ...body</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(json())</span><br><span class="line">app.use(koaBody())</span><br><span class="line">app.use(router.routes()).use(router.allowedMethods())</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>让我们看看以上代码在干嘛</p><ul><li>获取get请求参数： <code>const params = ctx.request.query</code></li><li>获取post请求参数：<code>const &#123;body&#125; = ctx.request</code></li><li>返回JSON数据</li></ul><blockquote><p>TIP：我们知道，koa中use的中间件是按顺序的，所以koa-body这个中间件必须放在路由前面，否则解析不到body内容</p></blockquote><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>经过上面的中间件处理，基本可以达到开发RESTful接口的效果，主要是在如何取参数，返回JSON格式数据</p><h1 id="Koa工程化"><a href="#Koa工程化" class="headerlink" title="Koa工程化"></a>Koa工程化</h1><p>经过前面三篇文章的介绍，已经对<code>Koa</code>框架有了一定程度的了解，接下来将对<code>koa</code>应用进行工程化目录的构建</p><p><strong>问题</strong></p><p>在前面中，我们把所有的业务逻辑，路由，中间件都写在index文件中，这显然很不合理，我们应该把index文件各个模块抽离出来。</p><p>第二个就是开发热加载，每次修改完代码都必须停止再重启，显然这很麻烦。</p><p>第三个就是使用的是<code>CommonJS</code>规范，不能去使用ES6新的语法。</p><p>接下来，一个问题一个问题解决</p><p><strong>初始化项目</strong></p><p>新建文件夹，使用<code>npm init -y</code>初始化项目，安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i koa koa-router koa-body koa-json @koa/cors -S</span><br></pre></td></tr></table></figure><p><strong>工程化目录</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">koa_project</span><br><span class="line">├── src</span><br><span class="line">│   ├── api</span><br><span class="line">│   │   ├── a.js</span><br><span class="line">│   │   └── b.js</span><br><span class="line">│   ├── routes</span><br><span class="line">│   │   ├── aRouter.js</span><br><span class="line">│   │   ├── bRouter.js</span><br><span class="line">│   │   └── routes.js</span><br><span class="line">│   └── index.js</span><br><span class="line">├── package-lock.json</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure><ul><li>api文件夹存放业务逻辑</li><li>routes文件夹存放接口</li><li>index文件引用中间件 </li></ul><p><strong>路由整合</strong></p><p>一个web应用肯定有多个接口，在这里使用中间件<code>koa-combine-routers</code>进行路由整合</p><p>使用方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i koa-combine-routers -S</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> combineRoutes = <span class="built_in">require</span>(<span class="string">&#x27;koa-combine-routers&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> aroutes = <span class="built_in">require</span>(<span class="string">&#x27;./aRouter&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> broutes = <span class="built_in">require</span>(<span class="string">&#x27;./bRouter&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports= combineRoutes(aroutes,broutes)</span><br></pre></td></tr></table></figure><p><strong>热更新</strong></p><p>频繁去重启应用是非常不方便的，这里使用<code>nodemon</code></p><p>使用方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i nodemon -D</span><br></pre></td></tr></table></figure><p>在<code>package.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;start&quot;</span>: <span class="string">&quot;nodemon src/index&quot;</span></span><br></pre></td></tr></table></figure><p>主要是监视文件的变化，文件发生变化时去重启 服务，然后使用<code>npm run start</code></p><blockquote><p>TIP:关于ES6配置涉及到<code>webpack</code>配置，单独提炼出来</p></blockquote><p><strong>示例代码</strong></p><p><code>src/index</code>.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;Koa&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> json = <span class="built_in">require</span>(<span class="string">&#x27;koa-json&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> koaBody = <span class="built_in">require</span>(<span class="string">&#x27;koa-body&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./routes/routes&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line">app.use(json())</span><br><span class="line">app.use(koaBody())</span><br><span class="line">app.use(router())</span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p><code>src/routes/routes.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> combineRoutes = <span class="built_in">require</span>(<span class="string">&#x27;koa-combine-routers&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> aroutes = <span class="built_in">require</span>(<span class="string">&#x27;./aRouter&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> broutes = <span class="built_in">require</span>(<span class="string">&#x27;./bRouter&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports= combineRoutes(aroutes,broutes)</span><br></pre></td></tr></table></figure><p><code>src/routes/arouter.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router()</span><br><span class="line"><span class="keyword">const</span> a = <span class="built_in">require</span>(<span class="string">&#x27;../api/a&#x27;</span>)</span><br><span class="line">router.get(<span class="string">&#x27;/a&#x27;</span>, a)</span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure><p><code>src/routes/brouter.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router()</span><br><span class="line"><span class="keyword">const</span> b = <span class="built_in">require</span>(<span class="string">&#x27;../api/b&#x27;</span>)</span><br><span class="line">router.get(<span class="string">&#x27;/b&#x27;</span>, b)</span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure><p><code>src/api/a.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module.exports = function (ctx) &#123;</span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    code: 200,</span><br><span class="line">    msg:&#x27;Hello from a&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>src/api/b.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">msg</span>:<span class="string">&#x27;Hello from b&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Koa集成Webpack"><a href="#Koa集成Webpack" class="headerlink" title="Koa集成Webpack"></a>Koa集成Webpack</h1><p>想要Koa应用支持ES6语法，并且去打包应用，这里去使用的是Webpack5.X，这里不过多讲解Webpack，主要是如何配置打包 koa应用。</p><p><strong>安装依赖</strong></p><p>使用以下命令安装webpack</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack webpack-cli -D</span><br></pre></td></tr></table></figure><p>安装必要的插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i clean-webpack-plugin webpack-node-externals @babel/core @babel/node @babel/preset-env babel-loader cross-env nodemon-webpack-plugin -D</span><br></pre></td></tr></table></figure><p><code>clean-webpack-plugin</code>:清除打包dist目录</p><p><code>webpack-node-externals</code>：不去处理node-moduld下的文件</p><p><code>@babel/core</code>:bable的核心，ES6转ES5</p><p><code>@babel/node</code>： 调试用到</p><p><code>@babel/preset-env</code>对新特性的支持</p><p><code>babel-loader</code>：webpack需要的loader</p><p><code>cross-env</code>:项目环境变量</p><p><code>nodemon-webpack-plugin</code>：热更新插件</p><p><strong>配置</strong></p><p>在项目根目录创建webpack.config.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; DefinePlugin &#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> nodeExternals = <span class="built_in">require</span>(<span class="string">&#x27;webpack-node-externals&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 打包编译为某一端侧的可使用代码  默认值：web  https://webpack.docschina.org/configuration/target/</span></span><br><span class="line">  <span class="attr">target</span>: <span class="string">&#x27;node&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 打包模式，可选择值：development、production</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 控制是否生成，以及如何生成 source map。 https://webpack.docschina.org/configuration/devtool/#root</span></span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&#x27;eval-cheap-source-map&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 打包模块入口文件</span></span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">server</span>: <span class="string">`<span class="subst">$&#123;process.cwd()&#125;</span>/src/index.js`</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 打包后的输入文件</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;[name].bundle.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">`<span class="subst">$&#123;process.cwd()&#125;</span>/dist`</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 匹配解析规则</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">exclude</span>: [<span class="string">`<span class="subst">$&#123;process.cwd()&#125;</span>/node_modules`</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构建过程中使用的插件</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">    <span class="keyword">new</span> DefinePlugin(&#123;</span><br><span class="line">      <span class="string">&#x27;process.env&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">NODE_ENV</span>: <span class="built_in">JSON</span>.stringify(</span><br><span class="line">          process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span> ||</span><br><span class="line">            process.env.NODE_ENV === <span class="string">&#x27;prod&#x27;</span></span><br><span class="line">            ? <span class="string">&#x27;production&#x27;</span></span><br><span class="line">            : <span class="string">&#x27;development&#x27;</span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 防止第三方依赖被打包</span></span><br><span class="line">  <span class="attr">externals</span>: [nodeExternals()]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在项目根目录创建.babelrc文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;presets&quot;</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;targets&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;node&quot;</span>: <span class="string">&quot;current&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用方式</strong></p><p>使用<code>npx webpack命令</code>打包</p><p>在所有js文件中使用ES6语法后，就不能像原来一样使用热更新，这里需要调整脚本</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;dev&quot;</span>: <span class="string">&quot;nodemon  --exec babel-node src/index&quot;</span></span><br></pre></td></tr></table></figure><p>dev：监视ES6语法的Koa应用</p><h1 id="Koa的Webpack优化"><a href="#Koa的Webpack优化" class="headerlink" title="Koa的Webpack优化"></a>Koa的Webpack优化</h1><p>在上面，我们配置了webpack，并进行了打包压缩，可这远远达不到想要的效果，一般情况下，要分为开发和生产模式，接下来编写以下个代码：</p><blockquote><p>在项目根目录新建config目录，新建个文件，<code>webpack.config.dev.js</code>、<code>webpack.config.pro.js</code>、<code>webpack.config.base.js</code></p></blockquote><p>需要安装以下依赖，主要是合并webpack配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack-merge -D</span><br></pre></td></tr></table></figure><p><code>webpack.config.dev.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; merge &#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> NodemonPlugin = <span class="built_in">require</span>(<span class="string">&#x27;nodemon-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baseWebpackConfig = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.config.base&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> webpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&#x27;eval-source-map&#x27;</span>,</span><br><span class="line">  <span class="attr">stats</span>: &#123;</span><br><span class="line">    <span class="attr">children</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> NodemonPlugin()]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = webpackConfig</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>webpack.config.pro.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; merge &#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> baseWebpackConfig = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.config.base&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> TerserWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;terser-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> webpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">  <span class="attr">stats</span>: &#123;</span><br><span class="line">    <span class="attr">children</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">warnings</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">minimizer</span>: [</span><br><span class="line">      <span class="keyword">new</span> TerserWebpackPlugin(&#123;</span><br><span class="line">        <span class="attr">terserOptions</span>: &#123;</span><br><span class="line">          <span class="attr">warnings</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">compress</span>: &#123;</span><br><span class="line">            <span class="attr">warnings</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">drop_console</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">dead_code</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">drop_debugger</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">output</span>: &#123;</span><br><span class="line">            <span class="attr">comments</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">beautify</span>: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">mangle</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">parallel</span>: <span class="literal">true</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">        <span class="attr">commons</span>: &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;commons&#x27;</span>,</span><br><span class="line">          <span class="attr">chunks</span>: <span class="string">&#x27;initial&#x27;</span>,</span><br><span class="line">          <span class="attr">minChunks</span>: <span class="number">3</span>,</span><br><span class="line">          <span class="attr">enforce</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = webpackConfig</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>webpack.config.base.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;./utils&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> nodeExternals = <span class="built_in">require</span>(<span class="string">&#x27;webpack-node-externals&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> webpackconfig = &#123;</span><br><span class="line">  <span class="attr">target</span>: <span class="string">&#x27;node&#x27;</span>,</span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">server</span>: path.join(utils.APP_PATH, <span class="string">&#x27;index.js&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;[name].bundle.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: utils.DIST_PATH</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">exclude</span>: [path.join(__dirname, <span class="string">&#x27;/node_modules&#x27;</span>)]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">externals</span>: [nodeExternals()],</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">    <span class="comment">// 可以直接使用 environmentPlugin</span></span><br><span class="line">    <span class="keyword">new</span> webpack.EnvironmentPlugin([<span class="string">&#x27;NODE_ENV&#x27;</span>])</span><br><span class="line">    <span class="comment">// new webpack.DefinePlugin(&#123;</span></span><br><span class="line">    <span class="comment">//   &#x27;process.env&#x27;: &#123;</span></span><br><span class="line">    <span class="comment">//     NODE_ENV:</span></span><br><span class="line">    <span class="comment">//       process.env.NODE_ENV === &#x27;production&#x27; ||</span></span><br><span class="line">    <span class="comment">//       process.env.NODE_ENV === &#x27;prod&#x27;</span></span><br><span class="line">    <span class="comment">//         ? &quot;&#x27;production&#x27;&quot;</span></span><br><span class="line">    <span class="comment">//         : &quot;&#x27;development&#x27;&quot;,</span></span><br><span class="line">    <span class="comment">//   &#125;,</span></span><br><span class="line">    <span class="comment">// &#125;),</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">node</span>: &#123;</span><br><span class="line">    <span class="comment">// webpack V4</span></span><br><span class="line">    <span class="comment">// console: true,</span></span><br><span class="line">    <span class="comment">// process: true,</span></span><br><span class="line">    <span class="comment">// Buffer: true,</span></span><br><span class="line">    <span class="comment">// setImmediate: true,</span></span><br><span class="line">    <span class="comment">// path: true,</span></span><br><span class="line">    <span class="comment">// webpack V5</span></span><br><span class="line">    <span class="attr">global</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">__filename</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">__dirname</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(webpackconfig)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = webpackconfig</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>由于webpack文件放在了config文件夹中，所以需要对路径做一定处理</p></blockquote><p>新建<code>utils.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.resolve = <span class="function"><span class="keyword">function</span> <span class="title">resolve</span> (<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> path.join(__dirname, <span class="string">&#x27;..&#x27;</span>, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.APP_PATH = <span class="built_in">exports</span>.resolve(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line"><span class="built_in">exports</span>.DIST_PATH = <span class="built_in">exports</span>.resolve(<span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>脚本命令</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;start&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=development webpack --config config/webpack.config.dev.js --watch&quot;</span>,</span><br><span class="line"><span class="string">&quot;build&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=production webpack --config config/webpack.config.prod.js&quot;</span>,</span><br><span class="line"><span class="string">&quot;clean&quot;</span>: <span class="string">&quot;rimraf dist&quot;</span>,</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录关于使用Koa前的一些知识，意在记录如何使用Koa开发一个能基本使用的Web应用，不会太多介绍其框架的本身。内容大多数来自我以前的记录，在这里集合在一起并做整理，这个框架也是我使用在开源社区的Web框架。&lt;/p&gt;</summary>
    
    
    
    <category term="Koa" scheme="https://www.frontblog.top/categories/Koa/"/>
    
    
    <category term="Koa" scheme="https://www.frontblog.top/tags/Koa/"/>
    
  </entry>
  
  <entry>
    <title>ES6的剩余参数</title>
    <link href="https://www.frontblog.top/article/c30c6592.html"/>
    <id>https://www.frontblog.top/article/c30c6592.html</id>
    <published>2021-11-20T09:33:23.000Z</published>
    <updated>2021-11-20T09:51:06.220Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录ES6中函数的剩余参数</p><h1 id="什么是剩余参数"><a href="#什么是剩余参数" class="headerlink" title="什么是剩余参数"></a>什么是剩余参数</h1><p>当我们需要像一个函数传递参数时，不知道后面还有多少参数，那么这些就是剩余参数，在ES6前，我们使用arguments来解决这个问题，而在ES6中，新增…来表示剩余参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">x,y,...z</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x,y,z)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>剩余参数本质其实时数组，根据上面例子就可以看到，数组的好处就在于可以直接使用数组的任何方法，这在arguments这个类数组对象是体验不到的。剩余参数即使没有值，也是一个空数组</p><h1 id="剩余参数的注意事项"><a href="#剩余参数的注意事项" class="headerlink" title="剩余参数的注意事项"></a>剩余参数的注意事项</h1><p><strong>箭头函数的剩余参数：</strong></p><p>箭头函数的的参数即使只有一个 剩余参数，也不能省略圆括号。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add (...z)=&gt;&#123;&#125;<span class="comment">//正确写法</span></span><br><span class="line"><span class="keyword">const</span> add1 ...z =&gt;&#123;&#125;<span class="comment">//错误写法</span></span><br></pre></td></tr></table></figure><p><strong>剩余参数替代arguments</strong></p><p>剩余参数是可以替代arguments的，这一点在箭头函数中的使用特别有用，因为箭头函数用不了arguments，使用剩余参数就可以解决，而且比arguments还好用，因为它是一个纯数组。</p><p><strong>剩余参数的位置：</strong></p><p>剩余参数的位置只能在最后，如果在后面还有参数就会报错。</p><h1 id="剩余参数的应用"><a href="#剩余参数的应用" class="headerlink" title="剩余参数的应用"></a>剩余参数的应用</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录ES6中函数的剩余参数&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="ES6" scheme="https://www.frontblog.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6的函数默认参数</title>
    <link href="https://www.frontblog.top/article/3fd5d531.html"/>
    <id>https://www.frontblog.top/article/3fd5d531.html</id>
    <published>2021-11-20T05:22:26.000Z</published>
    <updated>2021-11-20T09:32:47.947Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录<code>ES6</code>中函数默认参数。</p><h1 id="函数参数的默认值是什么"><a href="#函数参数的默认值是什么" class="headerlink" title="函数参数的默认值是什么"></a>函数参数的默认值是什么</h1><p>调用函数的时候传参，就用传递大的参数，如果没有参数，就用默认值，如果没有默认值那就是<code>unddefined</code></p><p>这是ES6之前的写法:</p><p><strong>这里需要注意undefined一定要加单引号，否则判断永远不成立！！</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add1</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> b === <span class="string">&#x27;undefined&#x27;</span>)&#123;</span><br><span class="line">       b = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line">add1(<span class="number">1</span>,<span class="number">2</span>)<span class="comment">//3</span></span><br><span class="line">add1(<span class="number">1</span>)<span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>这是ES6函数的默认参数写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a,b = <span class="number">2</span></span>) =&gt;</span> a+b;</span><br><span class="line">add(<span class="number">1</span>,<span class="number">5</span>)<span class="comment">//6</span></span><br><span class="line">add(<span class="number">1</span>)<span class="comment">//3</span></span><br></pre></td></tr></table></figure><h1 id="函数默认参数的注意事项"><a href="#函数默认参数的注意事项" class="headerlink" title="函数默认参数的注意事项"></a>函数默认参数的注意事项</h1><p>默认参数的生效的条件：不传参数，或者明确的传递undefined作为参数，只有这两种情况下默认值才会生效</p><p>默认值是表达式的话，是惰性求值的，这点和解构赋值的默认值是一样的</p><p><strong>函数参数默认值最好从右往左赋值</strong>，因为在调用函数的时候，肯定是从左往右赋值，那左边设置默认值，肯定不会变为默认值。</p><h1 id="函数参数默认值应用"><a href="#函数参数默认值应用" class="headerlink" title="函数参数默认值应用"></a>函数参数默认值应用</h1><p>结合解构赋值的一些例子：</p><p>接受多个参数，一般这么写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> login = <span class="function">(<span class="params">username, password, age</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(username, password, age);</span><br><span class="line">&#125;;</span><br><span class="line">login(<span class="string">&#x27;alex&#x27;</span>, <span class="number">123456</span>, <span class="string">&#x27;男&#x27;</span>);</span><br></pre></td></tr></table></figure><p>有一个问题就是<strong>参数默认值</strong>，<code>undefined</code>情况大多数是我们漏传参数，所以需要默认值。接下来进行优化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> login = <span class="function">(<span class="params">username = <span class="string">&#x27;default&#x27;</span>, password = <span class="number">123456</span>, sex = <span class="string">&#x27;男&#x27;</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(username, password, sex);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//login(&#x27;alex&#x27;, 123456, &#x27;男&#x27;);</span></span><br><span class="line">login();</span><br></pre></td></tr></table></figure><p>这样看上去并不完美，我们<strong>需要记住传参的类型</strong>，或者是我传的是什么东西，所以参数改造成对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> login = <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(options.username, options.password, options.sex);</span><br><span class="line">&#125;;</span><br><span class="line">login(&#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="number">123456</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这种写法虽然解决了问题，但是比上面代码写得繁琐了，所以需要使用<strong>解构赋值进行代码简化</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> login = <span class="function">(<span class="params">&#123; username, password, sex &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(username, password, sex);</span><br><span class="line">&#125;;</span><br><span class="line">login(&#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="number">123456</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在最初的时候，我们是有函数参数默认值的，接下来把这个功能加上，那就是使用<strong>解构赋值的默认值</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> login = <span class="function">(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  username = <span class="string">&#x27;default&#x27;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  password = <span class="number">123456</span>,</span></span></span><br><span class="line"><span class="params"><span class="function"> sex = <span class="string">&#x27;男&#x27;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(username, password, sex);</span><br><span class="line">&#125;;</span><br><span class="line">login(&#123;&#125;);</span><br></pre></td></tr></table></figure><p>这里调用函数还需要传入一个空对象才能右默认值，那我直接调用也有默认值需要怎么实现。</p><p>这里什么都不传就是undefined，所以是空对象，空对象解构赋值，就可以得到默认的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> login = <span class="function">(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  username = <span class="string">&#x27;default&#x27;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  password = <span class="number">123456</span>,</span></span></span><br><span class="line"><span class="params"><span class="function"> sex = <span class="string">&#x27;男&#x27;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">&#125; = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(username, password, sex);</span><br><span class="line">&#125;;</span><br><span class="line">login();</span><br></pre></td></tr></table></figure><p>至此，程序优化完毕。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录&lt;code&gt;ES6&lt;/code&gt;中函数默认参数。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>ES6的对象字面量的增强</title>
    <link href="https://www.frontblog.top/article/d7975c2a.html"/>
    <id>https://www.frontblog.top/article/d7975c2a.html</id>
    <published>2021-11-19T11:56:48.000Z</published>
    <updated>2021-11-20T05:23:39.721Z</updated>
    
    <content type="html"><![CDATA[<p>在ES6中，对象字面量得到了很大程度的增强，本文将记录关于在ES6中对象字面量加强了哪些。</p><h1 id="什么是对象字面量"><a href="#什么是对象字面量" class="headerlink" title="什么是对象字面量"></a>什么是对象字面量</h1><p>对象字面量就是对象的一种写法。ES6之前有两种：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例化构造函数生成对象</span></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">person.age = <span class="number">18</span>;</span><br><span class="line"><span class="comment">//对象字面量</span></span><br><span class="line"><span class="keyword">const</span> person1 = &#123;</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="属性和方法的简洁表示法。"><a href="#属性和方法的简洁表示法。" class="headerlink" title="属性和方法的简洁表示法。"></a>属性和方法的简洁表示法。</h1><p>属性简洁：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES6前</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">age</span>:age</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ES6,键名和变量或者常量名一样时可以只写一个。</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">   age</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法简洁:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES6前</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">speak</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ES6,省略:function</span></span><br><span class="line"><span class="keyword">const</span> person1 = &#123;</span><br><span class="line">    <span class="function"><span class="title">speak</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="方括号语法"><a href="#方括号语法" class="headerlink" title="方括号语法"></a>方括号语法</h1><p>上面时对属性值的一种简化。这里就是关于属性的简化。</p><p>用法：方括号现在可以写在对象字面量中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//属性别名</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="string">&#x27;age1&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> user = &#123;[a]:<span class="number">18</span>,<span class="attr">name</span>:<span class="string">&#x27;alex&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(user)</span><br></pre></td></tr></table></figure><p>方括号可以放什么：只要是可以得到一个值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fun = <span class="function">() =&gt;</span> <span class="string">&#x27;age&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  [fun()]: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(user);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在ES6中，对象字面量得到了很大程度的增强，本文将记录关于在ES6中对象字面量加强了哪些。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="对象字面量的增强" scheme="https://www.frontblog.top/tags/%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F%E7%9A%84%E5%A2%9E%E5%BC%BA/"/>
    
  </entry>
  
  <entry>
    <title>ES6的解构赋值</title>
    <link href="https://www.frontblog.top/article/d72f084c.html"/>
    <id>https://www.frontblog.top/article/d72f084c.html</id>
    <published>2021-11-19T05:58:59.000Z</published>
    <updated>2021-11-19T11:36:43.122Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录<code>ES6</code>中解构赋值知识，包括数组解构、对象解构。</p><h1 id="什么是解构赋值"><a href="#什么是解构赋值" class="headerlink" title="什么是解构赋值"></a>什么是解构赋值</h1><p>解析某一种数据的解构，将我们想要的东西提取出来，赋值给变量或者常量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a,b,c] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//1</span></span><br></pre></td></tr></table></figure><h1 id="数组解构原理"><a href="#数组解构原理" class="headerlink" title="数组解构原理"></a>数组解构原理</h1><p>模式（结构）匹配：</p><p>左边和右边的类型是相同的，不能一个数组解构成对象或者其他，左边是数组，右边也是数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [] = []</span><br></pre></td></tr></table></figure><p>索引值相同的完成赋值:</p><p>索引值相对应的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a,b,c] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>不取的值用逗号隔开：</p><p>比如我们就想取某个值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a,[,,b],c] = [<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="number">5</span>];</span><br></pre></td></tr></table></figure><p>注意不要这样写,直接报错：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, b] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br></pre></td></tr></table></figure><h1 id="数组解构的默认值"><a href="#数组解构的默认值" class="headerlink" title="数组解构的默认值"></a>数组解构的默认值</h1><p>数组解构是可以设置默认值的，如果不设置，那么就有可能产生undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a,b] = []</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>设置默认值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a = <span class="number">0</span>,b] = []</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//0</span></span><br></pre></td></tr></table></figure><p>需要注意，undefined是使用全等判断。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a = <span class="number">1</span>,b] = [<span class="literal">null</span>,<span class="number">2</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [a = <span class="number">1</span>,b] = [<span class="number">0</span>,<span class="number">2</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [a = <span class="number">1</span>,b] = [<span class="literal">false</span>,<span class="number">2</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [a = <span class="number">1</span>,b] = [<span class="literal">false</span>,<span class="number">2</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [a = <span class="number">1</span>,b] = [<span class="string">&#x27;undefined&#x27;</span>,<span class="number">2</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [a = <span class="number">1</span>,b] = [<span class="literal">undefined</span>,<span class="number">2</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>默认值如果是表达式，那么是惰性执行的，也就是说，不是全等undefined，那么表达式就不会执行，避免了浏览器的性能损耗</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fun = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;我被调用&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> [x = fun()] = [<span class="number">1</span>];</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br></pre></td></tr></table></figure><h1 id="数组解构赋值应用"><a href="#数组解构赋值应用" class="headerlink" title="数组解构赋值应用"></a>数组解构赋值应用</h1><p>类数组可以解构。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [a, b] = <span class="built_in">arguments</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a, b);</span><br><span class="line">&#125;</span><br><span class="line">fun(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><code>Nodelist</code>也可以解构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>456<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>789<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> p = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     <span class="built_in">console</span>.log(p);</span></span><br><span class="line"><span class="javascript">     <span class="keyword">const</span> [a, b, c] = p;</span></span><br><span class="line"><span class="javascript">     <span class="built_in">console</span>.log(a);</span></span><br><span class="line"><span class="javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>函数参数解构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">[a, b]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="built_in">console</span>.log(add(arr));<span class="comment">//11</span></span><br></pre></td></tr></table></figure><p>交换变量的值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">6</span>;</span><br><span class="line">[y,x] = [x,y]</span><br><span class="line"><span class="built_in">console</span>.log(x,y)</span><br><span class="line"><span class="comment">//以前</span></span><br><span class="line"><span class="keyword">let</span> temp = x;</span><br><span class="line">x = y;</span><br><span class="line">y = temp;</span><br></pre></td></tr></table></figure><h1 id="对象解构赋值原理"><a href="#对象解构赋值原理" class="headerlink" title="对象解构赋值原理"></a>对象解构赋值原理</h1><p>模式（结构）匹配：</p><p>数组解构要求左右边的类型相同，对象解构也是一样的</p><p>属性名相同的完成解构：</p><p>数组是下标，那么对象就是属性名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;age,username&#125; = &#123;<span class="attr">username</span>:<span class="string">&#x27;Alex&#x27;</span>,<span class="attr">age</span>:<span class="number">23</span>&#125;</span><br><span class="line"><span class="comment">//完整写法</span></span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">age</span>:age,<span class="attr">username</span>:username&#125; = &#123;<span class="attr">username</span>:<span class="string">&#x27;Alex&#x27;</span>,<span class="attr">age</span>:<span class="number">23</span>&#125;</span><br><span class="line"><span class="comment">//别名-&gt;属性名不改，就能解构赋值，修改属性值不就是给其别名</span></span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">age</span>:age,<span class="attr">username</span>:uname&#125; = &#123;<span class="attr">username</span>:<span class="string">&#x27;Alex&#x27;</span>,<span class="attr">age</span>:<span class="number">23</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(age,uname)</span><br></pre></td></tr></table></figure><ul><li>顺序是无关的。属性名相同即可解构赋值</li></ul><h1 id="对象解构注意事项"><a href="#对象解构注意事项" class="headerlink" title="对象解构注意事项"></a>对象解构注意事项</h1><p>对象默认值生效是对象属性值为全等undefined时生效。设置对象默认值也是使用等号。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;<span class="attr">name</span>:name,age=<span class="number">18</span>&#125; = &#123;<span class="attr">name</span>:<span class="string">&#x27;alex&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(name,age)<span class="comment">//alex,18</span></span><br></pre></td></tr></table></figure><p>默认值时表达式，同样也是惰性求值。和前面数组一样。</p><p>将一个已经声明的变量用于解构赋值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">(&#123;<span class="attr">a</span>:a&#125; = &#123;<span class="attr">a</span>:<span class="number">10</span>&#125;)<span class="comment">//需要加()</span></span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//10</span></span><br><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> &#123; b &#125; = &#123; <span class="attr">b</span>: <span class="number">10</span> &#125;;</span><br></pre></td></tr></table></figure><p>对象解构时能取到继承的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;<span class="attr">toString</span>:a&#125; = &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//toString的方法</span></span><br></pre></td></tr></table></figure><h1 id="对象解构赋值应用"><a href="#对象解构赋值应用" class="headerlink" title="对象解构赋值应用"></a>对象解构赋值应用</h1><p>函数参数的解构赋值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fun = <span class="function">(<span class="params">&#123; username: name, age: age &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name, age);</span><br><span class="line">&#125;;</span><br><span class="line">fun(&#123; <span class="attr">username</span>: <span class="string">&#x27;Alex&#x27;</span>, <span class="attr">age</span>: <span class="number">23</span> &#125;);</span><br></pre></td></tr></table></figure><p>复杂嵌套：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">15</span>,</span><br><span class="line">  <span class="attr">b</span>: [<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>],</span><br><span class="line">  <span class="attr">c</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">59</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="attr">a</span>: a,</span><br><span class="line">  <span class="attr">b</span>: [, arr], <span class="comment">//b属性值-&gt;数组第二</span></span><br><span class="line">  <span class="attr">c</span>: &#123; <span class="attr">b</span>: o &#125;, <span class="comment">//c属性值-&gt;对象属性b</span></span><br><span class="line">&#125; = obj;</span><br><span class="line"><span class="built_in">console</span>.log(a, arr, o);</span><br></pre></td></tr></table></figure><h1 id="其他数据类型的解构赋值"><a href="#其他数据类型的解构赋值" class="headerlink" title="其他数据类型的解构赋值"></a>其他数据类型的解构赋值</h1><p>字符串解构赋值：可以用数组赋值也可以用对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a,b,,c] = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(a,b,c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;<span class="number">0</span>:a,<span class="number">1</span>:b,<span class="number">2</span>:c&#125; = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(a,b,c)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录&lt;code&gt;ES6&lt;/code&gt;中解构赋值知识，包括数组解构、对象解构。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="解构赋值" scheme="https://www.frontblog.top/tags/%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>ES6的箭头函数</title>
    <link href="https://www.frontblog.top/article/cba6040a.html"/>
    <id>https://www.frontblog.top/article/cba6040a.html</id>
    <published>2021-11-18T08:26:19.000Z</published>
    <updated>2021-11-19T05:58:10.238Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录ES6里面的箭头函数。</p><h1 id="认识箭头函数"><a href="#认识箭头函数" class="headerlink" title="认识箭头函数"></a>认识箭头函数</h1><p>在ES6前，我们书写一个函数需要写一个<code>function</code>来定义一个函数，而在ES6中，我们可以使用箭头函数来定义，这中写法是：<code>()=&gt;&#123;&#125;</code>,括号里面是参数，<code>=&gt;</code>代表了函数，花括号代表函数体。箭头函数是一个匿名函数，所以需要赋值给一个常量或者变量（一般是常量）来方便函数调用。其结构是这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const 函数名 = 参数 =&gt;&#123;函数体&#125;</span><br></pre></td></tr></table></figure><h1 id="箭头函数的注意事项"><a href="#箭头函数的注意事项" class="headerlink" title="箭头函数的注意事项"></a>箭头函数的注意事项</h1><p><strong>单个参数</strong></p><p>单个参数是<strong>能省略</strong>()，没有参数或者多个参数<strong>不能省略</strong>()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x+<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> add1 = <span class="function">()  =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> add1 = <span class="function">(<span class="params">x,y,z</span>)  =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x+y+z</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>单行函数体</strong></p><p>单行函数体可以 <strong>同时省略</strong>{}和return语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function"><span class="params">x</span> =&gt;</span> x+<span class="number">1</span></span><br></pre></td></tr></table></figure><p>多行函数体不能简化。</p><p><strong>单行对象</strong></p><p>对象也能简化，在{}外面加一层()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">x, y</span>) =&gt;</span> (&#123; <span class="attr">x</span>: x + y &#125;);</span><br><span class="line"><span class="keyword">const</span> arr = <span class="function">(<span class="params">x, y</span>) =&gt;</span> [x,y];</span><br></pre></td></tr></table></figure><h1 id="箭头函数this指向"><a href="#箭头函数this指向" class="headerlink" title="箭头函数this指向"></a>箭头函数this指向</h1><p>在箭头函数中，没有this指向，但是会继承上一层的this，这里的上一层就是通过作用域 链找this，看下面例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> calc = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">add</span>:<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">calc.add()<span class="comment">//window</span></span><br></pre></td></tr></table></figure><ul><li>首先，箭头函数没有this，这里调用函数，根据JS的作用域，它肯定需要往面找this这个东西，函数作用域没有，往外，对象没有作用域，再往外就是全局，全局的作用就是window，所以这里的this指向的是window。</li></ul><p>下面再来一个复杂一点的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> calc = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">add</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// this</span></span><br><span class="line">        <span class="keyword">const</span> adder = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        adder()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> adder = calc.add</span><br><span class="line">adder()<span class="comment">//window</span></span><br><span class="line">calc.add();<span class="comment">//calc这个对象</span></span><br></pre></td></tr></table></figure><ul><li>首先对象里面的add函数里面还有箭头函数，这个this再箭头函数是没有的，寻找上一层，就是add这个函数的this，只要知道是这个this，那么就简单了，只需要知道谁在调用，就知道this指向谁了，第一个赋值给了全局，在全局调用就是window，第二个是被对象调用，this指向的就是这个对象。</li></ul><h1 id="不适合箭头函数的场景"><a href="#不适合箭头函数的场景" class="headerlink" title="不适合箭头函数的场景"></a>不适合箭头函数的场景</h1><p><strong>构造函数</strong></p><p>箭头函数是不能作为构造函数的，因为没有this指向，下面这种是错误的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> u = <span class="keyword">new</span> User()</span><br></pre></td></tr></table></figure><p><strong>需要this指向调用对象的时候</strong></p><p>以下例子中，我们本意是指向dom，但是这里会指向全局：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(</span><br><span class="line">        <span class="string">&#x27;click&#x27;</span>,</span><br><span class="line">        <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="built_in">this</span>);<span class="comment">//window</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="literal">false</span></span><br><span class="line">      );</span><br></pre></td></tr></table></figure><p><strong>需要使用类数组对象arguments的时候</strong></p><p>箭头函数是不能使用类数组对象arguments。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">add1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录ES6里面的箭头函数。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="箭头函数" scheme="https://www.frontblog.top/tags/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>ES6的模板字符</title>
    <link href="https://www.frontblog.top/article/bcee68e2.html"/>
    <id>https://www.frontblog.top/article/bcee68e2.html</id>
    <published>2021-11-17T14:29:10.000Z</published>
    <updated>2021-11-18T08:25:33.531Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录ES6中大的模板字符知识。</p><h1 id="什么是模板字符串"><a href="#什么是模板字符串" class="headerlink" title="什么是模板字符串"></a>什么是模板字符串</h1><p><strong>认识模板字符串：</strong></p><p>在<code>ES6</code>前我们使用双引号或者单引号来包裹字符串，而在<code>ES6</code>中我们可以使用``来包裹字符串，这样的字符串就是模板字符串。</p><p><strong>模板字符串与一般字符串差别：</strong></p><p>它们的区别在于使用上才能能体现出来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;Alex&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">23</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一般字符串</span></span><br><span class="line"><span class="keyword">const</span> info = <span class="string">&#x27;我的名字是：&#x27;</span>+user.name+<span class="string">&#x27;年龄：&#x27;</span>+user.age</span><br><span class="line"><span class="built_in">console</span>.log(info)</span><br><span class="line"><span class="comment">//ES6模板字符串</span></span><br><span class="line"><span class="keyword">const</span> info1 = <span class="string">`我的名字是：<span class="subst">$&#123;user.name&#125;</span>,年龄：<span class="subst">$&#123;user.age&#125;</span>`</span></span><br><span class="line"><span class="built_in">console</span>.log(info1)</span><br></pre></td></tr></table></figure><h1 id="模板字符串的注意事项"><a href="#模板字符串的注意事项" class="headerlink" title="模板字符串的注意事项"></a>模板字符串的注意事项</h1><p><strong>输出多行字符串</strong></p><p>模板字符串中，所有的空格、换行或者缩进都会被保留到输出之中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;col   col&#x27;</span>)<span class="comment">//col col</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`col   col`</span>)<span class="comment">//col   col</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;col\ncol&#x27;</span>)</span><br><span class="line"><span class="comment">//col</span></span><br><span class="line"><span class="comment">//col</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`col\ncol`</span>)</span><br><span class="line"><span class="comment">//col</span></span><br><span class="line"><span class="comment">//col</span></span><br></pre></td></tr></table></figure><p><strong>输出`和\等特殊字符</strong></p><p>需要在特殊字符前面使用\进行转义。</p><p><strong>模板字符串的注入</strong></p><p>只要最终可以得出一个值的就可以通过${}注入到模板字符串中</p><h1 id="模板字符串的应用"><a href="#模板字符串的应用" class="headerlink" title="模板字符串的应用"></a>模板字符串的应用</h1><p>这里使用一个显示用户信息的Demo进行：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      * &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-id">#app</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-id">#app</span> <span class="selector-class">.title</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-id">#app</span> <span class="selector-class">.info</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>用户信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>信息加载中...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;list&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> user = [</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>: <span class="string">&#x27;Test User one&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>: <span class="string">&#x27;Test User two&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">age</span>: <span class="number">25</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">password</span>: <span class="string">&#x27;154636&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>: <span class="string">&#x27;Test User three&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">age</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">password</span>: <span class="string">&#x27;156426&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">      ];</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> html = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; user.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">          html += <span class="string">`&lt;li&gt;用户名：<span class="subst">$&#123;user[i].name&#125;</span>;年龄:<span class="subst">$&#123;user[i].age&#125;</span>;密码:<span class="subst">$&#123;user[i].password&#125;</span>&lt;/li&gt;`</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        list.innerHTML = html;</span></span><br><span class="line"><span class="javascript">      &#125;, <span class="number">3000</span>);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录ES6中大的模板字符知识。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="ES6" scheme="https://www.frontblog.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6的let和const</title>
    <link href="https://www.frontblog.top/article/fee5585c.html"/>
    <id>https://www.frontblog.top/article/fee5585c.html</id>
    <published>2021-11-17T11:58:59.000Z</published>
    <updated>2021-11-17T14:30:04.070Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录ES6中新增的let和const。</p><h1 id="let和const简介"><a href="#let和const简介" class="headerlink" title="let和const简介"></a>let和const简介</h1><p>在ES6前定义一个变量只能使用var定义，在ES6中新增了let定义变量，const定义常量，在这里先知道的是，let定义的变量是能被修改，const定义的初值后是不能修改的即可。</p><h1 id="let块级作用域："><a href="#let块级作用域：" class="headerlink" title="let块级作用域："></a>let块级作用域：</h1><p>先实现一个案例，我们实现的这个案例是想点击按钮0输出0，点击按钮1输出1，点击按钮2输出2。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      * &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.center</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">310px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.center</span> <span class="selector-class">.btn</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.btn&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> info = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;info&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">        btns[i].addEventListener(</span></span><br><span class="line"><span class="javascript">          <span class="string">&#x27;click&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            info.innerText = i;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(i);</span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">          <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">        );</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>以上代码中每次点击的话输出其实都是3，为什么？首先我们明白两点，for里面的i是全局变量，函数只有调用才执行，弄清楚这两点后，我们思路已经很清晰了，for循环结束后i已经是3，我们点击的时候，函数触发，但是函数里面没有i，那怎么办，往外边寻找i，在全局是不是有个i啊，那在这个i是不是就是for循环结束的i，此时就是3。</li></ul><p>此时的作用域是这样的：</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211117203404.png"></p><ul><li>在ES6前想解决这个问题的办法就是使用闭包，以下是修改代码部分：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.btn&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> info = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;info&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span><br><span class="line">    btns[index].addEventListener(</span><br><span class="line">      <span class="string">&#x27;click&#x27;</span>,</span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        info.innerText = index;</span><br><span class="line">        <span class="built_in">console</span>.log(index);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="literal">false</span></span><br><span class="line">    );</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用立即执行函数，我们这个函数是不是就被执行了，i是不是就被传入，此时我们在去点击，会寻找index，是不是就是刚才传入的那个值，就不会去寻找最外面的i。</li><li>此时作用域是这样的：</li></ul><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211117203809.png"></p><p>在拥有ES6后，可以使用let定义变量，修改var位let即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.btn&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> info = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;info&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span><br><span class="line">  btns[i].addEventListener(</span><br><span class="line">    <span class="string">&#x27;click&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      info.innerText = i;</span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用let定义变量会产生块级作用域。此时的作用域是这样的。</li></ul><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211117210949.png"></p><p>至此我们知道let是具有块级作用域的！</p><h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><p>const声明的常量必须赋初值，赋值后不允许再次修改，基本数据类型是不允许修改，引用数据类型是可以的，但是不是通过直接赋值另外的一个新的引用数据类型，如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line">a = <span class="number">1</span><span class="comment">//报错</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;<span class="comment">//报错</span></span><br><span class="line">obj.name = <span class="string">&#x27;李四&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.name)</span><br></pre></td></tr></table></figure><p>可以得出const不能修改的是指向内存的地址，而内存地址的值是可以修改的。</p><h1 id="重复声明"><a href="#重复声明" class="headerlink" title="重复声明"></a>重复声明</h1><p>let和const是不能重复声明的。比如以下代码是不允许的！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>以下也是不允许的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">fun()</span><br></pre></td></tr></table></figure><p>但是如果是不同作用域下，是允许的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">fun()</span><br></pre></td></tr></table></figure><h1 id="变量声明提升"><a href="#变量声明提升" class="headerlink" title="变量声明提升"></a>变量声明提升</h1><p>let和const是不存在变量声明提升的。下面代码是错误的。</p><p>其实就是让我们养成习惯：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h1><p>只要作用域存在let、const，它们所声明的变量或者常量就会绑定到这个区域，不再受到外部影响。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">fun()</span><br></pre></td></tr></table></figure><ul><li>如果仅用刚才的知识，let是不会被提升，所以fun没有let变量，那么js会去往外部找，那这里问题就来了，我们运行程序是报错的，原因就是暂时性死区，再输出语句后面有一个let，它会绑定当前作用域，导致不会往外面找这个变量，从而直接报错。</li></ul><h1 id="window对象的属性和方法"><a href="#window对象的属性和方法" class="headerlink" title="window对象的属性和方法"></a>window对象的属性和方法</h1><p>使用var定义的变量或者声明的函数，都成为window对象的属性，而let和const不会</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">11</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">50</span></span><br><span class="line"><span class="keyword">const</span> add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">window</span>.a<span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">window</span>.b<span class="comment">//50</span></span><br><span class="line"><span class="built_in">window</span>.add<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><h1 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h1><p>let、const是存在块级作用域的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> a = <span class="number">0</span>;a&lt;<span class="number">3</span>;a++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//报错，没有定义</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>不存在作用域提升</li><li>存在块级作用域</li><li>存在暂时性死区</li><li>在<strong>同一作用域下</strong>不能重复声明</li><li>不能被全局window访问。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录ES6中新增的let和const。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="ES6" scheme="https://www.frontblog.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>JS的正则表达式</title>
    <link href="https://www.frontblog.top/article/d7136757.html"/>
    <id>https://www.frontblog.top/article/d7136757.html</id>
    <published>2021-11-17T07:42:16.000Z</published>
    <updated>2021-11-17T09:49:47.431Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录JavaScript的正则表达式。</p><h1 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h1><p>描述了字符串的“构成模式”，经常被用于检查字符串是否符合预定的格式要求。</p><p>检测某个字符串是否是6位数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;456123&#x27;</span></span><br><span class="line"><span class="keyword">var</span> regexp = <span class="regexp">/^\d&#123;6&#125;$/</span>;</span><br><span class="line"><span class="keyword">if</span>(regexp.tets(str))&#123;</span><br><span class="line">    alert(<span class="string">&#x27;符合&#x27;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;不符合&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>前后的 / 表示正则表达式</li><li>^匹配开头，$匹配结尾</li><li>\d表示数字</li><li>{6}表示6位数</li></ul><p>正则表达式是按位描述，也就是一个一个描述字符串，比如描述一个m开头，n结尾，中间3个数字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/^m\d\d\dn$/;</span><br><span class="line"><span class="regexp">/^m\d&#123;3&#125;n$/</span></span><br></pre></td></tr></table></figure><h1 id="正则表达是的基本使用"><a href="#正则表达是的基本使用" class="headerlink" title="正则表达是的基本使用"></a>正则表达是的基本使用</h1><p>创建表达式：</p><p>使用<code>/内容/</code>的语法形式，可以快速创建，也可以使用 new RegExp(‘内容’)的形式。typeof检测结果式object。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var regexp = /^m\d\d\dn$/;</span><br><span class="line">var regexp1 = new RegExp(&#x27;^m\\d\\d\\dn$&#x27;);</span><br></pre></td></tr></table></figure><h1 id="正则表达式和字符串"><a href="#正则表达式和字符串" class="headerlink" title="正则表达式和字符串"></a>正则表达式和字符串</h1><h1 id="正则表达式的应用"><a href="#正则表达式的应用" class="headerlink" title="正则表达式的应用"></a>正则表达式的应用</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录JavaScript的正则表达式。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="正则表达式" scheme="https://www.frontblog.top/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JS的Date对象和Math对象</title>
    <link href="https://www.frontblog.top/article/69963f7a.html"/>
    <id>https://www.frontblog.top/article/69963f7a.html</id>
    <published>2021-11-17T07:41:07.000Z</published>
    <updated>2021-11-17T09:49:31.575Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录Javascript中的Date对象和Math对象</p><h1 id="Date-日期对象"><a href="#Date-日期对象" class="headerlink" title="Date()日期对象"></a>Date()日期对象</h1><p>使用new Date()即可得到当前时间的日期对象，它式object类型值。使用new Date(2021,10,17)即可获得指定日期的对象，注意第二参数表示第二个月，从0开始，11表示12月，也可以使用new Date(‘2021-11-17’)获得指定日期，不过<strong>月份就不是从0开始计算</strong></p><p>需要注意的是：<code>new Date(&#39;2020-05-01&#39;);</code>这种写法最好是加0，因为不加虽然不会报错，但是就是没有时区。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//：Wed Nov 17 2021 16:06:24 GMT+0800</span></span><br><span class="line"><span class="keyword">var</span> d1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2020</span>, <span class="number">5</span>, <span class="number">1</span>);<span class="comment">//Mon Jun 01 2020 00:00:00 GMT+0800</span></span><br><span class="line"><span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2020-05-01&#x27;</span>);<span class="comment">//Fri May 01 2020 08:00:00 GMT+0800</span></span><br><span class="line"><span class="built_in">console</span>.log(d);</span><br><span class="line"><span class="built_in">console</span>.log(d1);</span><br><span class="line"><span class="built_in">console</span>.log(d2);</span><br></pre></td></tr></table></figure><h1 id="Date-常见方法"><a href="#Date-常见方法" class="headerlink" title="Date()常见方法"></a>Date()常见方法</h1><table><thead><tr><th align="center">方法</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">getDate()</td><td align="center">得到日期1~31</td></tr><tr><td align="center">getDay()</td><td align="center">得到星期0~6</td></tr><tr><td align="center">getMonth()</td><td align="center">得到月份0~11</td></tr><tr><td align="center">getFullYear()</td><td align="center">得到年份</td></tr><tr><td align="center">getHours()</td><td align="center">得到小时数0~23</td></tr><tr><td align="center">getMinutes()</td><td align="center">得到分钟数0~59</td></tr><tr><td align="center">getSeconds()</td><td align="center">得到秒数0~59</td></tr></tbody></table><h1 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h1><ul><li>时间戳表示1970年1月1日零点距离某时刻的毫秒数</li><li>通过getTime()方法或者Date.parse()函数可以将日期对象变为时间戳。</li><li>通过new Date(时间戳)的写法，可以将时间戳变为日期对象。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="keyword">var</span> timestamp1 = d.getTime();<span class="comment">//毫秒级</span></span><br><span class="line"><span class="keyword">var</span> timestamp2 = <span class="built_in">Date</span>.parse(d);<span class="comment">//秒，后面三位都是000</span></span><br><span class="line"><span class="keyword">var</span> dd = <span class="keyword">new</span> <span class="built_in">Date</span>(timestamp1)</span><br></pre></td></tr></table></figure><h1 id="实现倒计时"><a href="#实现倒计时" class="headerlink" title="实现倒计时"></a>实现倒计时</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span>2022年新年倒计时<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> info = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;info&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="comment">// 现在时间</span></span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> nd = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">       <span class="comment">//  目标时间</span></span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> td = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2022</span>, <span class="number">1</span>, <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">       <span class="comment">// 时间差，毫秒级</span></span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> diff = td - nd;</span></span><br><span class="line"><span class="javascript">       <span class="comment">// 换算</span></span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> day = <span class="built_in">parseInt</span>(diff / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>));</span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> hours = <span class="built_in">parseInt</span>((diff % (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>)) / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>));</span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> minutes = <span class="built_in">parseInt</span>((diff % (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>)) / (<span class="number">1000</span> * <span class="number">60</span>));</span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> seconds = <span class="built_in">parseInt</span>(</span></span><br><span class="line"><span class="javascript">         ((diff % (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>)) % (<span class="number">1000</span> * <span class="number">60</span>)) / <span class="number">1000</span></span></span><br><span class="line"><span class="javascript">       );</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">       info.innerText =</span></span><br><span class="line"><span class="javascript">         day + <span class="string">&#x27;天&#x27;</span> + hours + <span class="string">&#x27;小时&#x27;</span> + minutes + <span class="string">&#x27;分&#x27;</span> + seconds + <span class="string">&#x27;秒&#x27;</span>;</span></span><br><span class="line"><span class="javascript">     &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Math-数学对象"><a href="#Math-数学对象" class="headerlink" title="Math()数学对象"></a>Math()数学对象</h1><p>幂计算：Math.pow()、开方：Math.sqrt()</p><p>向上取整：Math.ceil()、向下取整：Math.floor()</p><p>四舍五入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.round(<span class="number">3.14</span>)<span class="comment">//3</span></span><br><span class="line"><span class="built_in">Math</span>.round(<span class="number">3.44</span>)<span class="comment">//3</span></span><br><span class="line"><span class="built_in">Math</span>.round(<span class="number">3.54</span>)<span class="comment">//4</span></span><br></pre></td></tr></table></figure><p>四舍五入到某个小数：</p><p>思路就是乘以倍数，再四舍五入，再除以倍数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3.52563</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(a*<span class="number">100</span>)/<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>得到参数列表的最大值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.max(<span class="number">2</span>,<span class="number">36</span>,<span class="number">454</span>,<span class="number">5</span>,<span class="number">12</span>)<span class="comment">//454</span></span><br></pre></td></tr></table></figure><p>得到参数最小值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">Math</span>.min(<span class="number">2</span>,<span class="number">36</span>,<span class="number">454</span>,<span class="number">5</span>,<span class="number">12</span>)<span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>得到数组的最大值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">10</span>]</span><br><span class="line"><span class="keyword">var</span> max = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>,arr)</span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">var</span> max1 =  <span class="built_in">Math</span>.max(...arr)</span><br><span class="line"><span class="built_in">console</span>.log(max)<span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>apply会把数组的数值打散。上下文指向谁不重要。</p><p>这里需要注意数组里面有个join的方法也是打散数值的，不过那是字符串类型，所以会报错NaN。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">225</span>, <span class="number">454512</span>, <span class="number">15221</span>, <span class="number">11</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.join();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(a));<span class="comment">//NaN</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录Javascript中的Date对象和Math对象&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>JS的包装类</title>
    <link href="https://www.frontblog.top/article/aae27dc2.html"/>
    <id>https://www.frontblog.top/article/aae27dc2.html</id>
    <published>2021-11-17T04:41:50.000Z</published>
    <updated>2021-11-17T09:49:31.578Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录JS的包装类对象</p><h1 id="什么是包装类"><a href="#什么是包装类" class="headerlink" title="什么是包装类"></a>什么是包装类</h1><p>Number()、String()、和Boolean()分别是数字、字符串、布尔值的“包装类”。包装类的目的就是为了让基本类型值可以从它们的构造函数的prototype上获得方法。</p><h1 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h1><p>下面例子来说明包装类：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">var</span> b=  <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;字符串&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>)</span><br><span class="line"> <span class="keyword">var</span> d = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a) <span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(b)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b)<span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(c)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> c)<span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(a.__proto__ === <span class="built_in">Number</span>.prototype)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>下面是运行的结果，可以看到，typeof的结果是一个对象，输出的是类型的原型链上有toFixed、toString等等方法，这也是我们为什么能调用方法的原因。</p><p>PrimitiveValue是原始值。</p><p>new出来的值是可以参与计算的。</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211117131123.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>Number()、String()和Boolean()的实例都是Object类型，它们的primitiveValue属性存储它们的本身值</li><li>new出来的基本数据类型值能参与计算</li><li>包装类的目的就是为了让基本数据类型可以从它们的构造函数的prototype(原型)上获得方法。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录JS的包装类对象&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="包装类" scheme="https://www.frontblog.top/tags/%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>JS的原型</title>
    <link href="https://www.frontblog.top/article/6f0dd71.html"/>
    <id>https://www.frontblog.top/article/6f0dd71.html</id>
    <published>2021-11-16T07:52:42.000Z</published>
    <updated>2021-11-17T10:18:14.974Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录Javascript中原型、原型链和继承等相关知识。</p><h1 id="什么是原型"><a href="#什么是原型" class="headerlink" title="什么是原型"></a>什么是原型</h1><p>任何函数都有prototype属性，这个属性就是原型。prototype属性值是一个对象，默认拥有constructor属性，指回函数本身。</p><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Fun.prototype);</span><br><span class="line"><span class="built_in">console</span>.log(Fun.prototype.constructor === Fun); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211116205125.png"></p><p>普通调用函数的原型没有作用，但是对于构造函数却大有作用。</p><h1 id="构造函数的原型是实例的原型"><a href="#构造函数的原型是实例的原型" class="headerlink" title="构造函数的原型是实例的原型"></a>构造函数的原型是实例的原型</h1><p>构造函数的原型是实例的原型。</p><p>怎么理解这话？来看下面例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">Fun.prototype.getAge = <span class="string">&#x27;1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f - <span class="keyword">new</span> Fun(<span class="number">12</span>)</span><br><span class="line">f.getAge()<span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>我们并没有在构造函数添加getName方法，但是我们的实例却可以调用并输出，所以说明实例的原型是指向构造函数的原型的。</p><p>实例打点调用原型的属性和方法就是“原型链查找”</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211116210729.png"></p><h1 id="hasOwnProperty方法"><a href="#hasOwnProperty方法" class="headerlink" title="hasOwnProperty方法"></a>hasOwnProperty方法</h1><p>hasOwnProperty方法可以检测对象是否”真正自己拥有”某属性或者方法，也就是检测是不是原型上的</p><h1 id="in方法"><a href="#in方法" class="headerlink" title="in方法"></a>in方法</h1><p>in方法检测某个属性或者方法是否可以被对象方法。</p><h1 id="构造函数原型绑定方法"><a href="#构造函数原型绑定方法" class="headerlink" title="构造函数原型绑定方法"></a>构造函数原型绑定方法</h1><p>能在原型上绑定属性，当然也能绑定方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">Fun.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f - <span class="keyword">new</span> Fun(<span class="number">12</span>)</span><br><span class="line">f.getName()<span class="comment">//12</span></span><br><span class="line"><span class="keyword">var</span> f1 = <span class="keyword">new</span> Fun(<span class="number">1</span>)</span><br><span class="line">f1.getName()<span class="comment">//1</span></span><br></pre></td></tr></table></figure><ul><li>这里的prototype里面的this指向的是Fun这个函数的空对象。</li></ul><p>这样写的好处在于，不会每new一个对象 ，都会去绑定方法，而是直接使用构造函数的原型里面的方法，这样就提高了性能。当然如果想去定义一个同名的，但是具有个人特色的方法，可以在实例上直接添加方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">Fun.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f - <span class="keyword">new</span> Fun(<span class="number">12</span>)</span><br><span class="line">f.getName()<span class="comment">//12</span></span><br><span class="line"><span class="keyword">var</span> f1 - <span class="keyword">new</span> Fun(<span class="number">1</span>)</span><br><span class="line">f1.getName=&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;this is age&#x27;</span>+age)</span><br><span class="line">&#125;</span><br><span class="line">f1.getName()<span class="comment">//this is age 1</span></span><br></pre></td></tr></table></figure><h1 id="原型链的终点"><a href="#原型链的终点" class="headerlink" title="原型链的终点"></a>原型链的终点</h1><p>我们函数的原型并不是原型的终点，原型的终点是Object。这也是为什么我们能调用hasOwnProperty和in方法，因为在Object这个对象的原型上绑定了这些方法。</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211117104528.png"></p><p>数组的原型：</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211117105327.png"></p><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>实现继承的本质就是通过继承原型链来实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.name = name;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    User.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;Hello：&#x27;</span> + <span class="built_in">this</span>.name);</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">User1</span>(<span class="params">name</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.name = name;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//实现继承的关键代码，把一个类的prototype指向另外的类</span></span></span><br><span class="line"><span class="javascript">    User1.prototype = <span class="keyword">new</span> User();</span></span><br><span class="line"><span class="javascript">      </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> u = <span class="keyword">new</span> User(<span class="string">&#x27;张三&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> u1 = <span class="keyword">new</span> User1(<span class="string">&#x27;测试&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    u.say();</span></span><br><span class="line"><span class="javascript">    u1.say();</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211117105825.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录Javascript中原型、原型链和继承等相关知识。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="原型" scheme="https://www.frontblog.top/tags/%E5%8E%9F%E5%9E%8B/"/>
    
    <category term="继承" scheme="https://www.frontblog.top/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>JS的构造函数</title>
    <link href="https://www.frontblog.top/article/6c46e40.html"/>
    <id>https://www.frontblog.top/article/6c46e40.html</id>
    <published>2021-11-15T09:00:42.000Z</published>
    <updated>2021-11-16T14:37:59.188Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录JS的构造函数。</p><p>构造函数时通过new一个函数，那么这个函数就是构造函数，下面这段代码说明构造函数和普通函数的区别</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name, age</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.name = name;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.age = age;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">User1</span>(<span class="params">name, age</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: name,</span></span><br><span class="line"><span class="javascript">        <span class="attr">age</span>: age,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> u = <span class="keyword">new</span> User(<span class="string">&#x27;张三&#x27;</span>, <span class="number">23</span>); <span class="comment">//构造函数</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> u1 = <span class="keyword">new</span> User(<span class="string">&#x27;李四&#x27;</span>, <span class="number">13</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(u);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(u1);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(User1(<span class="string">&#x27;王五&#x27;</span>, <span class="number">13</span>)); <span class="comment">// 普通函数</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(User1(<span class="string">&#x27;法外狂徒&#x27;</span>, <span class="number">23</span>));</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>构造函数会自动返回一个对象，而普通调用函数就需要手写返回对象。</li></ul><p>接下来我们分析构造函数返回的值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.a = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> obj = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&#x27;ZS&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> obj;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> u = <span class="keyword">new</span> User();</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(u);<span class="comment">//&#123;name:&#x27;ZS&#x27;&#125;</span></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>return的是对象，那么返回就是这个对象</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.a = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> b = <span class="number">3</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> obj = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&#x27;ZS&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> b;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> u = <span class="keyword">new</span> User();</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(u);<span class="comment">//&#123;a:1&#125;</span></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> b = <span class="number">3</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> obj = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&#x27;ZS&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> b;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> u = <span class="keyword">new</span> User();</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(u);<span class="comment">//&#123;&#125;</span></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> b = -<span class="number">3</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> obj = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&#x27;ZS&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> b;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> u = <span class="keyword">new</span> User();</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(u);<span class="comment">//&#123;&#125;</span></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>return的是数值，那么返回就是this这个对象，</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> arr = [<span class="number">12</span>, <span class="number">34</span>];</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> obj = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&#x27;ZS&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> arr;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> u = <span class="keyword">new</span> User();</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(u);<span class="comment">//[12,34]</span></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>return的是数值，那么返回就是这个数组。</li></ul><p>总结：如果return的是引用类型值，那么返回的就是引用类型，如果return基础类型的，那就是返回this对象</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文记录JS的构造函数。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="构造函数" scheme="https://www.frontblog.top/tags/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
</feed>
