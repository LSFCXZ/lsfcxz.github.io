<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大前端_LSF</title>
  
  <subtitle>斯是陋室，为吾德馨</subtitle>
  <link href="https://www.frontblog.top/atom.xml" rel="self"/>
  
  <link href="https://www.frontblog.top/"/>
  <updated>2021-11-07T04:27:59.704Z</updated>
  <id>https://www.frontblog.top/</id>
  
  <author>
    <name>const name=&quot;LSF&quot;</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于FRP实现内网穿透</title>
    <link href="https://www.frontblog.top/article/9ba7e21b.html"/>
    <id>https://www.frontblog.top/article/9ba7e21b.html</id>
    <published>2021-11-06T08:52:23.000Z</published>
    <updated>2021-11-07T04:27:59.704Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录自己怎么实现内网穿透及在这个过程遇到的问题。内网穿透方案适合一些小场景下使用，比如测试的api，自己的静态博客，因为测试下来发现有许多问题。</p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>官网：</p><blockquote><p><code>FRP</code>：<a href="https://gofrp.org/">https://gofrp.org/</a><br><code>acme.sh</code> :<a href="https://github.com/acmesh-official/acme.sh">https://github.com/acmesh-official/acme.sh</a><br><code>dockerHub</code>: <a href="https://registry.hub.docker.com/">https://registry.hub.docker.com/</a></p></blockquote><p>主要思路是：服务器使用Docker方式安装<code>FRP</code>，本地运行<code>frpc</code>，在服务器申请证书，下载到本地，供<code>https</code>使用</p><p><code>FPR</code>分为服务端和客户端，服务端当然是放在服务器使用，客户端当然就是放本地使用，两者之间是通过一个端口号连接通讯的，不管本地想暴露多少端口，而服务端则监听443端口，数据走向是这样的：用户-&gt;域名-&gt;DNS解析-&gt;IP地址-&gt;FRP443端口-&gt;7000通讯端口-&gt;本地-&gt;本地端口，通过这样实现内网的穿透。</p><h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><p>简单4步安装：</p><ol><li><p>安装所需的软件包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils \</span><br><span class="line"> device-mapper-persistent-data \</span><br><span class="line"> lvm2</span><br></pre></td></tr></table></figure></li><li><p>设置阿里云仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li><li><p>安装 最新Docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li><li><p>启动docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure></li></ol><p>docker换源加速</p><p>使用<code>vi /etc/docker/daemon.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://registry.docker-cn.com&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>docker-compose安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p>如果下载过慢，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p>安装好后记得给执行权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p>至此，我们docker环境就已经安装完成。</p><h1 id="配置证书acme-sh"><a href="#配置证书acme-sh" class="headerlink" title="配置证书acme.sh"></a>配置证书acme.sh</h1><p>在服务器安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://get.acme.sh | sh</span><br></pre></td></tr></table></figure><p>提示：<code>Install success!</code>，即安装成功。退出再登录服务器，输入acme.sh测试是否可用</p><p>根据DNS服务器不同生成证书，这里采用DNSAPi的方式：</p><p><a href="https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert">https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert</a></p><p><a href="https://github.com/acmesh-official/acme.sh/tree/master/dnsapi">https://github.com/acmesh-official/acme.sh/tree/master/dnsapi</a></p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211106172842.png"></p><p>参考文档：<a href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi">https://github.com/acmesh-official/acme.sh/wiki/dnsapi</a></p><p>是什么DNS服务器参考上面文档即可。这里不建议使用阿里云的DNS，有时候会有莫名奇妙的问题。</p><p>这里举例腾讯的DNSPROD:</p><p>找到我的-&gt;API密钥-&gt;DNSPod Token-&gt;新建,创建后保存自己的ID和Token，</p><p>在服务器输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export DP_Id=&quot;ID&quot;</span><br><span class="line">export DP_Key=&quot;Token&quot;</span><br></pre></td></tr></table></figure><p>这里是特定的指令，也就是每个服务商的指令是不一样的，所以参考上面的文档连接，*代表所有子域名都去申请证书</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --issue --dns dns_dp -d baidu.com -d *.baidu.com</span><br></pre></td></tr></table></figure><p>如果遇到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Sat Nov  6 17:56:15 CST 2021] acme.sh is using ZeroSSL as default CA now.</span><br><span class="line">[Sat Nov  6 17:56:15 CST 2021] Please update your account with an email address first.</span><br><span class="line">[Sat Nov  6 17:56:15 CST 2021] acme.sh --register-account -m my@example.com</span><br><span class="line">[Sat Nov  6 17:56:15 CST 2021] See: https://github.com/acmesh-official/acme.sh/wiki/ZeroSSL.com-CA</span><br></pre></td></tr></table></figure><p>则使用该命令更新设置邮箱，具体原因不展开讲</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --register-account -m my@example.com</span><br></pre></td></tr></table></figure><p>至此证书申请完成。</p><h1 id="待完成…"><a href="#待完成…" class="headerlink" title="待完成…"></a>待完成…</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录自己怎么实现内网穿透及在这个过程遇到的问题。内网穿透方案适合一些小场景下使用，比如测试的api，自己的静态博客，因为测试下来发现有许多问题。&lt;/p&gt;</summary>
    
    
    
    <category term="开发技巧" scheme="https://www.frontblog.top/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="内网穿透" scheme="https://www.frontblog.top/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>SSH免密钥连接服务器</title>
    <link href="https://www.frontblog.top/article/f85a2d78.html"/>
    <id>https://www.frontblog.top/article/f85a2d78.html</id>
    <published>2021-11-06T07:45:55.000Z</published>
    <updated>2021-11-07T04:27:59.701Z</updated>
    
    <content type="html"><![CDATA[<p>一般登录服务器通过SSH方式，每次都是需要密码，非常繁琐，本文介绍一种只需要<code>ssh+别名</code>就能连接服务器的方法。</p><h1 id="什么是SSH"><a href="#什么是SSH" class="headerlink" title="什么是SSH"></a>什么是SSH</h1><p>SSH是一种网络协议，用于计算机之间的加密登录。如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露，默认的端口是22</p><h1 id="怎么连接"><a href="#怎么连接" class="headerlink" title="怎么连接"></a>怎么连接</h1><p>通过<code>ssh root@IP</code>回车，输入密码就可以连接到，如果默认端口修改了就需要加-p参数，这在后面修改端口号讲。</p><h1 id="修改主机名字"><a href="#修改主机名字" class="headerlink" title="修改主机名字"></a>修改主机名字</h1><p>查询：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/hostname</span><br></pre></td></tr></table></figure><p>修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/hostname</span><br></pre></td></tr></table></figure><p>修改按<code>i</code>进入编辑，按<code>esc</code>退出编辑，<code>:wq</code>退出并保存</p><h1 id="修改端口"><a href="#修改端口" class="headerlink" title="修改端口"></a>修改端口</h1><p>查询默认监听的端口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anlp |grep sshd</span><br></pre></td></tr></table></figure><p>修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>按<code>i</code>进入编辑，打开prot的注释，修改你想要的端口，我们可以看到上面的一段话，如果你修改端口号，需要执行：<code>semanage port -a -t ssh_port_t -p tcp #PORTNUMBER</code>  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># If you want to change the port on a SELinux system, you have to tell</span><br><span class="line"># SELinux about this change.</span><br><span class="line"># semanage port -a -t ssh_port_t -p tcp #PORTNUMBER</span><br></pre></td></tr></table></figure><p>执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">semanage port -a -t ssh_port_t -p tcp #你修改的端口</span><br></pre></td></tr></table></figure><p>如果提示<code>-bash: semanage: command not found</code>，则执行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum whatprovides semanage</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y policycoreutils-python</span><br></pre></td></tr></table></figure><p>再次执行刚才的命令，没有返回任何信息，通过以下命令查找是否添加成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">semanage port -l | grep ssh</span><br></pre></td></tr></table></figure><p>最后就是重启一下ssh:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure><p>返回<code>Redirecting to /bin/systemctl restart sshd.service</code>即是成功，</p><p>通过查找默认端口，或者重新连接服务器确认是否成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 你修改端口号 root@IP</span><br></pre></td></tr></table></figure><p>需要注意的是，在服务云商店那里是需要 开放端口的，否则连接不上。</p><h1 id="免密登陆"><a href="#免密登陆" class="headerlink" title="免密登陆"></a>免密登陆</h1><p>首先需要在本地生成ssh证书，在本地计算机，命令如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>一直回车即可，在win10上，找到目录：<code>C:\Users\自己用户名\.ssh</code></p><p>打开，没有则新建config文件，不要有后缀名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host #别名</span><br><span class="line">  Port #你修改后的端口</span><br><span class="line">  HostName #IP</span><br><span class="line">  User root#用户名</span><br><span class="line">  IdentityFile #密钥地址，要包含文件名</span><br><span class="line">  IdentitiesOnly yes</span><br></pre></td></tr></table></figure><p>在服务器上通过<code>cd ~/.ssh</code>，<code>ls</code>,查看有没有<code>authorized_keys</code>文件，有则编辑，没有则新建。</p><p>新建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.ssh</span><br><span class="line">vi authorized_keys</span><br></pre></td></tr></table></figure><p>把本地计算机的pub文件复制进去，再次通过<code>ssh 别名</code>连接服务器成功。</p><p>至此，已经完成服务器的免密登录</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一般登录服务器通过SSH方式，每次都是需要密码，非常繁琐，本文介绍一种只需要&lt;code&gt;ssh+别名&lt;/code&gt;就能连接服务器的方法。&lt;/p&gt;</summary>
    
    
    
    <category term="开发技巧" scheme="https://www.frontblog.top/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="效率" scheme="https://www.frontblog.top/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的二维数组</title>
    <link href="https://www.frontblog.top/article/7f0bfd33.html"/>
    <id>https://www.frontblog.top/article/7f0bfd33.html</id>
    <published>2021-11-05T12:57:59.000Z</published>
    <updated>2021-11-06T07:15:58.834Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍JavaScript的二维数组。</p><h1 id="什么是二维数组？"><a href="#什么是二维数组？" class="headerlink" title="什么是二维数组？"></a>什么是二维数组？</h1><p>以数组作为数组元素的数组，即“数组中的数组”，eg: <code>var arr = [[12,,15,36],[56,98,45]]</code></p><h1 id="如何遍历数组？"><a href="#如何遍历数组？" class="headerlink" title="如何遍历数组？"></a>如何遍历数组？</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">    [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line">          [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],</span><br><span class="line">    [<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]</span><br><span class="line">          ]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr.lenght;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(arr[i][j])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍JavaScript的二维数组。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript的冒泡排序</title>
    <link href="https://www.frontblog.top/article/9e8798c2.html"/>
    <id>https://www.frontblog.top/article/9e8798c2.html</id>
    <published>2021-11-04T12:47:26.000Z</published>
    <updated>2021-11-05T12:59:55.643Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍算法排序之一的冒泡排序</p><p>冒泡排序的核心思路是一趟一趟地进行多次项的两两比较，每次都会把最小的元素拍好位置，如同水中的气泡上浮一样</p><p>下面是一个例子：</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211105084801.png"></p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211105084946.png"></p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211105085051.png"></p><h1 id="公式："><a href="#公式：" class="headerlink" title="公式："></a>公式：</h1><p>n个数字，排序的趟数是n-1趟，比较次数是n(n-1)/2</p><h1 id="基本算法"><a href="#基本算法" class="headerlink" title="基本算法"></a>基本算法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 倒数开始，最后一个跟前一个比，如果小于，那么互换位置</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>];</span><br><span class="line"><span class="comment">//比较趟数-&gt;4</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">//j=4;</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = arr.length - <span class="number">1</span>; j &gt;= i; j--) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;arr[j]-&gt;&#x27;</span> + arr[j]);</span><br><span class="line">    <span class="built_in">console</span>.log(arr[j - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (arr[j] &lt; arr[j - <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">      arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">      arr[j - <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;----------------&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍算法排序之一的冒泡排序&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="算法" scheme="https://www.frontblog.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript数组相关算法</title>
    <link href="https://www.frontblog.top/article/d514bee5.html"/>
    <id>https://www.frontblog.top/article/d514bee5.html</id>
    <published>2021-11-04T09:03:21.000Z</published>
    <updated>2021-11-05T12:59:55.639Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍数组相关的算法题目。</p><h1 id="问题：遍历数组，求数组总和、平均数"><a href="#问题：遍历数组，求数组总和、平均数" class="headerlink" title="问题：遍历数组，求数组总和、平均数"></a>问题：遍历数组，求数组总和、平均数</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">22</span>,<span class="number">56</span>,<span class="number">45</span>,<span class="number">34</span>]</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr.lenght;i++)&#123;</span><br><span class="line">    sum = sum + arr[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum)</span><br><span class="line"><span class="built_in">console</span>.log(sum/arr.lenght)</span><br></pre></td></tr></table></figure><h1 id="问题：求数组的最大、最小值"><a href="#问题：求数组的最大、最小值" class="headerlink" title="问题：求数组的最大、最小值"></a>问题：求数组的最大、最小值</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scoreArr = [<span class="number">56</span>,<span class="number">8</span>,<span class="number">98</span>,<span class="number">25</span>,<span class="number">31</span>,<span class="number">555</span>,<span class="number">26</span>]</span><br><span class="line"><span class="keyword">var</span> max = scoreArr[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">var</span> min = scoreArr[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i&lt;scoreArr.lenght;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(scoreArr[i]&gt;max)&#123;</span><br><span class="line">        max = scoreArr[i]</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(scoreArr[i]&lt;min)&#123;</span><br><span class="line">        min = scoreArr[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(max,min)</span><br></pre></td></tr></table></figure><h1 id="问题：数组去重"><a href="#问题：数组去重" class="headerlink" title="问题：数组去重"></a>问题：数组去重</h1><p>思路：准备空数组，遍历原数组，如果遍历到的项不在结果数组中，则推入结果数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = []</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">56</span>,<span class="number">8</span>,<span class="number">98</span>,<span class="number">25</span>,<span class="number">31</span>,<span class="number">555</span>,<span class="number">26</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr.lenght;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(result.includes(arr[i]) === <span class="literal">false</span> )&#123;</span><br><span class="line">        result.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br></pre></td></tr></table></figure><h1 id="问题：随机从原数组中取3项"><a href="#问题：随机从原数组中取3项" class="headerlink" title="问题：随机从原数组中取3项"></a>问题：随机从原数组中取3项</h1><p>思路：准备一个空结果数组，遍历原数组，随机选择一项，推入结果数组，为了不重复推入同一个项，可以将其删除，但是会改变原来数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = []</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">56</span>,<span class="number">8</span>,<span class="number">98</span>,<span class="number">25</span>,<span class="number">31</span>,<span class="number">555</span>,<span class="number">26</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random * arr.lenght);</span><br><span class="line">    result.push(arr[n]);</span><br><span class="line">    arr.splice(n,<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍数组相关的算法题目。&lt;/p&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://www.frontblog.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的循环判断算法</title>
    <link href="https://www.frontblog.top/article/badcd860.html"/>
    <id>https://www.frontblog.top/article/badcd860.html</id>
    <published>2021-11-01T12:17:03.000Z</published>
    <updated>2021-11-02T15:16:36.437Z</updated>
    
    <content type="html"><![CDATA[<p>算法算是在编程语言中较为独立出来的知识，一个问题可能有好几种解法，本文主要是循环语句的算法。通过问题-&gt;分析-&gt;代码的方式书写。</p><h1 id="问题：判断用户输入的数字是否为水仙花数？"><a href="#问题：判断用户输入的数字是否为水仙花数？" class="headerlink" title="问题：判断用户输入的数字是否为水仙花数？"></a>问题：判断用户输入的数字是否为水仙花数？</h1><p>水仙花数：是指一个 3 位数，它的每个位上的数字的立方之和等于它本身。例如：1^3 + 5^3+ 3^3 = 153</p><p><strong>分析</strong>：</p><p>既然是每个数位的立方和相加等于本身，那么重点是怎么得到这3位数的每一位数，然后让每个数的立方相加起来，那么就能判断它是否等于本身，是的话那他就是水仙花数，否则不是。</p><p><strong>解法一：</strong>既然是拆位，我们可以使用字符串的方法去获取每个数值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = prompt(<span class="string">&#x27;请输入一个3位数&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> a = n.charAt(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> b = n.charAt(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">var</span> c = n.charAt(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li>prompt输入的是字符串，所以可以直接使用<code>charAt()</code>方法获取值</li><li>接下来，就是去将每个数乘以3，然后相加，然后判断是否等于本身</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">Math</span>.pow(a,<span class="number">3</span>)+<span class="built_in">Math</span>.pow(b,<span class="number">3</span>)+<span class="built_in">Math</span>.pow(c,<span class="number">3</span>) == n)&#123;</span><br><span class="line">    alert(<span class="string">&#x27;是水仙花数&#x27;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     alert(<span class="string">&#x27;不是水仙花数&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>程序到这里已经基本完成，但是有一点需要注意和改进的地方，需要注意的是：<code>Math.pow(a,3)</code>这个语句中，a是去做了隐式的转换，也就是它的类型是Number，而此时n是String，两个是弱对比，使用全等那么这个程序将永远为false，改进的是对用户输入的数字进行非法的数字进行拦截，因为我们规定是3位数，用户可不一定输入3位数，综合以上，下面是改进代码。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = prompt(<span class="string">&#x27;请输入一个3位数&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isNaN</span>(n) &amp;&amp; n&gt;=<span class="number">100</span> &amp;&amp; n&lt;= <span class="number">999</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a = n.charAt(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> b = n.charAt(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">var</span> c = n.charAt(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">var</span> d = <span class="built_in">Number</span>(n)</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Math</span>.pow(a,<span class="number">3</span>)+<span class="built_in">Math</span>.pow(b,<span class="number">3</span>)+<span class="built_in">Math</span>.pow(c,<span class="number">3</span>) === d)&#123;</span><br><span class="line">    alert(<span class="string">&#x27;是水仙花数&#x27;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     alert(<span class="string">&#x27;不是水仙花数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;请输入合法数字&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面的代码嵌套了一层判断，主要是去拦截用户的非法请求，减少程序的出错率，但是还有继续优化的地方，比如：用户输入错误后应该可以让它继续输入其他，输入正确则退出程序，下面是优化后的代码。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> n = prompt(<span class="string">&#x27;请输入一个3位数&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isNaN</span>(n) &amp;&amp; n&gt;=<span class="number">100</span> &amp;&amp; n&lt;= <span class="number">999</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a = n.charAt(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> b = n.charAt(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">var</span> c = n.charAt(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">var</span> d = <span class="built_in">Number</span>(n)</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Math</span>.pow(a,<span class="number">3</span>)+<span class="built_in">Math</span>.pow(b,<span class="number">3</span>)+<span class="built_in">Math</span>.pow(c,<span class="number">3</span>) === d)&#123;</span><br><span class="line">    alert(<span class="string">&#x27;是水仙花数&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     alert(<span class="string">&#x27;不是水仙花数&#x27;</span>)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;请输入合法数字&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这样一来，当用户输入非法数值时候可以重新输入，而输入正确，则显示结果并且结束程序。</li></ul><p><strong>解法二：</strong>我们可以使用数学的方式得到这三位数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">parseInt</span>(n / <span class="number">100</span>); <span class="comment">//得到百位数</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">parseInt</span>((n / <span class="number">10</span>) % <span class="number">10</span>); <span class="comment">//得到十位数</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="built_in">parseInt</span>(n % <span class="number">10</span>); <span class="comment">//得到个位数</span></span><br></pre></td></tr></table></figure><ul><li>这个是结合了取余的方法，在结合解法一，最终代码如下：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> n = <span class="built_in">Number</span>(prompt(<span class="string">&#x27;请输入一个3位数&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isNaN</span>(n) &amp;&amp; n&gt;=<span class="number">100</span> &amp;&amp; n&lt;= <span class="number">999</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">parseInt</span>(n / <span class="number">100</span>); <span class="comment">//得到百位数</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">parseInt</span>((n / <span class="number">10</span>) % <span class="number">10</span>); <span class="comment">//得到十位数</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="built_in">parseInt</span>(n % <span class="number">10</span>); <span class="comment">//得到个位数</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Math</span>.pow(a,<span class="number">3</span>)+<span class="built_in">Math</span>.pow(b,<span class="number">3</span>)+<span class="built_in">Math</span>.pow(c,<span class="number">3</span>) === n)&#123;</span><br><span class="line">    alert(<span class="string">&#x27;是水仙花数&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     alert(<span class="string">&#x27;不是水仙花数&#x27;</span>)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;请输入合法数字&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="问题：计算1-2-3-……-99-100的和"><a href="#问题：计算1-2-3-……-99-100的和" class="headerlink" title="问题：计算1+2+3+……+99+100的和"></a>问题：计算1+2+3+……+99+100的和</h1><p>分析：每次相加都是在原来基础上加1，这个时候我们需要一个变量来存储他们的和。思路是：第一个是1，那么把1存起来，然后第二个数是2，再和之前的存起来，这就达到一个不断累加的效果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">    sum = sum +i;<span class="comment">//0+1、1+2、3+3...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum)<span class="comment">//5050</span></span><br></pre></td></tr></table></figure><ul><li>以上涉及到的是一个累加的变量，我们去定义了一个变量，把和不断的累加起来，得到最终的结果，除了使用for，我们还可以使用while循环</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">sum = sum+i;</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum)<span class="comment">//5050</span></span><br></pre></td></tr></table></figure><h1 id="问题：1-100中哪个数字除以3余1、除以4余2，除以5余3？"><a href="#问题：1-100中哪个数字除以3余1、除以4余2，除以5余3？" class="headerlink" title="问题：1~100中哪个数字除以3余1、除以4余2，除以5余3？"></a>问题：1~100中哪个数字除以3余1、除以4余2，除以5余3？</h1><p>分析：这个题目应该想到的是穷举法，我把每个数去判断一下，不就找出来了吗</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">1</span> &amp;&amp; i % <span class="number">4</span> == <span class="number">2</span> &amp;&amp; i % <span class="number">5</span> == <span class="number">3</span>)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="问题：寻找最小的满足n²-gt-456789的整数n"><a href="#问题：寻找最小的满足n²-gt-456789的整数n" class="headerlink" title="问题：寻找最小的满足n²&gt;456789的整数n"></a>问题：寻找最小的满足n²&gt;456789的整数n</h1><p>分析：这里需要注意的是最小满足，即找到n²大于456789的最小数，比如：1²是否大于456789，2²是否大于456789，以此类推。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span>(n*n&lt;=<span class="number">456789</span>)&#123;</span><br><span class="line">    n++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(n)<span class="comment">//676</span></span><br></pre></td></tr></table></figure><h1 id="问题：小兔子拔萝卜，第一天拔一个，第二天拔两个，第几天可以拔完500个"><a href="#问题：小兔子拔萝卜，第一天拔一个，第二天拔两个，第几天可以拔完500个" class="headerlink" title="问题：小兔子拔萝卜，第一天拔一个，第二天拔两个，第几天可以拔完500个"></a>问题：小兔子拔萝卜，第一天拔一个，第二天拔两个，第几天可以拔完500个</h1><p>分析:这其实还是一个自增问题，什么时候拔完500个，也就是<strong>累计超过500</strong>，那么判断条件就出来了，接下来这个天数是自增一，而且天数对应着当天拔萝卜的数量，所以自增一，思路是这样：第一天拔一个，好，现在存起来，第二天拔两个，存起来，直到这个存起来的数大于等于500的时候，我们就知道是第几天了，也就得到这个问题的解，另外，这题目<strong>和上面的1加到100有类似地方</strong>，只不过判断的条件换了，换成了<strong>对比累加的变量</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;<span class="comment">//这里的i有连层代表，一个是天数，一个是当天拔萝卜大的数量</span></span><br><span class="line"><span class="keyword">while</span>(sum &lt;=<span class="number">500</span>)&#123;</span><br><span class="line">    sum = sum +i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i)<span class="comment">//33</span></span><br></pre></td></tr></table></figure><ul><li>但是以上代码是存在问题的，我们i++是先使用后加一，所以导致后面输出的会再次加一，导致多了一次的天数解决办法就是去减一，这种出一情况往往就是要输出那个自增的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;<span class="comment">//这里的i有连层代表，一个是天数，一个是当天拔萝卜大的数量</span></span><br><span class="line"><span class="keyword">while</span>(sum &lt;=<span class="number">500</span>)&#123;</span><br><span class="line">    sum = sum +i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i - <span class="number">1</span>)<span class="comment">//32</span></span><br></pre></td></tr></table></figure><h1 id="问题：有由用户输入数字n，求算术的值"><a href="#问题：有由用户输入数字n，求算术的值" class="headerlink" title="问题：有由用户输入数字n，求算术的值"></a>问题：有由用户输入数字n，求算术的值</h1><p>这个算式如下：</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211101133126.png"></p><p>分析：我们需要知道这题目是要干什么，这题目其实是把这些分数相加在一起，规律就是，分母是从2开始，每次自增1，直到n结束，分子则是比分母+1,</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> zi = <span class="number">2</span>;<span class="comment">//定义分子的初值</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;<span class="comment">//定义累加数值</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">5</span></span><br><span class="line"><span class="comment">//只要用户输入的数字大于分子，那么就循环累加</span></span><br><span class="line"><span class="keyword">while</span>(zi &lt;= n)&#123;</span><br><span class="line">    sum = sum + (zi+<span class="number">1</span>)/ zi;</span><br><span class="line">    zi++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>题目写到这里算是基本完成，但是我们需要注意一点，分数得到的数值往往会是小数，而JavaScript采用了IEEE754二进制浮点数算术标准,存在精度丢失情况，我们使用toFix()解决，保留小数点几位。除了使用while的方式，其实还可以使用for循环</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> zi = <span class="number">2</span>;<span class="comment">//定义分子的初值</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;<span class="comment">//定义累加数值</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">5</span></span><br><span class="line"><span class="comment">//只要用户输入的数字大于分子，那么就循环累加</span></span><br><span class="line"><span class="keyword">while</span>(zi &lt;= n)&#123;</span><br><span class="line">    sum = sum + (zi+<span class="number">1</span>)/ zi;</span><br><span class="line">    zi++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum.toFix(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>for循环解法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> n = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">sum = (i + <span class="number">1</span>) / i;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum.toFixed(<span class="number">2</span>));</span><br></pre></td></tr></table></figure><ul><li>for这种解法看着更加清爽一些和易于理解。</li></ul><h1 id="问题：求n的阶乘"><a href="#问题：求n的阶乘" class="headerlink" title="问题：求n的阶乘"></a>问题：求n的阶乘</h1><p>分析：阶乘是什么？3的阶乘是<code>1*2*3</code>，那么就是每次递增1，只要是小于等于就去循环累乘。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> n = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = n;i&lt;=n;i++)&#123;</span><br><span class="line">    result = result *i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><h1 id="问题：圆周率可以由下面的莱布尼次级数公式计算出来，请由用户输入参数n计算圆周率"><a href="#问题：圆周率可以由下面的莱布尼次级数公式计算出来，请由用户输入参数n计算圆周率" class="headerlink" title="问题：圆周率可以由下面的莱布尼次级数公式计算出来，请由用户输入参数n计算圆周率"></a>问题：圆周率可以由下面的莱布尼次级数公式计算出来，请由用户输入参数n计算圆周率</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">var</span> item = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">var</span> n = <span class="built_in">Number</span>(prompt(<span class="string">&#x27;请输入数字&#x27;</span>));</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">     item *= i / (<span class="number">2</span> * i + <span class="number">1</span>);</span><br><span class="line">     sum += item;</span><br><span class="line">   &#125;</span><br><span class="line">   alert((<span class="number">1</span> + sum) * <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h1 id="问题：寻找1-100的所有质数"><a href="#问题：寻找1-100的所有质数" class="headerlink" title="问题：寻找1~100的所有质数"></a>问题：寻找1~100的所有质数</h1><p>分析：只能够被1和它本身整除，最小质数2，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">outer:<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">2</span>;j&lt;i;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i%j == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span> outer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>outer是for的别名，continue是跳到指定的for循环。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;算法算是在编程语言中较为独立出来的知识，一个问题可能有好几种解法，本文主要是循环语句的算法。通过问题-&amp;gt;分析-&amp;gt;代码的方式书写。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="算法" scheme="https://www.frontblog.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的数组</title>
    <link href="https://www.frontblog.top/article/ae208be1.html"/>
    <id>https://www.frontblog.top/article/ae208be1.html</id>
    <published>2021-11-01T10:31:56.000Z</published>
    <updated>2021-11-04T06:54:04.314Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍JavaScript的数组及数组的各种方法</p><h1 id="数组的简介与定义"><a href="#数组的简介与定义" class="headerlink" title="数组的简介与定义"></a>数组的简介与定义</h1><p><strong>什么是数组：</strong></p><p>数组（Array），用来<strong>存储一组相关的值</strong>，从而方便进行求和、计算平均数、逐项遍历等操作</p><p><strong>怎么定义数组：</strong></p><ul><li><p>使用数组字面量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ary = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure></li><li><p>使用Array构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)<span class="comment">//这样写有个缺点,既我想输入一个数字，其实只是去定义长度</span></span><br></pre></td></tr></table></figure></li><li><p>使用构造函数定义长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">4</span>)<span class="comment">//定义数组长度为4，值为undefined</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>访问数组项：</strong></p><p>通过下标访问，下标从0开始</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>])<span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>下标越界的时候，不会报错，会返回undefined，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">5</span>])<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p><strong>数组长度：</strong></p><p>数组也有长度，调用lenght属性，返回该数组的长度</p><p><strong>数组类型检测：</strong></p><p>数组用typeof检测结果是object，Array.isArray()方法可以用来检测数组</p><p><strong>更改数组项：</strong></p><p>数组并不是只读，我们可以修改其中任何项的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3,4,5]</span><br><span class="line">arr[2] = 6</span><br><span class="line">console.log(arr)//1,2,6,4,5</span><br></pre></td></tr></table></figure><p>但是如果创建一个超过数组下标，则中间的值为empty</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">arr[<span class="number">7</span>] = <span class="number">6</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//1,2,3,4,5,empty*2,6</span></span><br></pre></td></tr></table></figure><p><strong>数组遍历：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr.lenght;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组的常用方法"><a href="#数组的常用方法" class="headerlink" title="数组的常用方法"></a>数组的常用方法</h1><h2 id="push-方法"><a href="#push-方法" class="headerlink" title="push()方法"></a>push()方法</h2><p>在数组尾部插入新项：参数就是要插入的项，如果要插入多项，可以用逗号隔开，使用push()方法后，数组会立即改变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">arr.push(<span class="string">&#x27;50&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//1, 2, 3, 4, 5, &#x27;50&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>需要注意的是arr.push()返回的值不是新数组，而是新数组的长度。</li></ul><h2 id="pop-方法"><a href="#pop-方法" class="headerlink" title="pop()方法"></a>pop()方法</h2><p>在数组尾部删除一项：没有参数，只能删除一项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> a = arr.pop()</span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//1，2，3，4</span></span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//5</span></span><br></pre></td></tr></table></figure><ul><li>返回的值是被删除的项。</li></ul><h2 id="unshift-方法"><a href="#unshift-方法" class="headerlink" title="unshift()方法"></a>unshift()方法</h2><p>在数组头部插入新项：参数就是要插入的项，如果要插入多项，可以用逗号隔开，使用unshift()方法后，数组会立即改变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">arr.unshift(<span class="string">&#x27;50&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//&#x27;50&#x27;,1, 2, 3, 4, 5</span></span><br></pre></td></tr></table></figure><ul><li>需要注意的是arr.unshift()返回的值不是新数组，而是新数组的长度。</li></ul><h2 id="shift-方法"><a href="#shift-方法" class="headerlink" title="shift()方法"></a>shift()方法</h2><p>在数组头部删除一项：没有参数，只能删除一项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> a = arr.shift()</span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//2，3，4</span></span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//1</span></span><br></pre></td></tr></table></figure><ul><li>返回的值是被删除的项。</li></ul><h2 id="splice-方法"><a href="#splice-方法" class="headerlink" title="splice()方法"></a>splice()方法</h2><p>可以对数组的<strong>增删改</strong>，它的本质就是去改变数组，参数第一和第二位必须是整数。</p><blockquote><p><strong><code>splice()</code></strong> 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组。——MDN</p></blockquote><p><strong>替换数组：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.splice(<span class="number">3</span>, <span class="number">3</span>, <span class="string">&#x27;new&#x27;</span>, <span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[1, 2, 3, &#x27;new&#x27;, 6,7]</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//[4,5]</span></span><br></pre></td></tr></table></figure><ul><li>参数第一个代表：下标3；参数第二个参数代表：连续替换3个项；即：在<strong>下标3开始（包含下标3）</strong>，连续选择三个替换，可以看到，替换的超出原有的数组，即增加数组长度</li><li>返回值是被替换的值</li></ul><p><strong>插入指定位置项：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.splice(<span class="number">3</span>, <span class="number">0</span>, <span class="string">&#x27;new&#x27;</span>, <span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[1, 2, 3, &#x27;new&#x27;, 6, 7, 4, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//[]</span></span><br></pre></td></tr></table></figure><ul><li>把第二个参数改为0，即在<strong>下标的前面</strong>插入数据</li><li>因为是插入数据，返回值为空数组</li></ul><p><strong>删除指定位置项：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.splice(<span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//[4,5]</span></span><br></pre></td></tr></table></figure><ul><li>不写替换的值，则从下标3开始（包括下标3），连续2位删除</li><li>返回值是删除的值</li></ul><p>以下情况都不建议刻意书写，很容易掉坑，js是弱控制语言，所以并不会报错：</p><p>只有一个参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.splice(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[1, 2]</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//[3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>另外这种第二参数是非整数，会被值为0，变成添加，不过不建议这样写，<strong>第二参数是会被忽略的</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.splice(<span class="number">2</span>, <span class="string">&#x27;new&#x27;</span>, <span class="string">&#x27;old&#x27;</span>, <span class="string">&#x27;lsf&#x27;</span>, <span class="string">&#x27;cxz&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[1, 2, &#x27;old&#x27;, &#x27;lsf&#x27;, &#x27;cxz&#x27;, 3, 4, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//[]</span></span><br></pre></td></tr></table></figure><p>再看错误例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.splice(<span class="string">&#x27;new&#x27;</span>, <span class="string">&#x27;old&#x27;</span>);<span class="comment">//开始参数不是整数</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//1, 2, 3, 4, 5</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//[]</span></span><br></pre></td></tr></table></figure><h2 id="slice-方法"><a href="#slice-方法" class="headerlink" title="slice()方法"></a>slice()方法</h2><p>用来得到子数组，类似于字符串的slice方法，会返回<strong>从a下标开始，b下标结束（不包括b下标）的子串，a,b可以是负数，a，b必须是同时都是负数，否则得到空数组，表示倒数第几位数组项，a必须小于b，不会改变数组</strong></p><p><strong>正确规范的写法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.slice(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//[3,4,5]</span></span><br></pre></td></tr></table></figure><p>倒数获取：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.slice(<span class="number">2</span>,-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//[3,4]</span></span><br></pre></td></tr></table></figure><p><strong>下面是错误示范：</strong></p><p>很明显，下面例子中，获取的下标越界了，但是不会报错，也不会出现undefine，只会截取到数组结尾</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.slice(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//[3,4,5]</span></span><br></pre></td></tr></table></figure><p>不允许去写a&gt;b，否则获取不到，返回空数组，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.slice(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//[]</span></span><br></pre></td></tr></table></figure><p>第一参数如果是负数，第二参数就必须是负数，否则返回空数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.slice(-<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//[]</span></span><br></pre></td></tr></table></figure><h2 id="join-方法"><a href="#join-方法" class="headerlink" title="join()方法"></a>join()方法</h2><p>使数组转为字符串，<strong>参数表示以什么字符作为连接符，如果留空则默认以逗号分隔</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">22</span>,<span class="number">33</span>,<span class="number">555</span>]</span><br><span class="line">arr.join()<span class="comment">//&quot;22,33,555&quot;</span></span><br><span class="line">arr.join(<span class="string">&#x27;&#x27;</span>)<span class="comment">//&#x27;2233555&#x27;</span></span><br><span class="line">arr.join(<span class="string">&#x27;-&#x27;</span>)<span class="comment">//&quot;22-33-555&quot;</span></span><br><span class="line">arr.toString()<span class="comment">//&quot;22,33,555&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="split-方法"><a href="#split-方法" class="headerlink" title="split()方法"></a>split()方法</h2><p>使字符串转为数组，参数表示以什么字符拆分字符串，一般不留空，只留空字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abcdefg&#x27;</span></span><br><span class="line">str.split()<span class="comment">//[&#x27;abcdefg&#x27;]</span></span><br><span class="line">str.split(<span class="string">&#x27;&#x27;</span>)<span class="comment">//[&#x27;a&#x27; ,&#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;,&#x27;g&#x27;]</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&#x27;a-b-c-d-e-f-g&#x27;</span></span><br><span class="line">str.split(<span class="string">&#x27;-&#x27;</span>)<span class="comment">//[&#x27;a&#x27; ,&#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;,&#x27;g&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="concat-方法"><a href="#concat-方法" class="headerlink" title="concat()方法"></a>concat()方法</h2><p>合并多个数组。不会改变原数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr1 = [1,2,3,4,5];</span><br><span class="line">var arr2 = [6,7,8,9];</span><br><span class="line">var arr3 = [10,11,12];</span><br><span class="line">var arr = arr1.concat(arr2,arr3);</span><br><span class="line">console.log(arr)//[1,2,3,4,5,6,7,8,9,10,11,12]</span><br></pre></td></tr></table></figure><h2 id="reverse-方法"><a href="#reverse-方法" class="headerlink" title="reverse()方法"></a>reverse()方法</h2><p>将数组的全部项顺序置反，立即更改原来数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3]</span><br><span class="line">arr.reverse()//[3,2,1]</span><br></pre></td></tr></table></figure><h2 id="indexof-方法"><a href="#indexof-方法" class="headerlink" title="indexof()方法"></a>indexof()方法</h2><p>搜索数组中的元素，并返回该元素首次出现的下标，如果元素不存在，返回-1，参数是和数组的项是全等关系，也就是数组中有数字类型2，使用indexof查找字符串类型2，得到结果是-1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>]</span><br><span class="line">arr.indexof(<span class="number">3</span>)<span class="comment">//2</span></span><br></pre></td></tr></table></figure><h2 id="includes-方法"><a href="#includes-方法" class="headerlink" title="includes()方法"></a>includes()方法</h2><p>判断数组中是否存在一个指定的值，返回的是布尔值，参数也是和数组项时全等关系。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>]</span><br><span class="line">arr.includes(<span class="number">3</span>)<span class="comment">//true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍JavaScript的数组及数组的各种方法&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript随机函数的公式</title>
    <link href="https://www.frontblog.top/article/6556cfc2.html"/>
    <id>https://www.frontblog.top/article/6556cfc2.html</id>
    <published>2021-11-01T04:08:09.000Z</published>
    <updated>2021-11-01T10:34:15.926Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍JavaScript的随机函数的公式。</p><p>再JavaScript中，想获取随机函数需要使用<code>Math.random()</code>，该函数会返回0~1之间的小数，但是这不符合我们一般的使用，我们一般会给出一个区间，然后在该区间随机一个数：</p><p>得到[a,b]区间的整数：公式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span> (<span class="built_in">Math</span>.random() * (b-a+<span class="number">1</span>) ) + a</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍JavaScript的随机函数的公式。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript的判断和循环语句</title>
    <link href="https://www.frontblog.top/article/8bd1ac6e.html"/>
    <id>https://www.frontblog.top/article/8bd1ac6e.html</id>
    <published>2021-10-30T09:26:58.000Z</published>
    <updated>2021-11-03T00:47:24.236Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍JavaScript的判断语句和循环语句。</p><h1 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h1><p>if语句是最简单的条件语句，也称选择语句，它通常结合else一起使用，表示如果..就…否则…</p><p>if…else…一定会选择一条语句执行</p><p>if语句的执行块只有一条语句时，可以省略大括号，分号结尾</p><p>示例：判断闰年</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> year = <span class="built_in">Number</span>(prompt(<span class="string">&#x27;请输入年份&#x27;</span>));</span><br><span class="line"><span class="comment">//能被4整除且不能被100整除</span></span><br><span class="line"><span class="comment">//能被100整除也能被400整除</span></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) ||</span><br><span class="line">  (year % <span class="number">100</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">400</span> != <span class="number">0</span>)</span><br><span class="line">) &#123;</span><br><span class="line">  alert(<span class="string">&#x27;是闰年&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  alert(<span class="string">&#x27;不是闰年&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="if多条件判断语句"><a href="#if多条件判断语句" class="headerlink" title="if多条件判断语句"></a>if多条件判断语句</h1><p>else if()条件分支“暗含”了不符合之前所有条件。</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211031201209.png"></p><h1 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h1><p>除if语句之外，JS还提供了另外一种选择语句：switch语句。</p><p>用途：当一个变量被分类讨论的情况。</p><p>在switch中圆括号中一般是一个变量命，这个变量被分类讨论</p><p>case表示“情况”，它后面没有圆括号，直接跟一个值，程序会依次将case后面的值与switch中圆括号的值<strong>全等比对</strong>，如果相同，则执行case后面的语句，default为默认情况。需要注意的是，case后面要书写<strong>break</strong>，否则会造成语句的贯穿，后面的也会被执行。</p><p>示例：要求用户输入一个1~12中的任意一个数字，显示这个月份的天数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="built_in">Number</span>(prompt(<span class="string">&#x27;输入1~12月份&#x27;</span>));</span><br><span class="line">      <span class="keyword">switch</span> (n) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">          alert(<span class="string">&#x27;这个月有31天&#x27;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">          alert(<span class="string">&#x27;这个月有30天&#x27;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">          alert(<span class="string">&#x27;这个月有28或29天&#x27;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          alert(<span class="string">&#x27;输入正确数字&#x27;</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h1 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h1><p>JavaScript中提供了一种叫做“三元运算”的语法形式，让我们可以方便地实现选择：条件表达式？表达式1：表达式2，表达式为真则执行表达式1，否则执行表达式2</p><p>用途：根据条件是否成立，在两个不同值中选择变量的值</p><h1 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for循环有三个表达式，第三个表达式不能有分号。</p><ul><li><code>var i = 1;</code>表示定义一个“循环变量” i,并赋值为1</li><li>i<code>&lt;=10;</code>，表示继续执行循环的条件，只要条件为真，则会一直执行</li><li><code>i++</code>，用来更新循环变量，使循环的值越来越趋向终点</li></ul><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211031202912.png"></p><p>需要注意的是，var和let的区别:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i);<span class="comment">//ReferenceError: i is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i);<span class="comment">//10 </span></span><br></pre></td></tr></table></figure><p>有一个公式：</p><ul><li>如果有序递增，最后的语句写法是 i+=递增的数差值</li><li>如果有序递减，最后的语句写法是 i-=递减的数差值</li></ul><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 18、14、10、...、-6</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">18</span>; i &gt;= -<span class="number">6</span>; i -= -<span class="number">4</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//0、0.2、0.4、0.6、0.8、1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; i += <span class="number">0.2</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Number</span>(i.toFixed(<span class="number">1</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h1><p>while语句也是一种循环结构，是一种不定范围的循环，和for各有各的用处</p><p>while循环没有显示定义循环变量，必须自己在while循环外先定义号循环变量，有时甚至可以没有循环变量</p><p>循环体内的语句，必须使循环测试条件趋向不成立，否则会死循环</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> n = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">while</span> (n &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(n);</span><br><span class="line">   n++;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//1+2+3...+100</span></span><br><span class="line"> <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">   sum += i;</span><br><span class="line">   i++;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure><p>寻找满足n的平方大于456789的最大整数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">while</span> (<span class="built_in">Math</span>.pow(n, <span class="number">2</span>) &lt;= <span class="number">456789</span>) &#123;</span><br><span class="line">   n++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(n);</span><br></pre></td></tr></table></figure><h1 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h1><p>do…while循环将循环执行条件写到了循环体的后面，这样一来，循环体一定会至少执行一次，然后再检测循环执行条件是否为true，再来决定是否再执行一次，即，无论是否对错都会执行一次</p><p>示例：</p><p>编写程序，随机生成两个变量，在[-4,4]区间，但是要求不能同时为0</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">9</span>) - <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">9</span>) - <span class="number">4</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (a == <span class="number">0</span> &amp;&amp; b == <span class="number">0</span>); <span class="comment">//只要是0就再次执行，不是0就退出</span></span><br><span class="line"><span class="built_in">console</span>.log(a, b);</span><br></pre></td></tr></table></figure><h1 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h1><p>共同点： break和continue都是用来控制循环结构的，主要作用是停止循环。</p><p>break主要是<strong>终止</strong>整个或者这一层的循环，continue是<strong>跳过这次</strong>循环，开始下一次的循环</p><p>continue <strong>只能在循环语句中使用</strong>，即只能在 for、while 和 do…while 语句中使用。</p><p>break<strong>只能在循环体内和switch语句体内使用</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍JavaScript的判断语句和循环语句。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript的表达式和运算符</title>
    <link href="https://www.frontblog.top/article/f5797da9.html"/>
    <id>https://www.frontblog.top/article/f5797da9.html</id>
    <published>2021-10-29T13:49:12.000Z</published>
    <updated>2021-10-30T09:25:59.366Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍JavaScript的表达式和运算符。</p><h1 id="什么是表达式和运算符"><a href="#什么是表达式和运算符" class="headerlink" title="什么是表达式和运算符"></a>什么是表达式和运算符</h1><p>运算符：也叫操作符，是一种符号。通过运算符可以对一个或多个值进行运算，并获取运算结果。</p><p>表达式：由数字、运算符、变量的组合（组成的式子）。</p><p>表达式最终都会有一个运算结果，我们将这个结果称为表达式的返回值。</p><p>比如：<code>+</code>、<code>*</code>、<code>/</code>、<code>-</code> 都是运算符，而<code>（3+5）/2</code>则是表达式。</p><p>比如：typeof 就是运算符，可以来获得一个值的类型。它会将该值的类型以字符串的形式返回，返回值可以是 number string boolean undefined object。</p><h1 id="算术表达式"><a href="#算术表达式" class="headerlink" title="算术表达式"></a>算术表达式</h1><table><thead><tr><th align="center">意义</th><th align="center">运算符</th></tr></thead><tbody><tr><td align="center">加</td><td align="center">+</td></tr><tr><td align="center">减</td><td align="center">-</td></tr><tr><td align="center">乘</td><td align="center">*</td></tr><tr><td align="center">除</td><td align="center">/</td></tr><tr><td align="center">取余</td><td align="center">%</td></tr></tbody></table><p><strong>这里主要介绍取余：</strong></p><p>示例：如何取到375里面的3、7、5这三个数字呢</p><ul><li>得到3的方法：375除以100，得到3.75然后取整，得到3。即：parseInt(375/100)</li><li>得到7的方法：375除以100，余数是75，除以10，得到7.5，取整。即：parseInt((375% 100) / 10)</li><li>得到5的方法：375除以10，余数就是5。即：375% 10</li></ul><p><strong>隐式类型转换：</strong></p><p>如果参与数学运算符的某操作数不是数字类型，那么JavaScript会自动将操作数转换为数字型</p><p>本质是内部调用Number函数。</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>*<span class="string">&#x27;4&#x27;</span> <span class="comment">// 12</span></span><br><span class="line"><span class="number">3</span>+<span class="string">&#x27;4&#x27;</span><span class="comment">//7</span></span><br><span class="line"><span class="literal">true</span> + <span class="literal">true</span><span class="comment">//2</span></span><br><span class="line"><span class="number">3</span>* <span class="string">&#x27;2天&#x27;</span><span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><p><strong>IEEE754原则</strong></p><p>在JavaScript中，有些小数的数学运算不是很精准，这是因为JavaScript采用了IEEE754二进制浮点数算术标准，它是计算机底层编译的标准。有时候会产生误差</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> <span class="comment">//0.30000000000000004</span></span><br></pre></td></tr></table></figure><p>解决办法：</p><p><strong>调用数字的toFixed方法</strong>保留指定的小数位数</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">0.1</span> + <span class="number">0.2</span>).toFixed(<span class="number">2</span>)<span class="comment">//0.30</span></span><br></pre></td></tr></table></figure><p><strong>幂和开根号</strong></p><p>JavaScript中没有提供幂计算、开根号的运算符。需要使用Math对象的相关方法进行计算</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//幂</span></span><br><span class="line"><span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">3</span>)<span class="comment">//8 </span></span><br><span class="line"><span class="built_in">Math</span>.pow(<span class="number">3</span>,<span class="number">2</span>)<span class="comment">//9</span></span><br><span class="line"><span class="comment">//开根号</span></span><br><span class="line"><span class="built_in">Math</span>.sqrt(<span class="number">81</span>)<span class="comment">//9</span></span><br><span class="line"><span class="built_in">Math</span>.sqry(-<span class="number">81</span>)<span class="comment">//NaN</span></span><br><span class="line"><span class="comment">//向上(大)取整</span></span><br><span class="line"><span class="built_in">Math</span>.ceil(<span class="number">2.4</span>)<span class="comment">//3</span></span><br><span class="line"><span class="comment">//向下(小)取整</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="number">2.4</span>)<span class="comment">//2</span></span><br></pre></td></tr></table></figure><p><strong>算数运算符的运算规则</strong></p><ol><li>先算乘除、后算加减。</li><li>小括号<code>( )</code>：能够影响计算顺序，且可以嵌套。没有中括号、没有大括号，只有小括号。</li><li>百分号：取余。只关心余数。</li></ol><h1 id="关系表达式"><a href="#关系表达式" class="headerlink" title="关系表达式"></a>关系表达式</h1><table><thead><tr><th align="center">意义</th><th align="center">运算符</th></tr></thead><tbody><tr><td align="center">大于</td><td align="center">&gt;</td></tr><tr><td align="center">小于</td><td align="center">&lt;</td></tr><tr><td align="center">大于等于</td><td align="center">&gt;=</td></tr><tr><td align="center">小于等于</td><td align="center">&lt;=</td></tr><tr><td align="center">等于</td><td align="center">==</td></tr><tr><td align="center">不等于</td><td align="center">!=</td></tr><tr><td align="center">全等于</td><td align="center">===</td></tr><tr><td align="center">不全等于</td><td align="center">!==</td></tr></tbody></table><p>关系运算符的结果是布尔值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span>&gt;<span class="number">5</span> <span class="comment">//true</span></span><br><span class="line"><span class="number">8</span>&gt;=<span class="number">8</span><span class="comment">//true</span></span><br><span class="line"><span class="number">8</span>&lt;=<span class="number">11</span><span class="comment">//true</span></span><br><span class="line"><span class="number">7</span>&lt;<span class="number">4</span><span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>判断一个数字是否等于使用<code>==</code>，判断数字和数字类型是否相等则使用<code>===</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> == <span class="string">&#x27;3&#x27;</span><span class="comment">//true</span></span><br><span class="line"><span class="number">3</span> === <span class="string">&#x27;3&#x27;</span><span class="comment">//false</span></span><br><span class="line"><span class="number">0</span> == <span class="literal">undefined</span> <span class="comment">//false</span></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">null</span> <span class="comment">//true</span></span><br><span class="line"><span class="literal">undefined</span> === <span class="literal">null</span> <span class="comment">//false</span></span><br><span class="line"><span class="literal">NaN</span> == <span class="literal">NaN</span> <span class="comment">//false</span></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span><span class="comment">//false</span></span><br></pre></td></tr></table></figure><p><strong>如何判断变量值为NaN?</strong></p><p>使用isNaN传入变量值，会返回布尔值，但是因为其原理还是使用Number函数，所以就会出现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(<span class="literal">undefined</span>)<span class="comment">//true</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>)<span class="comment">//0</span></span><br></pre></td></tr></table></figure><p>undefined是一个类型，<strong>它的值只有一个</strong>，就是undefined，undefined不是NaN。</p><p><strong>不相等和不全等</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> != <span class="number">6</span> <span class="comment">//true</span></span><br><span class="line"><span class="number">5</span> !== <span class="number">6</span> <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span> != <span class="string">&#x27;5&#x27;</span> <span class="comment">//false</span></span><br><span class="line"><span class="number">5</span> !==<span class="string">&#x27;5&#x27;</span> <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>Javascript没有连比的，需要实现连比需要借助逻辑运算符</p><h1 id="逻辑表达式"><a href="#逻辑表达式" class="headerlink" title="逻辑表达式"></a>逻辑表达式</h1><table><thead><tr><th align="center">意义</th><th align="center">运算符</th></tr></thead><tbody><tr><td align="center">非</td><td align="center">！</td></tr><tr><td align="center">与</td><td align="center">&amp;&amp;</td></tr><tr><td align="center">或</td><td align="center">||</td></tr></tbody></table><p>非运算也可以称为置反运算，它是一个单目运算符，只需要一个操作数，运算结果一定是布尔值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">!<span class="literal">true</span> <span class="comment">//false</span></span><br><span class="line">!<span class="literal">false</span>  <span class="comment">//true</span></span><br><span class="line">!<span class="number">0</span> <span class="comment">//true</span></span><br><span class="line">!<span class="literal">undefined</span> <span class="comment">//true</span></span><br><span class="line">!<span class="string">&#x27;&#x27;</span> <span class="comment">//true</span></span><br><span class="line">!<span class="string">&#x27;123&#x27;</span><span class="comment">//false</span></span><br><span class="line">!!<span class="literal">true</span> <span class="comment">//true</span></span><br><span class="line">!!<span class="number">0</span> <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>与运算是双目运算符，<strong>只有两边真才是真，否则为假</strong></p><p>或运算时双目运算符，<strong>只要有一个真就为真，都假就为假</strong></p><p><strong>短路计算</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> &amp;&amp; <span class="number">6</span> <span class="comment">//6</span></span><br><span class="line"><span class="literal">undefined</span> &amp;&amp; <span class="number">15</span> <span class="comment">//undefined</span></span><br><span class="line"><span class="literal">null</span> &amp;&amp; <span class="number">2</span> <span class="comment">//null</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>&amp;&amp; <span class="number">16</span> <span class="comment">//&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27; &#x27;</span>&amp;&amp; <span class="number">16</span> <span class="comment">//16</span></span><br><span class="line"><span class="literal">NaN</span> &amp;&amp;  <span class="literal">undefined</span><span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><p>与运算会去看第一个数值，如果为假，那么后面就不会再去看，直接返回第一个数值，如果第一个数值为true，那么会去看第二个数值并且输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 || 6 //5</span><br><span class="line">undefined || 15 //15</span><br><span class="line">null || 2 //2</span><br><span class="line">&#x27;&#x27; || 16 //16</span><br><span class="line">&#x27; &#x27; || 16 //&#x27; &#x27;</span><br><span class="line">NaN ||  undefined //undefined</span><br></pre></td></tr></table></figure><p>或运算会去整体看，如果有一个真，那么就直接输出排在前面的真，如果都为假，那么就输出后面那个假的值</p><p>小结：</p><table><thead><tr><th align="center">表达式</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">a&amp;&amp;b(真，真)</td><td align="center">b</td></tr><tr><td align="center">a&amp;&amp;b(真，假)</td><td align="center">b</td></tr><tr><td align="center">a&amp;&amp;b(假，真)</td><td align="center">a</td></tr><tr><td align="center">a&amp;&amp;b(假，假)</td><td align="center">a</td></tr><tr><td align="center">a||b（真，真）</td><td align="center">a</td></tr><tr><td align="center">a||b（真，假）</td><td align="center">a</td></tr><tr><td align="center">a||b(假，真)</td><td align="center">b</td></tr><tr><td align="center">a||b(假，假)</td><td align="center">b</td></tr></tbody></table><p><strong>逻辑运算的顺序:  非-&gt;与-&gt;或</strong></p><h1 id="赋值表达式"><a href="#赋值表达式" class="headerlink" title="赋值表达式"></a>赋值表达式</h1><table><thead><tr><th align="center">意义</th><th align="center">运算符</th></tr></thead><tbody><tr><td align="center">赋值</td><td align="center">=</td></tr><tr><td align="center">加等于（a += 5  等价于a = a +5）</td><td align="center">+=</td></tr><tr><td align="center">减等于（a -= 5  等价于a = a -5）</td><td align="center">-=</td></tr><tr><td align="center">乘等于（a *= 5  等价于a = a *5）</td><td align="center">*=</td></tr><tr><td align="center">除等于（a /= 5  等价于a = a /5）</td><td align="center">/=</td></tr><tr><td align="center">取余等于（a %= 5  等价于a = a %5）</td><td align="center">%=</td></tr><tr><td align="center">自增（在自身加1）</td><td align="center">++</td></tr><tr><td align="center">自减（在自身减1）</td><td align="center">–</td></tr></tbody></table><p>赋值运算也会产生值，也就是会返回值，这就意味着，可以连续使用赋值运算符，比如：<code>var a = b= c = 15</code></p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211030170358.png"></p><h1 id="综合表达式"><a href="#综合表达式" class="headerlink" title="综合表达式"></a>综合表达式</h1><p>综合运算即把所有的运算加在一起，这就需要一个运算顺序了：非运算-&gt;数学运算-&gt;关系运算-&gt;逻辑运算</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> &lt; <span class="number">3</span> + <span class="number">3</span>; <span class="comment">//true</span></span><br><span class="line"><span class="number">3</span> &gt; <span class="number">2</span> &amp;&amp; <span class="number">8</span> &gt; <span class="number">3</span> + <span class="number">4</span>; <span class="comment">//true</span></span><br><span class="line"><span class="number">3</span> &gt; <span class="number">2</span> &amp;&amp; <span class="number">8</span> &gt; <span class="number">3</span> + <span class="number">5</span>; <span class="comment">//false</span></span><br><span class="line">!<span class="number">13</span> &lt; <span class="number">5</span> - <span class="number">3</span>; <span class="comment">//true</span></span><br><span class="line">!<span class="number">13</span> &lt; <span class="number">5</span> - <span class="number">5</span>; <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p><strong>变量范围表示</strong></p><p>验证a是介于5到12之间：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a&gt;=5 &amp;&amp; a&lt;=12</span><br></pre></td></tr></table></figure><h1 id="润年判断"><a href="#润年判断" class="headerlink" title="润年判断"></a>润年判断</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> year = <span class="built_in">Number</span>(prompt(<span class="string">&#x27;请输入年份&#x27;</span>));</span><br><span class="line">     <span class="comment">//能被4整除且不能被100整除</span></span><br><span class="line">     <span class="comment">//能被100整除也能被400整除</span></span><br><span class="line">     <span class="keyword">if</span> (</span><br><span class="line">       (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) ||</span><br><span class="line">       (year % <span class="number">100</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">400</span> != <span class="number">0</span>)</span><br><span class="line">     ) &#123;</span><br><span class="line">       alert(<span class="string">&#x27;是闰年&#x27;</span>);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       alert(<span class="string">&#x27;不是闰年&#x27;</span>);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍JavaScript的表达式和运算符。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>FlyBlog开源项目(一)</title>
    <link href="https://www.frontblog.top/article/1301b218.html"/>
    <id>https://www.frontblog.top/article/1301b218.html</id>
    <published>2021-10-29T08:46:18.000Z</published>
    <updated>2021-10-29T09:31:23.331Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要记录开源项目FlyBlog的开发过程以及遇到的问题。</p><p>在第一篇文章主要整理一下全局的思路与所使用的技术栈</p><h1 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h1><p>FlyBlog的模板样式都是基于LayUI的Fly社区去完成，使用Vue2.X实现逻辑交互，接口对接等，后端则使用Koa作为Web框架，数据库使用mongoDB和Redis。</p><h1 id="完成的模块"><a href="#完成的模块" class="headerlink" title="完成的模块"></a>完成的模块</h1><p>登录、注册、密码找回</p><ul><li>登录这块主要是前端去做做一层校验后，在往服务器去校验密码，成功返回用户信息和一个Token，失败返回一个状态码。</li><li>注册也同样做了表单校验，注册时把用户信息上传到服务器，成功返回状态码，并且延迟2s导航到登录页面，如果遇到同名的，那么返回状态码，并且提示</li><li>密码找回时通过发送验证码到邮箱，邮箱去点击该连接重置密码，连接后面是一个具有时效性的Token，用户只需要填写新密码就可以更改成功</li></ul><p>签到：</p><p>签到规则是连续签到的天数越多，得到积分就越多，实现主要在后端，每次登录后会往前端发送用户信息的时候携带今天有没有签到，如果签到了，那么签到的按钮为disbale，如果没有签到，那么签到按钮为可以点击的状态，当用户去点击签到后，后端会去对比该用户昨天有没有签到，那么给5积分，签到天数值为1，如果用户昨天签到了，那么给10积分，，签到天数值为+1，中断签到时一个道理，只是去查询昨天有没有签到，有就+1操作，没有就值为1</p><p>发表文章：</p><p>用户发表文章后会附带非常多的关系，比如评论信息、点赞信息、收藏信息，这如果在用户自己删除文章时，应该要去删除的数据，否则会引起错乱</p><p>评论、点赞、收藏、采纳</p><p>这一块主要时每个用户的权限看到的内容不一样，比如发帖作者能看到采纳的按钮，但是其他用户是看不到的，这涉及到用户的权限</p><p>个人的信息管理：</p><p>主要是对用户本身的数据进行CURD，对修改密码等较高级别会去往原来邮箱发送验证码</p><h1 id="鉴权"><a href="#鉴权" class="headerlink" title="鉴权"></a>鉴权</h1><p>前端的鉴权是我觉得特别重要的一个知识，大学里最常见的就是校验登录密码就算成功了，但是没有登录鉴权，那么登录功能就如同虚设，因为登录过后，前端发起的请求，后端都不知到谁在发送，而且也无法区分哪些是合法请求，这里采用的鉴权方式是JWT的方案，通过前端发起登录请求，后端返回一个认证Token，前端登录过后每次携带Token去请求数据，这就让后端知道谁在发送请求，用户有没有操作的权限。除了这一点，前端还要做一点就是导航守卫，有些页面在没有登录时不能去访问到的，这个时候就应该使用导航守卫，导航至登录页面</p><h1 id="前端数据缓存"><a href="#前端数据缓存" class="headerlink" title="前端数据缓存"></a>前端数据缓存</h1><p>后端返回来的数据除了放在VueX里面，还需要放在前端的数据缓存中，然后再有缓存信息存到Vuex中，不然就会出现刷新后状态量的丢失。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>目前先写到这里，后期慢慢开发并写下开发记录。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本系列文章主要记录开源项目FlyBlog的开发过程以及遇到的问题。&lt;/p&gt;</summary>
    
    
    
    <category term="开源项目" scheme="https://www.frontblog.top/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>Javascript的数据类型和包装对象</title>
    <link href="https://www.frontblog.top/article/a7f01692.html"/>
    <id>https://www.frontblog.top/article/a7f01692.html</id>
    <published>2021-10-29T01:12:30.000Z</published>
    <updated>2021-10-29T07:09:11.831Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍<code>javaScript</code>的数据类型、数据类型如何转换以及包装对象。</p><h1 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h1><p>在<code>JS</code>中，所有数字不分大小，不分整浮，不分正负，都是数字类型，在数字类型中，小数0是可以省略的。</p><p>数字类型还可以使用科学计数法、二进制、八进制、十六进制</p><p>数字类型中还有一个特别的值：<code>NaN</code>，使用<code>typeof</code>检测是Number，它是一个不自等的值，往往在数学当中算不出来的值就是<code>NaN</code>,比如：0/0就是<code>NaN</code>，<code>&#39;Str&#39; * 5</code>也是<code>NaN</code></p><h1 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h1><p>使用引号包裹的字符就是字符串，字符串就是“人类的自然语言”，即可以在里面书写任何东西</p><p>字符串的拼接使用+号进行拼接，字符串也可以和变量连接</p><p>字符串拥有<code>lenght</code>属性，空格也算是一个长度。</p><p><strong>常用方法：</strong></p><ul><li><code>charAt(a)</code></li></ul><p>会返回一个<strong>指定位置的字符</strong>，参数是字符的位置，位置从0开始。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">1</span>));<span class="comment">//e</span></span><br></pre></td></tr></table></figure><ul><li><code>substring(a,b)</code></li></ul><p>会返回<strong>从a开始到b结束（不包括b）</strong>的子串，如果省略后面参数，则会一直选择到字符串结尾</p><p>如果书写了a大于b，则会自动调换位置，所以都会从位置小的开始</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">0</span>, <span class="number">3</span>)); <span class="comment">//Hel</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">3</span>, <span class="number">0</span>)); <span class="comment">//Hel</span></span><br></pre></td></tr></table></figure><ul><li><code>substr(a,b)</code></li></ul><p>会返回<strong>从a开始，b作为长度的子串，如果b省略，则会一直选择到字符串结尾</strong></p><p>a还可以是负数，表示倒数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">3</span>, <span class="number">1</span>)); <span class="comment">//l</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">3</span>)); <span class="comment">//lo</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(-<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">//o,倒数后往右边数</span></span><br></pre></td></tr></table></figure><ul><li><code>slice(a,b)</code></li></ul><p>会返回<strong>从a开始，b结束（不包括b）的子串，a，b可以是负数，表示倒数第几位，a必须小于b</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">//e</span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(-<span class="number">2</span>, -<span class="number">1</span>)); <span class="comment">//l</span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(-<span class="number">1</span>)); <span class="comment">//o</span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(-<span class="number">1</span>, -<span class="number">2</span>)); <span class="comment">//空，a必须小于b</span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">4</span>, <span class="number">1</span>)); <span class="comment">//空，a必须小于b</span></span><br></pre></td></tr></table></figure><ul><li><code>touppercase()</code></li></ul><p>返回字符串的小写形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.toLowerCase());<span class="comment">//hello</span></span><br></pre></td></tr></table></figure><ul><li><code>toLowercase()</code></li></ul><p>返回字符串大写形式，这在验证码忽略大小写有用到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.toUpperCase());<span class="comment">//HELLO</span></span><br></pre></td></tr></table></figure><ul><li><code>indexOf()</code></li></ul><p>返回字符串首次出现位置，没有返回-1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&#x27;e&#x27;</span>));<span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>小结：</p><p>substring(a,b)和slice(a,b)功能基本一样，都是得到从a开始到b结束，不包括b的子串，区别有两个：</p><ul><li>substring可以自动交换位置，slice不行</li><li>slice的参数可以是负数，substring不行</li></ul><p><code>substr(a,b</code>)中b是长度而不是编号</p><h1 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a>Boolean类型</h1><p>表示真假的数据类型，布尔类型值只有<code>true</code>和<code>false</code>，在判断条件中，除了以下六种情况都为真</p><p>1、undefined（未定义，找不到值时出现）</p><p>2、null（代表空值）</p><p>3、false（布尔值的false，字符串”false”布尔值为true）</p><p>4、0（数字0，字符串”0”布尔值为true）</p><p>5、<code>NaN</code>（无法计算结果时出现，表示”非数值”；但是typeof NaN===”number”）</p><p>6、””（双引号）或’’（单引号） （<strong>空字符串，中间有空格时也是true</strong>）</p><p>小错误：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&#x27;true&#x27;</span>);</span><br><span class="line">       <span class="keyword">return</span>; <span class="comment">//SyntaxError: Illegal return statement</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;false&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>这是写测试的时候报的错误，原因如下：</li><li>在js中return 语句只能放在function中，如果不是在一个function中弹出如上错误。，解决方法只要把这个if语句放到一个函数中即可</li></ul><h1 id="undefined类型"><a href="#undefined类型" class="headerlink" title="undefined类型"></a>undefined类型</h1><p>变量的默认值，它既是类型也是值，它的类型只有一个值，就是它本身，在变量声明中，提升的默认就是undefined</p><h1 id="Null类型"><a href="#Null类型" class="headerlink" title="Null类型"></a>Null类型</h1><p>null表示’空‘，它是空对象</p><p>当我们需要将对象销毁，数组销毁或者删除时间监听，通常将它们设置为null</p><p>使用typeof检测null是object</p><h1 id="数据类型检测"><a href="#数据类型检测" class="headerlink" title="数据类型检测"></a>数据类型检测</h1><p>数据类型分为基本数据类型、复杂数据类型，想要检测数据类型，就需要使用<code>typeof</code>进行数据类型检测，会返回一个数据类型</p><p>下面是5种数据类型的typeof检测结果</p><table><thead><tr><th align="center">类型名</th><th align="center">typeof检测结果</th></tr></thead><tbody><tr><td align="center">数字类型</td><td align="center">number</td></tr><tr><td align="center">字符串类型</td><td align="center">string</td></tr><tr><td align="center">布尔类型</td><td align="center">boolean</td></tr><tr><td align="center">undefined类型</td><td align="center">undefined</td></tr><tr><td align="center">null类型</td><td align="center">null</td></tr></tbody></table><h1 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h1><p><strong>其他数-&gt;数字：</strong></p><p>使用Number函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">&#x27;123&#x27;</span>)); <span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">&#x27;123.4&#x27;</span>)); <span class="comment">//123.4</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">&#x27;123年&#x27;</span>)); <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">&#x27;2e3&#x27;</span>)); <span class="comment">//2000</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">&#x27; &#x27;</span>)); <span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">true</span>)); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">false</span>)); <span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">undefined</span>)); <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">null</span>)); <span class="comment">//0</span></span><br></pre></td></tr></table></figure><p>除了使用Number函数，还可以使用<code>parseInt</code>函数，将字符串转为整数，需要注意的是，这<strong>不是 四舍五入的函数</strong>，它会截取到小数点位置的数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;3.14159&#x27;</span>)); <span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;3.14是圆周率&#x27;</span>)); <span class="comment">//3，这是区别Number函数的</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;圆周率是3.14&#x27;</span>)); <span class="comment">//NaN,不是数字开头</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;3.9999&#x27;</span>)); <span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="literal">true</span>)); <span class="comment">//NaN,true-&gt;&#x27;true&#x27;-&gt;NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="literal">true</span>)); <span class="comment">//NaN,true-&gt;&#x27;true&#x27;-&gt;NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="literal">null</span>)); <span class="comment">//NaN,null-&gt;&#x27;null&#x27;-&gt;NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="literal">undefined</span>)); <span class="comment">//NaN,undefined-&gt;&#x27;undefined&#x27;-&gt;NaN</span></span><br></pre></td></tr></table></figure><p>还可以使用<code>parseFloat</code>函数，<code>parseFloat</code>函数是将字符串转为浮点数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">&#x27;3.14159&#x27;</span>)); <span class="comment">//3.14159</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">&#x27;3.14是圆周率&#x27;</span>)); <span class="comment">//3.14</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">&#x27;圆周率是3.14&#x27;</span>)); <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">&#x27;3.9999&#x27;</span>)); <span class="comment">//3.9999</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="literal">true</span>)); <span class="comment">//NaN,true-&gt;&#x27;true&#x27;-&gt;NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="literal">null</span>)); <span class="comment">//NaN,null-&gt;&#x27;null&#x27;-&gt;NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="literal">undefined</span>)); <span class="comment">//NaN,undefined-&gt;&#x27;undefined&#x27;-&gt;NaN</span></span><br></pre></td></tr></table></figure><p>需要注意：<code>parseInt</code>和<code>parseFloat</code>去**对布尔、null和undefined类型转换会变成<code>NaN</code>**，因为会被隐式转换为字符串，字符串转数字得到结果就是<code>NaN</code></p><p><strong>其他数-&gt;字符串：</strong></p><p>使用String函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="string">&#x27;3.14159&#x27;</span>)); <span class="comment">//3.14159</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="string">&#x27;3.14是圆周率&#x27;</span>)); <span class="comment">//3.14是圆周率</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="string">&#x27;圆周率是3.14&#x27;</span>)); <span class="comment">//圆周率是3.14</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="string">&#x27;3.9999&#x27;</span>)); <span class="comment">//3.9999</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="literal">true</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="literal">null</span>)); <span class="comment">//null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="literal">undefined</span>)); <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="number">0xf</span>)); <span class="comment">//15 //转为10进制-&gt;字符串</span></span><br></pre></td></tr></table></figure><p>使用toString()方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">7</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.toString()); <span class="comment">//7</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="number">6</span>).toString()); <span class="comment">//6</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span>.toString()); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><strong>其他数-&gt;布尔值：</strong></p><p>使用Boolean函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">123</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">0</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">NaN</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">Infinity</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(-<span class="literal">Infinity</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">&#x27;&#x27;</span>)); <span class="comment">//false,单引号为false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">&#x27; &#x27;</span>)); <span class="comment">//true,空字符串也是true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">&#x27;abc&#x27;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">&#x27;false&#x27;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">undefined</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">null</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h1 id="包装对象"><a href="#包装对象" class="headerlink" title="包装对象"></a>包装对象</h1><p>我们都知道在js中普通类型的变量是没有属性和方法的，然后有时却并不是这样。</p><p>有时候我们可能会这样去写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> len = str.length;</span><br><span class="line"><span class="built_in">console</span>.log(len);</span><br></pre></td></tr></table></figure><p>思考一个问题，为什么变量可以去调用lenght属性呢?</p><ul><li><p>这是因为我们去调用lenght属性时，js会去创建包装对象，这个对象会有一个lenght属性。其他基本数据类型也是这样，换句话说，一旦我们在普通类型的变量中使用了属性或者方法，js就会自动new一个对应的对象</p><p>什么是包装对象？</p></li><li><p><strong>存取</strong>字符串、数字或布尔值的属性时，<strong>创建的临时对象</strong>称为包装对象</p></li></ul><p>怎么论证上面的两个回答？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;努力，奋斗&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.length);<span class="comment">//5</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;努力，奋斗&#x27;</span>).length));<span class="comment">//5</span></span><br></pre></td></tr></table></figure><p>这就说明了字符串在去调用lenght属性时候，是会去创建一个临时对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.length);</span><br><span class="line"><span class="comment">//  转换为：</span></span><br><span class="line"><span class="comment">// var str1 = new String(&#x27;Hello&#x27;);</span></span><br><span class="line"><span class="comment">// console.log(str1.length);</span></span><br><span class="line"><span class="comment">// str1.len = 10</span></span><br><span class="line"><span class="comment">//这里的str是手动创建，所以可以去往里面添加新的属性</span></span><br><span class="line"><span class="comment">//console.log(str1.len);//10</span></span><br><span class="line"><span class="comment">//console.log(str1.length);//5</span></span><br><span class="line">str.len = <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 一旦属性的引用和操作执行完毕后便会被回收，也就是说在 str.len = 5;执行完毕后，str便被回收，不可再次访问,结果就是undefine</span></span><br><span class="line"><span class="built_in">console</span>.log(str.len); <span class="comment">//undefine</span></span><br><span class="line"><span class="built_in">console</span>.log(str.lenght); <span class="comment">//5</span></span><br></pre></td></tr></table></figure><p>需要注意的是：</p><ul><li>null和undefined没有包装对象，尝试使用“.”访问它们的属性会报错。</li><li>包装对象和基础类型使用双等号<code>==</code>判断返回true，但是恒等号<code>===</code>返回false。这是因为包装对象已经是一个object了，可以使用typeof检测，开发过程中需要注意。</li></ul><p>参考文章：</p><ul><li><a href="https://www.cnblogs.com/ihardcoder/p/4936179.html">https://www.cnblogs.com/ihardcoder/p/4936179.html</a></li><li><a href="https://www.cnblogs.com/f6056/p/10874954.html">https://www.cnblogs.com/f6056/p/10874954.html</a></li><li><a href="https://www.cnblogs.com/pssp/p/5229320.html">https://www.cnblogs.com/pssp/p/5229320.html</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍&lt;code&gt;javaScript&lt;/code&gt;的数据类型、数据类型如何转换以及包装对象。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="数据类型" scheme="https://www.frontblog.top/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>开发效率网站</title>
    <link href="https://www.frontblog.top/article/b8ba1c56.html"/>
    <id>https://www.frontblog.top/article/b8ba1c56.html</id>
    <published>2021-10-27T14:46:55.000Z</published>
    <updated>2021-10-28T03:02:52.475Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要分享学习过程中的具有学习意义或者具有参考价值的网站</p><p>谷歌<code>bilibili</code>的官方视频号：<a href="https://space.bilibili.com/64169458?from=search&amp;seid=16725490532360573752&amp;spm_id_from=333.337.0.0">https://space.bilibili.com/64169458?from=search&amp;seid=16725490532360573752&amp;spm_id_from=333.337.0.0</a></p><ul><li>个人觉得，相比外网的视频，有着网络限制，而且对个人英文水平有很大考验，<code>bilibili</code>上面的视频有中文字幕，而且也是官方出品，所以质量是较好的</li></ul><p>Github trending: <a href="https://github.com/trending">https://github.com/trending</a></p><ul><li>可以了解到最近非常火的开源项目。</li></ul><table><thead><tr><th align="left">网址</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://unbug.github.io/codelf">https://unbug.github.io/codelf</a></td><td align="left">变量命名智能推荐（支持中文）</td></tr><tr><td align="left"><a href="https://www.docschina.org/">https://www.docschina.org</a></td><td align="left">Web 前端开发人员提供优质中文文档</td></tr><tr><td align="left"><a href="https://regexr.com/">https://regexr.com</a></td><td align="left">正则表达式验证匹配</td></tr><tr><td align="left"><a href="https://any-rule/">https://any-rule</a></td><td align="left">正则表达式库，非常全，使用起来很方便</td></tr><tr><td align="left"><a href="https://www.toptal.com/developers">https://www.toptal.com/developers</a></td><td align="left">多张图片合成雪碧图，并生成对应 <code>CSS</code></td></tr><tr><td align="left"><a href="https://tool.lu/">https://tool.lu</a></td><td align="left">众多工具集合，包括时间戳转换，进制转换等</td></tr><tr><td align="left"><a href="https://www.bootcdn.cn/">https://www.bootcdn.cn</a> 或 <a href="https://cdn.baomitu.com/">https://cdn.baomitu.com</a></td><td align="left">国内的<code>CDN</code>库，速度快</td></tr><tr><td align="left"><a href="https://www.jsdelivr.com/">https://www.jsdelivr.com</a></td><td align="left">国外的 <code>CDN</code>库，支持 <code>github</code>，<code>npm</code>，<code>WordPress</code></td></tr><tr><td align="left"><a href="https://www.gitignore.io/">https://www.gitignore.io</a></td><td align="left">根据选择会去生成 <code>.gitignore</code> 文件</td></tr><tr><td align="left"><a href="https://codesandbox.io/">https://codesandbox.io</a></td><td align="left">在线编辑代码</td></tr><tr><td align="left"><a href="https://www.typora.io/">https://www.typora.io</a></td><td align="left">实用的 Markdown 写作工具，所见即所得</td></tr><tr><td align="left"><a href="https://mdnice.com/">https://mdnice.com</a></td><td align="left">使 markdown 语法更加美观，如果你有写博客，那这个非常合适你</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要分享学习过程中的具有学习意义或者具有参考价值的网站&lt;/p&gt;</summary>
    
    
    
    
    <category term="分享" scheme="https://www.frontblog.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>变量声明提升和var、let、const的区别</title>
    <link href="https://www.frontblog.top/article/43391fd9.html"/>
    <id>https://www.frontblog.top/article/43391fd9.html</id>
    <published>2021-10-27T10:37:18.000Z</published>
    <updated>2021-10-30T09:24:19.253Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍JavaScript变量声明提升的现象。</p><p>JavaScript是一门运行时的脚本语言，也就是没有编译阶段，但是存在一个预编译阶段，预编译阶段会去预读所有变量的定义。</p><p><strong>什么是变量声明提升？</strong></p><p>我们可以提前使用一个稍后才声明的变量，而不会引发异常。</p><p><strong>变量声明提升带来的后果：</strong></p><p>变量声明提升只是提升了定义，但不会提升值，比如下面代码，输出的是undefined，这是因为var a 被提升了，但是后面的值没有被提升，一个没有赋初值的变量，输出肯定是undefined。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>这其实是一种非常不好的写法，如果在其他编译语言，这是会直接报错，但是js会产生这种现象是由于语言本身的特性导致，在ES6中，新增了<code>let</code>，<code>const</code>两个声明变量，这两个就不会存在变量声明提升。</p><p>变量声明提升<strong>只提升到当前作用域下</strong>，比如以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);<span class="comment">//undefine</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//  ReferenceError: a is not define</span></span><br></pre></td></tr></table></figure><p><strong>函数声明提升：</strong></p><p>如果调用了一个未先定义的函数，结果会怎么样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fun(<span class="string">&#x27;Hello world&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果输出Hello world，这是因为函数定义后就是等着被调用的，只有调用才会执行，但是如果复制给一个变量，那情况就不一样了</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fun(<span class="string">&#x27;Hello world&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span>  (<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>报错信息：<code>TypeError: fun is not a function</code>，这是因为js会理解为这是在定义一个变量，把var fun提升了，但是函数没有提升，所以去调用一个undefined，肯定报错这不是一个函数</li></ul><h1 id="var、let、const的区别"><a href="#var、let、const的区别" class="headerlink" title="var、let、const的区别"></a><code>var、let、const</code>的区别</h1><h2 id="var"><a href="#var" class="headerlink" title="var:"></a>var:</h2><p>var是ES5中一个初始化变量的关键字，用var声明的变量，除了在函数使用var变量以外，其他都属于全局变量，全局变量是在顶级对象能调用的一个属性值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">fun();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;a-&gt;&#x27;</span> + <span class="built_in">window</span>.a + <span class="string">&#x27; b-&gt;&#x27;</span> + <span class="built_in">window</span>.b + <span class="string">&#x27; c-&gt;&#x27;</span> + <span class="built_in">window</span>.c);</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211028185202.png"></p><ul><li>可以看出window对象上已经绑定了变量a和c，属于全局的一个变量。如果想给var重新赋值，可以直接a=1或者重新var a = 1,重新赋值并不会改变上面的原则。而如果在函数内不使用<code>var</code>，该变量是全局的</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">undefine      <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        b = <span class="number">22</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      fun();</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27; b-&gt;&#x27;</span> + <span class="built_in">window</span>.b); <span class="comment">//b-&gt;undefine</span></span><br></pre></td></tr></table></figure><p>以上是在浏览器侧，在Node侧有小小的区别。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">global</span>.a);</span><br></pre></td></tr></table></figure><ul><li>以上代码输出的其实是undefine，因为在nodejs侧，使用var一个变量，属于该js文件局部的变量，只有a = 1的时候，才能被global调用，不过一般不建议这样做，会产生全局污染，除非这个变量是全局都需要去频繁使用到</li></ul><h2 id="let"><a href="#let" class="headerlink" title="let:"></a>let:</h2><p><code>let</code>是<code>ES6</code>新增的命令，用来声明变量，用法类似于<code>var</code>，但是所声明的变量，<strong>只在<code>let</code>命令所在的代码块内有效</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// ReferenceError: a is not defined.</span></span><br></pre></td></tr></table></figure><p>同时也<strong>不存在变量提升</strong>，以下代码表示在声明它之前，变量<code>a</code>是不存在的，这时如果用到它，就会抛出一个错误</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// 报错ReferenceError</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>let<strong>存在暂时性死区</strong>，也就是使用<code>let</code>声明变量前，该变量都不可用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  a = <span class="string">&#x27;abc&#x27;</span>; <span class="comment">// ReferenceError</span></span><br><span class="line">  <span class="keyword">let</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>let</code>不允许在相同作用域中重复声明</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">20</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">30</span></span><br><span class="line"><span class="comment">// Uncaught SyntaxError: Identifier &#x27;a&#x27; has already been declared</span></span><br></pre></td></tr></table></figure><p>当然在不同作用域下是可以重复声明，毕竟let属于块级作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">20</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="const"><a href="#const" class="headerlink" title="const:"></a>const:</h2><p><code>const</code>声明一个只读的常量，一旦声明，常量的值就不能改变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line">a = <span class="number">3</span></span><br><span class="line"><span class="comment">// TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><p><code>const</code>一旦声明变量，就必须立即初始化，不能留到以后赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a;</span><br><span class="line"><span class="comment">// SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure><p>如果之前用<code>var</code>或<code>let</code>声明过变量，再用<code>const</code>声明同样会报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">20</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">30</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">30</span></span><br><span class="line"><span class="comment">// 都会报错</span></span><br></pre></td></tr></table></figure><p><code>const</code>实际上保证的并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动</p><p>对于简单类型的数据，值就保存在变量指向的那个内存地址，因此等同于常量</p><p>对于复杂类型的数据，变量指向的内存地址，保存的只是一个指向实际数据的指针，<code>const</code>只能保证这个指针是固定的，并不能确保改变量的结构不变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 foo 添加一个属性，可以成功</span></span><br><span class="line">foo.prop = <span class="number">123</span>;</span><br><span class="line">foo.prop <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 foo 指向另一个对象，就会报错</span></span><br><span class="line">foo = &#123;&#125;; <span class="comment">// TypeError: &quot;foo&quot; is read-only</span></span><br></pre></td></tr></table></figure><p>其它情况，<code>const</code>与<code>let</code>一致</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍JavaScript变量声明提升的现象。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="变量声明提升" scheme="https://www.frontblog.top/tags/%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E%E6%8F%90%E5%8D%87/"/>
    
  </entry>
  
  <entry>
    <title>CSS3的过渡与动画</title>
    <link href="https://www.frontblog.top/article/c2010641.html"/>
    <id>https://www.frontblog.top/article/c2010641.html</id>
    <published>2021-10-25T12:08:51.000Z</published>
    <updated>2021-10-27T13:03:24.693Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍CSS3里面的过渡与动画属性。</p><h1 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h1><p>过渡属性使用transition，可以为一个元素在不同样式之间变化自动添加“补间动画”。</p><p>主要有四要素：过渡属性，动画总时长，变化速度曲线，延迟时间</p><p>兼容到IE10</p><p>示例：<code>transition:width 1s linear 0s</code></p><p>哪些属性可以被过渡：</p><ul><li>所有数值类型的属性都可以过渡，英文属性值不可以，比如浮动</li><li>背景颜色和文字颜色都可以过渡</li><li>所有变形（2D和3D）都可以过渡</li></ul><p>过渡的四个小属性：</p><table><thead><tr><th align="center">属性</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center">transition-property</td><td align="center">哪些属性要过渡</td></tr><tr><td align="center">transition-duration</td><td align="center">动画时间</td></tr><tr><td align="center">transition-timing-function</td><td align="center">动画变化曲线</td></tr><tr><td align="center">transition-delay</td><td align="center">延迟时间</td></tr></tbody></table><p>缓动效果：</p><p>linear 是平缓过渡，也就是变化的速度曲线，除了linear 外还有以下几种</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211026125546.png"></p><p>除了以上设置方法外，还可以自定义设置过渡速度曲线，即贝塞尔曲线。</p><p>通过网站 <a href="https://cubic-bezier.com/">https://cubic-bezier.com</a> 可以生成贝塞尔曲线，示例：<code>transition:width 1s cubic-bezier(.17,.67,.52,.28) 0s</code> </p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      * &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="comment">/* 过渡 width，*/</span></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="css">        <span class="attribute">transition</span>: width <span class="number">1s</span> linear <span class="number">0s</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box1</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">        <span class="attribute">transition</span>: left <span class="number">1s</span> linear <span class="number">0s</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box1</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">left</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">        <span class="attribute">transition</span>: background-color <span class="number">1s</span> linear <span class="number">0s</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box2</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box3</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">        <span class="attribute">border-radius</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">transition</span>: all <span class="number">1s</span> linear <span class="number">0s</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box3</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box4</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="css">        <span class="attribute">transition</span>: transform <span class="number">1s</span> linear <span class="number">0s</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box4</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.2</span>) <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box5</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">perspective</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box5</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: aquamarine;</span></span><br><span class="line"><span class="css">        <span class="attribute">transition</span>: transform <span class="number">1s</span> linear <span class="number">0s</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box5</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">360deg</span>) <span class="built_in">rotateY</span>(<span class="number">360deg</span>);</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box5&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="一些案例"><a href="#一些案例" class="headerlink" title="一些案例"></a>一些案例</h2><p>演示地址: <a href="https://lsfcxz.gitee.io/transit">https://lsfcxz.gitee.io/transit</a></p><p>效果图：</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211026182945.png"></p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211026214536.png"></p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211027092416.png"></p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211027092451.png"></p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211027092544.png"></p><h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><p>动画效果可以理解为过渡的一种延续，过渡动画是需要触发条件才会形成过渡，并且是在一定时间内完成，而动画则可以自动完成，并且也可以设置无限运行。</p><p><strong>定义动画：</strong></p><p>定义动画使用 <code>@keyframes</code>关键字定义，test为动画的名称，调用动画时候使用，可以理解为就是一个方法名， from是开始状态，to是结束状态。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> test &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">0deg</span>) <span class="built_in">rotateY</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">360deg</span>) <span class="built_in">rotateY</span>(<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动画定义还可以使用多关键帧，使用百分数。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> test &#123;</span><br><span class="line">  <span class="number">10%</span> &#123;</span><br><span class="line">    backgroud-<span class="attribute">color</span>:red;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    backgroud-<span class="attribute">color</span>:blue;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span>&#123;</span><br><span class="line">   backgroud-<span class="attribute">color</span>:yellow;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用动画:</p><p>定义动画使用 <code>animation</code>关键字定义，test是动画名称，3s是总时长，linear是缓动效果，0s是延迟执行时间，第五个是，动画执行次数，如果想永久运行，则使用<code>infinite</code>，如果想让动画偶次数自动逆向执行，则使用<code>animation</code>参数作为第六个参数，如果想让动画停止在最后结束状态，那么则使用<code>forwards</code>参数。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation</span>: test <span class="number">3s</span> linear <span class="number">0s</span> infinite;</span><br></pre></td></tr></table></figure><h2 id="一些案例-1"><a href="#一些案例-1" class="headerlink" title="一些案例"></a>一些案例</h2><p>演示地址： <a href="https://lsfcxz.gitee.io/transit">https://lsfcxz.gitee.io/transit</a></p><p>效果图：</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211027120549.png"></p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211027120627.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍CSS3里面的过渡与动画属性。&lt;/p&gt;</summary>
    
    
    
    <category term="CSS" scheme="https://www.frontblog.top/categories/CSS/"/>
    
    
    <category term="过渡与动画" scheme="https://www.frontblog.top/tags/%E8%BF%87%E6%B8%A1%E4%B8%8E%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>CSS实现正方体</title>
    <link href="https://www.frontblog.top/article/6ad90280.html"/>
    <id>https://www.frontblog.top/article/6ad90280.html</id>
    <published>2021-10-25T11:36:29.000Z</published>
    <updated>2021-10-27T11:43:49.717Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要使用CSS实现一个正方体。</p><p>直接看代码。</p><iframe height="300" style="width: 100%;" scrolling="no" title="Untitled" src="https://codepen.io/lsfcxz/embed/ZEJKPjr?default-tab=html%2Cresult&editable=true&theme-id=light" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/lsfcxz/pen/ZEJKPjr">  Untitled</a> by LSFCXZ (<a href="https://codepen.io/lsfcxz">@lsfcxz</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>正方体<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      * &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">        <span class="attribute">perspective</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">234</span>, <span class="number">0.295</span>);</span></span><br><span class="line"><span class="css">        <span class="comment">/* 前面 */</span></span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">145</span>, <span class="number">0</span>, <span class="number">0.336</span>);</span></span><br><span class="line"><span class="css">        <span class="comment">/* 顶面 */</span></span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">179</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0.384</span>);</span></span><br><span class="line"><span class="css">        <span class="comment">/* 背面 */</span></span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">180deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">26</span>, <span class="number">255</span>, <span class="number">0.37</span>);</span></span><br><span class="line"><span class="css">        <span class="comment">/* 底面 */</span></span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(-<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>) &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">128</span>, <span class="number">0.485</span>);</span></span><br><span class="line"><span class="css">        <span class="comment">/* 侧面 */</span></span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">6</span>) &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">106</span>, <span class="number">0.39</span>);</span></span><br><span class="line"><span class="css">        <span class="comment">/* 侧面 */</span></span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(-<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211025193759.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要使用CSS实现一个正方体。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>CSS3的变形属性</title>
    <link href="https://www.frontblog.top/article/a8e47f07.html"/>
    <id>https://www.frontblog.top/article/a8e47f07.html</id>
    <published>2021-10-25T09:47:58.000Z</published>
    <updated>2021-10-25T11:14:14.112Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍CSS3中的变形属性。</p><p>CSS3中主要使用<code>tranform</code>属性来进行盒子的变形，变形主要分为2D和3D两大变形</p><h1 id="2D变形"><a href="#2D变形" class="headerlink" title="2D变形"></a>2D变形</h1><h2 id="旋转变形"><a href="#旋转变形" class="headerlink" title="旋转变形"></a>旋转变形</h2><p>将<code>tranform</code>属性的属性值设置为rotate(),即可实现旋转变形，单位deg表示为度数，正数表示顺时针方向，负数反之。</p><p>示例：<code>tranform:rotate(45deg)</code>,表示顺时针旋转45度</p><p>默认旋转是绕着中心点位置旋转，如果绕着的点不是中心位置，那么就使用<code>tranform-origin</code>属性。</p><p>示例：<code>tranform-origin:0 0</code>，表示绕着左上角旋转</p><h2 id="缩放变形"><a href="#缩放变形" class="headerlink" title="缩放变形"></a>缩放变形</h2><p>将<code>tranform</code>属性的属性值设置为scale(),即可实现缩放变形，括号里面是缩放倍数。</p><p>示例：<code>tranform:scale(3)</code>,表示放大3倍</p><p>也可以 <code>transform-origin</code>属性表示从哪个点开始放大，默认中心点</p><h2 id="斜切变形"><a href="#斜切变形" class="headerlink" title="斜切变形"></a>斜切变形</h2><p>将<code>tranform</code>属性的属性值设置为skew(),即可实现斜切变形，括号里面是两个数值，一个x斜切度，一个y斜切度,单位deg</p><p>示例：<code>tranform:skew(10deg,20deg)</code>,</p><h2 id="位移变形"><a href="#位移变形" class="headerlink" title="位移变形"></a>位移变形</h2><p>将<code>tranform</code>属性的属性值设置为translate(),即可实现位移变形，括号里面是两个数值，向右，向下两个方向,单位px。</p><p>和相对定位差不多，不会放弃自己原来的位置，兼容到IE9</p><p>示例:<code>transform:translate(100px,200px)</code></p><h1 id="3D变形"><a href="#3D变形" class="headerlink" title="3D变形"></a>3D变形</h1><h2 id="3D旋转"><a href="#3D旋转" class="headerlink" title="3D旋转"></a>3D旋转</h2><p>将<code>transform</code>属性的属性值设置为<code>rotateX()</code>或者<code>rotateY()</code>,即可实现3D旋转。</p><p><code>rotateX()</code>是绕横轴旋转，<code>rotateY()</code>是绕纵轴旋转，括号里面是度数,单位deg。</p><p>perspective属性用来定义透视强度，可以理解为人眼到舞台的距离，单位是px，直白点说，设置3D旋转的父盒子必须设置perspective属性。</p><p>3D旋转可以X，Y同时旋转，示例:<code>transform: rotateY(45deg) rotateX(45deg);</code></p><h2 id="空间移动"><a href="#空间移动" class="headerlink" title="空间移动"></a>空间移动</h2><p>将<code>transform</code>属性的属性值设置为<code>rotateX()</code>或者<code>rotateY()</code>后成为3D旋转后可继续添加translateX、translateY或者translateZ实现空间移动，换句话说，想实现空间移动，必须3旋转后才可以，空间移动单位为px。</p><p>示例：<code>transform: rotateY(128deg) rotateX(52deg) translateY(50px) translateZ(50px);</code></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      * &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="comment">/* 透视强度 */</span></span></span><br><span class="line"><span class="css">      <span class="selector-class">.per</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">perspective</span>: <span class="number">179px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="comment">/* 旋转 */</span></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box1</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="comment">/* 缩放 */</span></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box2</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">2</span>);</span></span><br><span class="line"><span class="css">        <span class="comment">/* 中心点 */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* transform-origin: 0 0; */</span></span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="comment">/* 斜切 */</span></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box3</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box3</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">10deg</span>, <span class="number">20deg</span>);</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="comment">/* 位移 */</span></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box4</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box4</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100px</span>, <span class="number">200px</span>);</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="comment">/* 3D旋转 */</span></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box5</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">45deg</span>) <span class="built_in">rotateX</span>(<span class="number">45deg</span>);</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="comment">/* 空间移动 */</span></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box6</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">128deg</span>) <span class="built_in">rotateX</span>(<span class="number">52deg</span>) <span class="built_in">translateY</span>(<span class="number">50px</span>)</span></span><br><span class="line"><span class="css">          <span class="built_in">translateZ</span>(<span class="number">50px</span>);</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1 box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2 box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3 box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box4 box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;per&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box5 box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;per&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box6 box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍CSS3中的变形属性。&lt;/p&gt;</summary>
    
    
    
    <category term="CSS" scheme="https://www.frontblog.top/categories/CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>物理像素和CSS像素</title>
    <link href="https://www.frontblog.top/article/158ced0d.html"/>
    <id>https://www.frontblog.top/article/158ced0d.html</id>
    <published>2021-10-24T04:43:47.000Z</published>
    <updated>2021-10-27T13:02:14.846Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录移动端像素知识。</p><p><strong>分辨率：</strong></p><p>是指屏幕的物理像素点，比如：1792 X 828像素表示纵轴有1792个像素点，横轴828个像素点。分辨率越高显示越清晰</p><p><strong>物理像素（physical pixel）:</strong></p><p>物理像素也是设备像素（dp：device pixel），开发中不以物理像素为准，因为设备的物理像素各不相同，如果用1像素描述一块区域，在标清屏显示更大，在高清屏显示更小，物理像素是不能被放大的，所以就导致开发一个页面，在这台设备可能设配的，在其他设备就不行</p><p><strong>CSS像素:</strong></p><p>CSS像素也是逻辑像素（logical pixel），也可以是设备独立像素(dip:device independent pixel)</p><p>实际开发会用的像素，比如px就是。</p><p>CSS像素如果在标清用2像素点描述2px，那么在高清屏就是放大到4倍</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211024180350.png"></p><p><strong>设备像素比（dpr:device pixel ratio）:</strong></p><p>设备像素比：dpr= 设备像素/CSS像素（缩比是1的情况下）</p><p><strong>缩放：</strong></p><p>缩放改变的是CSS像素大小</p><p><strong>PPI:</strong></p><p>PPI是pixels per inch缩写，表示为每英寸的物理像素点，也可以是dpi，理解为像素密度点</p><p>计算公式：</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211024174454.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录移动端像素知识。&lt;/p&gt;</summary>
    
    
    
    <category term="移动端Web" scheme="https://www.frontblog.top/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AFWeb/"/>
    
    
    <category term="像素" scheme="https://www.frontblog.top/tags/%E5%83%8F%E7%B4%A0/"/>
    
  </entry>
  
  <entry>
    <title>布局问题</title>
    <link href="https://www.frontblog.top/article/9a7d9672.html"/>
    <id>https://www.frontblog.top/article/9a7d9672.html</id>
    <published>2021-10-23T02:44:08.000Z</published>
    <updated>2021-10-23T04:05:10.932Z</updated>
    
    <content type="html"><![CDATA[<p>在开发网页布局的时候，遇到浏览器正常窗口，正常显示，但是浏览器缩小，页面混乱问题，特此记录一下。</p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>这是正常情况：</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211023105243.png"></p><p>这是缩小情况，非常丑陋：</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211023105341.png"></p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>通过审核元素可以看到，父盒子没有宽度，是由子盒子撑开，但是背景颜色是在父盒子，给父盒子设置宽度即可解决，但是背景颜色是铺满的，所以就需要使用min-width属性。</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/image-20211023110010817.png"></p><p>第二个问题，就是轮播的问题，这里依然使用min-width属性给父盒子设置宽度即可解决。</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211023110527.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>设置width100%是有问题的，当浏览器缩小，那么会认为浏览器就是这么小，宽度就占满，那么再去拖动滚动条，后面的内容也就看不到了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在开发网页布局的时候，遇到浏览器正常窗口，正常显示，但是浏览器缩小，页面混乱问题，特此记录一下。&lt;/p&gt;</summary>
    
    
    
    <category term="开发问题" scheme="https://www.frontblog.top/categories/%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>CSS篇(面试题)</title>
    <link href="https://www.frontblog.top/article/3b5bdfda.html"/>
    <id>https://www.frontblog.top/article/3b5bdfda.html</id>
    <published>2021-10-19T02:19:41.000Z</published>
    <updated>2021-10-27T13:03:45.668Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要收集CSS的面试题目。</p><h1 id="position的值，relative和absolute分别是相对于谁进行定位的？"><a href="#position的值，relative和absolute分别是相对于谁进行定位的？" class="headerlink" title="position的值，relative和absolute分别是相对于谁进行定位的？"></a>position的值，relative和absolute分别是相对于谁进行定位的？</h1><ul><li>absolute: 生成绝对定位的元素， 相对于最近一级的 定位不是<code>static</code>的父元素来进行定位；</li><li>fixed:（老IE不支持）生成绝对定位的元素，通常相对于浏览器窗口或<code>frame</code>进行定位；</li><li>relative: 生成相对定位的元素，相对于其在普通流中的位置进行定位；</li><li>static: 默认值。没有定位，元素出现在正常的流中；</li><li>sticky: 生成粘性定位的元素，容器的位置根据正常文档流计算得出</li></ul><h1 id="display-none和visibility-hidden的区别？"><a href="#display-none和visibility-hidden的区别？" class="headerlink" title="display:none和visibility:hidden的区别？"></a>display:none和visibility:hidden的区别？</h1><ul><li>display:none 隐藏对应的元素，在文档布局中不再给它分配空间，它各边的元素会合拢，就当他从来不存在；</li><li>visibility:hidden 隐藏对应的元素，但是在文档布局中仍保留原来的空间。</li></ul><h1 id="CSS中link和-import的区别是？"><a href="#CSS中link和-import的区别是？" class="headerlink" title="CSS中link和@import的区别是？"></a>CSS中link和@import的区别是？</h1><ul><li>link属于<code>HTML</code>标签，而<code>@import</code>是CSS提供的；</li><li>页面被加载的时，link会同时被加载，而<code>@import</code>被引用的CSS会等到引用它的CSS文件被加载完再加载；</li><li>import只在<code>IE5</code>以上才能识别，而link是<code>HTML</code>标签，无兼容问题；</li><li>link方式的样式的权重 高于<code>@import</code>的权重。</li></ul><h1 id="position-absolute和float属性的异同"><a href="#position-absolute和float属性的异同" class="headerlink" title="position:absolute和float属性的异同"></a>position:absolute和float属性的异同</h1><ul><li>共同点：对内联元素设置<code>float</code>和<code>absolute</code>属性，可以让元素脱离文档流，并且可以设置其宽高。</li><li>不同点：<code>float</code>仍会占据位置，<code>absolute</code>会覆盖文档流中的其他元素。</li></ul><h1 id="介绍一下box-sizing属性？"><a href="#介绍一下box-sizing属性？" class="headerlink" title="介绍一下box-sizing属性？"></a>介绍一下box-sizing属性？</h1><ul><li>box-sizing属性主要用来控制元素的盒模型的解析模式。默认值是<code>content-box</code>；</li><li>content-box：让元素维持W3C的标准盒模型。元素的宽度/高度由<code>border + padding + content</code>的<code>宽度/高度</code>决定，设置<code>width/height</code>属性指的是<code>content</code>部分的<code>宽/高</code>；</li><li>border-box：让元素维持IE传统盒模型（IE6以下版本和IE6~7的怪异模式）。设置<code>width/height</code>属性指的是<code>border + padding + content</code>。</li></ul><p><strong>标准浏览器下，按照W3C规范对盒模型解析，一旦修改了元素的边框或内距，就会影响元素的盒子尺寸，就不得不重新计算元素的盒子尺寸，从而影响整个页面的布局。</strong></p><h1 id="行内元素有哪些？块级元素有哪些？空元素有哪些？"><a href="#行内元素有哪些？块级元素有哪些？空元素有哪些？" class="headerlink" title="行内元素有哪些？块级元素有哪些？空元素有哪些？"></a>行内元素有哪些？块级元素有哪些？空元素有哪些？</h1><p>首先：CSS规范规定，每个元素都有display属性，确定该元素的类型，每个元素都有默认的display值，如div的display默认值为“block”，则为“块级”元素；span默认display属性值为“inline”，是“行内”元素。</p><p>（1）行内元素有：<code>a b span img input select strong（强调的语气）</code> （2）块级元素有：<code>div ul ol li dl dt dd h1 h2 h3 h4…p</code> （3）常见的空元素：<code>&lt;br&gt;&lt;hr&gt; &lt;img&gt; &lt;input&gt; &lt;link&gt; &lt;meta&gt;</code> 鲜为人知的是：<code>&lt;area&gt; &lt;base&gt; &lt;col&gt; &lt;command&gt; &lt;embed&gt; &lt;keygen&gt; &lt;param&gt; &lt;source&gt; &lt;track&gt; &lt;wbr&gt;</code></p><h1 id="对BFC规范的理解？"><a href="#对BFC规范的理解？" class="headerlink" title="对BFC规范的理解？"></a>对BFC规范的理解？</h1><p>BFC，块级格式化上下文，一个创建了新的BFC的盒子是独立布局的，盒子里面的子元素的样式不会影响到外面的元素。在同一个<code>BFC</code>中的两个毗邻的块级盒在垂直方向（和布局方向有关系）的<code>margin</code>会发生折叠。 W3C CSS 2.1 规范中的一个概念，它决定了元素如何对其内容进行布局，以及与其他元素的关系和相互作用。</p><h1 id="如何清除浮动"><a href="#如何清除浮动" class="headerlink" title="如何清除浮动?"></a>如何清除浮动?</h1><ol><li>额外标签<code>clear:both</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.fahter</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">1px</span> solid deeppink;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.big</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: darkorange;</span></span><br><span class="line"><span class="css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.small</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: darkmagenta;</span></span><br><span class="line"><span class="css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"> </span></span><br><span class="line"><span class="css">    <span class="selector-class">.clear</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">clear</span>:both;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fahter&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;big&quot;</span>&gt;</span>big<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;small&quot;</span>&gt;</span>small<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clear&quot;</span>&gt;</span>额外标签法<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>利用<code>BFC</code>，<code>overflow-hidden</code></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fahter</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid deeppink;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>使用<code>after</code>(推荐)</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.clearfix</span>:after&#123;/*伪元素是行内元素 正常浏览器清除浮动方法*/</span></span><br><span class="line"><span class="css">        content: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">clear</span>:both;</span></span><br><span class="line"><span class="css">        <span class="attribute">visibility</span>: hidden;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.clearfix</span>&#123;</span></span><br><span class="line"><span class="css">        *zoom: <span class="number">1</span>;<span class="comment">/*ie6清除浮动的方式 *号只有IE6-IE7执行，其他浏览器不执行*/</span></span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fahter clearfix&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;big&quot;</span>&gt;</span>big<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;small&quot;</span>&gt;</span>small<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;div class=&quot;clear&quot;&gt;额外标签法&lt;/div&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="常见的行内元素和块级元素都有哪些？"><a href="#常见的行内元素和块级元素都有哪些？" class="headerlink" title="常见的行内元素和块级元素都有哪些？"></a>常见的行内元素和块级元素都有哪些？</h1><ul><li>行内元素 <code>inline</code><ul><li>不能设置宽高，不能自动换行。</li><li>span、input、img、textarea、label、select。</li></ul></li><li>块级元素 block<ul><li>可以设置宽高，会自动换行。</li><li>p、h1/h2/h3/h4/h5、div、ul、li、table。</li></ul></li><li>inline-block<ul><li>可以设置宽高，会自动换行。</li></ul></li></ul><h1 id="常见的替换元素和非替换元素？"><a href="#常见的替换元素和非替换元素？" class="headerlink" title="常见的替换元素和非替换元素？"></a>常见的替换元素和非替换元素？</h1><ul><li>替换元素<ul><li>是指若标签的属性可以改变标签的显示方式就是替换元素，比如<code>input</code>的<code>type</code>属性不同会有不同的展现，<code>img</code>的 <code>src</code> 等。</li><li>img、input、iframe。</li></ul></li><li>非替换元素<ul><li>div、span、p。</li></ul></li></ul><h1 id="什么是-DOM-事件流？什么是事件委托？"><a href="#什么是-DOM-事件流？什么是事件委托？" class="headerlink" title="什么是 DOM 事件流？什么是事件委托？"></a>什么是 DOM 事件流？什么是事件委托？</h1><ul><li>DOM 事件流<ul><li>分为三个阶段<ul><li>捕获阶段</li><li>目标阶段</li><li>冒泡阶段</li></ul></li><li>在<code>addeventListener()</code>的第三个参数<code>useCapture</code>设为<strong>true</strong>，就会在捕获阶段运行，默认是<strong>false</strong>冒泡。</li></ul></li><li>事件委托<ul><li>利用冒泡原理(子向父一层层穿透)，把事件绑定到父元素中，以实现事件委托。</li></ul></li></ul><h1 id="什么是FOUC（无样式内容闪烁）？你如何来避免FOUC？"><a href="#什么是FOUC（无样式内容闪烁）？你如何来避免FOUC？" class="headerlink" title="什么是FOUC（无样式内容闪烁）？你如何来避免FOUC？"></a>什么是FOUC（无样式内容闪烁）？你如何来避免FOUC？</h1><p>FOUC - FlashOf Unstyled Content 文档样式闪烁</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;styletype=&quot;text/css&quot;media=&quot;all&quot;&gt;@import&quot;../fouc.css&quot;;<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而引用CSS文件的@import就是造成这个问题的罪魁祸首。IE会先加载整个HTML文档的DOM，然后再去导入外部的CSS文件，因此，在页面DOM加载完成到CSS导入完成中间会有一段时间页面上的内容是没有样式的，这段时间的长短跟网速，电脑速度都有关系。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要收集CSS的面试题目。&lt;/p&gt;</summary>
    
    
    
    <category term="面试题" scheme="https://www.frontblog.top/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="面试题" scheme="https://www.frontblog.top/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
</feed>
