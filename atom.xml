<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大前端_LSF</title>
  
  <subtitle>斯是陋室，为吾德馨</subtitle>
  <link href="https://www.frontblog.top/atom.xml" rel="self"/>
  
  <link href="https://www.frontblog.top/"/>
  <updated>2021-11-13T04:45:24.607Z</updated>
  <id>https://www.frontblog.top/</id>
  
  <author>
    <name>const name=&quot;LSF&quot;</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DOM的事件监听</title>
    <link href="https://www.frontblog.top/article/448136fd.html"/>
    <id>https://www.frontblog.top/article/448136fd.html</id>
    <published>2021-11-13T04:00:49.000Z</published>
    <updated>2021-11-13T04:45:24.607Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录DOM的事件监听</p><h1 id="什么是事件监听"><a href="#什么是事件监听" class="headerlink" title="什么是事件监听"></a>什么是事件监听</h1><p>事件就是用户与网页的交互，监听就是对用户的操作做出反应，执行一些程序代码。</p><p>最简单的给元素设置事件监听的方法就是设置它们的on XXX属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//点击元素，做出反应</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="常见鼠标事件"><a href="#常见鼠标事件" class="headerlink" title="常见鼠标事件"></a>常见鼠标事件</h1><table><thead><tr><th align="center">事件名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">onclick</td><td align="center">单击</td></tr><tr><td align="center">ondblcick</td><td align="center">双击</td></tr><tr><td align="center">onmousedown</td><td align="center">按下</td></tr><tr><td align="center">onmouseup</td><td align="center">松开</td></tr><tr><td align="center">onmousemove</td><td align="center">划过的时候触发</td></tr><tr><td align="center">onmouseenter</td><td align="center">鼠标进入</td></tr><tr><td align="center">onmouseleave</td><td align="center">鼠标离开</td></tr></tbody></table><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">     <span class="selector-class">.btn</span> &#123;</span></span><br><span class="line"><span class="css">       <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">       <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">       <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">       <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">       <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">       <span class="attribute">line-height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">       <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">       <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="css">       <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="css">     &#125;</span></span><br><span class="line"><span class="css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>onclick单击<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;button1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>ondblclick双击<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;button2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>onmousedown按下<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;button3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>onmouseup松开<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;button4&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>onmousemove划过<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;button5&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>onmouseenter鼠标进入<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;button6&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>onmouseleave鼠标离开<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> button = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> button1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> button2 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> button3 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button3&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> button4 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button4&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> button5 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button5&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> button6 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button6&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     button.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       button.innerText = <span class="string">&#x27;我被点击了&#x27;</span>;</span></span><br><span class="line"><span class="javascript">     &#125;;</span></span><br><span class="line"><span class="javascript">     button1.ondblclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       button1.innerText = <span class="string">&#x27;我被双击了&#x27;</span>;</span></span><br><span class="line"><span class="javascript">     &#125;;</span></span><br><span class="line"><span class="javascript">     button2.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       button2.innerText = <span class="string">&#x27;我按下了&#x27;</span>;</span></span><br><span class="line"><span class="javascript">       button2.style = <span class="string">&#x27; background-color: red&#x27;</span>;</span></span><br><span class="line"><span class="javascript">     &#125;;</span></span><br><span class="line"><span class="javascript">     button3.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       button3.innerText = <span class="string">&#x27;鼠标松开&#x27;</span>;</span></span><br><span class="line"><span class="javascript">       button3.style = <span class="string">&#x27; background-color: green&#x27;</span>;</span></span><br><span class="line"><span class="javascript">     &#125;;</span></span><br><span class="line"><span class="javascript">     button4.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       button4.innerText = <span class="string">&#x27;鼠标划过&#x27;</span>;</span></span><br><span class="line"><span class="javascript">       button4.style = <span class="string">&#x27; background-color: green&#x27;</span>;</span></span><br><span class="line"><span class="javascript">     &#125;;</span></span><br><span class="line"><span class="javascript">     button5.onmouseenter = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       button5.innerText = <span class="string">&#x27;鼠标进入&#x27;</span>;</span></span><br><span class="line"><span class="javascript">       button5.style = <span class="string">&#x27; background-color: green&#x27;</span>;</span></span><br><span class="line"><span class="javascript">     &#125;;</span></span><br><span class="line"><span class="javascript">     button6.onmouseleave = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       button6.innerText = <span class="string">&#x27;鼠标离开&#x27;</span>;</span></span><br><span class="line"><span class="javascript">       button6.style = <span class="string">&#x27; background-color: green&#x27;</span>;</span></span><br><span class="line"><span class="javascript">     &#125;;</span></span><br><span class="line"><span class="javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="常见键盘事件"><a href="#常见键盘事件" class="headerlink" title="常见键盘事件"></a>常见键盘事件</h1><h1 id="常见表单事件"><a href="#常见表单事件" class="headerlink" title="常见表单事件"></a>常见表单事件</h1><h1 id="常见页面事件"><a href="#常见页面事件" class="headerlink" title="常见页面事件"></a>常见页面事件</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文记录DOM的事件监听&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="事件监听" scheme="https://www.frontblog.top/tags/%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/"/>
    
  </entry>
  
  <entry>
    <title>DOM的基础</title>
    <link href="https://www.frontblog.top/article/6b13fd80.html"/>
    <id>https://www.frontblog.top/article/6b13fd80.html</id>
    <published>2021-11-12T08:56:19.000Z</published>
    <updated>2021-11-13T04:45:30.761Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录DOM的基础用法，如何增删改查一个DOM元素。</p><h1 id="DOM是什么"><a href="#DOM是什么" class="headerlink" title="DOM是什么"></a>DOM是什么</h1><p>DOM（Document Object Model,文档类型对象）</p><p>JS想要去操作HTML和CSS代码，就需要使用DOM，它是属于JS的Api，通过调用这些Api就才能去操作页面结构，DOM的思想是把页面的HTML标签当作一个节点，通过获取这些节点进行具体的操作，让页面具有“动态性”</p><p>一个DOM树：</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211112172437.png"></p><h1 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h1><p>检测节点类型，使用nodeType，带☆指比较常见的。</p><table><thead><tr><th align="center">nodeType值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">☆  1</td><td align="center">元素节点</td></tr><tr><td align="center">2</td><td align="center">属性节点</td></tr><tr><td align="center">☆  3</td><td align="center">文字节点</td></tr><tr><td align="center">4</td><td align="center">文档中的 CDATA 部分（不会由解析器解析的文本）</td></tr><tr><td align="center">5</td><td align="center">实体引用</td></tr><tr><td align="center">6</td><td align="center">实体</td></tr><tr><td align="center">7</td><td align="center">处理指令</td></tr><tr><td align="center">☆  8</td><td align="center">注释节点</td></tr><tr><td align="center">☆  9</td><td align="center">doctument节点</td></tr><tr><td align="center">☆ 10</td><td align="center">DTD节点</td></tr><tr><td align="center">11</td><td align="center">轻量级的 Document 对象，能够容纳文档的某个部分</td></tr><tr><td align="center">12</td><td align="center">DTD 中声明的符号</td></tr></tbody></table><h1 id="节点关系"><a href="#节点关系" class="headerlink" title="节点关系"></a>节点关系</h1><p>先看一张图片：</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211112174201.png"></p><p>父节点要访问子节点可以通过：firstChild调用第一个子节点、lastChild调用最后一个节点、childNodes调用子节点。</p><p>子节点想要访问父节点可以通过：parentNode调用父节点</p><p>同层级兄弟节点可以通过：nextSibling访问下一个节点，previousSibling访问上一个节点</p><p>需要注意的是，<strong>空白文本节点也是节点，使用上面的api会获取空白节点。</strong>通过只考虑元素节点的api就可以排除空白节点的干扰。</p><table><thead><tr><th align="center">关系</th><th align="center">考虑所有节点</th><th align="center">只考虑元素节点(IE9)</th></tr></thead><tbody><tr><td align="center">第一个子节点</td><td align="center">firstChild</td><td align="center">firstElementChild</td></tr><tr><td align="center">最后一个子节点</td><td align="center">lastChild</td><td align="center">lastElementChild</td></tr><tr><td align="center">子节点</td><td align="center">childNodes</td><td align="center">children</td></tr><tr><td align="center">父节点</td><td align="center">parentNode</td><td align="center">同</td></tr><tr><td align="center">前一个兄弟节点</td><td align="center">previousSibling</td><td align="center">previousElementSibling</td></tr><tr><td align="center">后一个兄弟节点</td><td align="center">nextSibling</td><td align="center">nextElementSibling</td></tr></tbody></table><h1 id="document对象-获取节点"><a href="#document对象-获取节点" class="headerlink" title="document对象(获取节点)"></a>document对象(获取节点)</h1><p>document对象是本文档的根，几乎所有DOM的功能都封装在这个对象里面</p><p>访问元素节点的五个常用方法：</p><table><thead><tr><th align="center">方法</th><th align="center">功能</th><th align="center">兼容性</th></tr></thead><tbody><tr><td align="center">getElementById()</td><td align="center">通过<strong>id</strong>得到元素</td><td align="center">IE6</td></tr><tr><td align="center">getElementsByTagName()</td><td align="center">通过<strong>标签</strong>得到<strong>元素数组</strong></td><td align="center">IE6</td></tr><tr><td align="center">getElementsByClassName()</td><td align="center">通过<strong>类名</strong>得到<strong>元素数组</strong></td><td align="center">IE9</td></tr><tr><td align="center">querySelector()</td><td align="center">通过<strong>选择器</strong>得到<strong>元素</strong></td><td align="center">IE8部分兼容、IE9完全兼容</td></tr><tr><td align="center">querySelectorAll()</td><td align="center">通过<strong>选择器</strong>得到<strong>元素数组</strong></td><td align="center">IE8部分兼容、IE9完全兼容</td></tr></tbody></table><p>getElementById()：如果页面有两个相同ID，只会获取第一个ID的盒子</p><p>getElementsByTagName()：得到的是一个节点数组。某个节点也可以调用getElementsByTagName()，从而得到内部的子节点。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>box段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>box段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>box段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>box段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 得到app里面的p</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> p = app.getElementsByTagName(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(p);</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>querySelector()：通过选择器选中节点，但是如果多个符合条件，只能选中第一个。</p><p>querySelectorAll()：通过选择器选中节点,可以选中多个。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      我是段落</span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是Span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      我是段落</span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是Span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#app p span&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app1 = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;#app p span&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(app1[<span class="number">0</span>]);</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h1><blockquote><p>注意，下面提到的app都是节点的代号，无其他含义</p></blockquote><p><strong>获取节点后，肯定是需要对节点相应的操作。对节点的操作有两个属性：innerHTML和innerText</strong></p><p>innerHTML：可以插入文字节点和HTML标签</p><p>innerText：只能插入纯文字</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    app.innerHTML = <span class="string">&#x27;&lt;h1&gt;Vue is Good&lt;/h1&gt;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    app.innerHTML = <span class="string">&#x27;Vue is Good&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    app.innerText = <span class="string">&#x27;Vue is Good&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    app.innerText = <span class="string">&#x27;&lt;h1&gt;Vue is Good&lt;/h1&gt;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>操作节点改变CSS属性:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/base.css&quot;</span> <span class="attr">id</span>=<span class="string">&quot;css&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">     <span class="selector-id">#app</span> &#123;</span></span><br><span class="line"><span class="css">       <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">       <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">       <span class="comment">/* background-color: aqua; */</span></span></span><br><span class="line"><span class="css">     &#125;</span></span><br><span class="line"><span class="css">     <span class="selector-class">.style2</span> &#123;</span></span><br><span class="line"><span class="css">       <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css">     &#125;</span></span><br><span class="line"><span class="css">     <span class="selector-class">.style3</span> &#123;</span></span><br><span class="line"><span class="css">       <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">     &#125;</span></span><br><span class="line"><span class="css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     <span class="comment">//下面两种效果一样，都属于内联式：通过内联式修改</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">//app.style.backgroundColor = &#x27;red&#x27;;</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">//app.style.cssText = &#x27;background-color:blue&#x27;;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="comment">//更改类名为style2或者style3：通过修改类名来修改样式</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">// app.setAttribute(&#x27;class&#x27;, &#x27;style2&#x27;);</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">// app.className = &#x27;style3&#x27;;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="comment">//通过更改href属性来修改样式</span></span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> css = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;css&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     css.setAttribute(<span class="string">&#x27;href&#x27;</span>, <span class="string">&#x27;css/base1.css&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     <span class="comment">//css.href = &#x27;./css/base1.css&#x27;;</span></span></span><br><span class="line"><span class="javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要有三种方法：</p><ul><li><code>app.style.backgroundColor</code>：直接调用属性，赋值属性值，<code>app.style.cssText</code>则是赋值属性和属性值，两者都是内联式，直接添加到标签里面</li><li><code>app.setAttribute(&#39;class&#39;, &#39;style2&#39;)</code>：是通过更改类名，达到修改样式作用，前提是这个类名需要在样式表定义好。<code>app.className = &#39;style3&#39;;</code>也是同样的道理，修改类名。</li><li> <code>css.setAttribute(&#39;href&#39;, &#39;css/base1.css&#39;);</code>和<code>css.href = &#39;./css/base1.css&#39;;</code>都是通过修改引入样式表的文件来修改样式。</li></ul><p>操作节点属性也特别简单，只需要获取节点后，调用属性即可，例如：app.href、app.src等等。</p><p><strong>setAttribute和getAttribute</strong></p><p>上面使用setAttribute，其实和getAttribute是配对的，我们可以使用setAttribute设置属性，getAttribute获取属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    app.setAttribute(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;10&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(app.getAttribute(<span class="string">&#x27;test&#x27;</span>)); <span class="comment">//10</span></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="节点创建、移动、删除、克隆"><a href="#节点创建、移动、删除、克隆" class="headerlink" title="节点创建、移动、删除、克隆"></a>节点创建、移动、删除、克隆</h1><p><strong>节点创建和挂载</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第一个子节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第二个子节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第三个子节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//获取父节点</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//获取p段落</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> paragraph = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//创建节点</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//节点插入文字</span></span></span><br><span class="line"><span class="javascript">    p.innerText = <span class="string">&#x27;我是段落&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//节点挂载</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//app.appendChild(p);//插入到父节点中最后的子节点</span></span></span><br><span class="line"><span class="javascript">    app.insertBefore(p, paragraph[<span class="number">2</span>]); <span class="comment">//插入到父节点里面的任意位置，需要一个标记，在这个标记的前面</span></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建的节点只是创建了标签，要想在页面上显示，就必须把标签挂在到DOM树上，使用appendChild和insertBefore就可以把节点挂载到DOM树上。两个不同在于，insertBefore更加灵活，需要指定一个标记。</p><p>用法：</p><p>appendChild:   父节点.appendChild(新的子节点)</p><p>insertBefore:    父节点.insertBefore(新的子节点,标杆节点)</p><p>小案例，动态创建表格：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="css">   <span class="attribute">order</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">   <span class="attribute">width</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">   <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">   <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">   <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;table&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">//获取节点</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> tab = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;table&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">//创建table</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> table = <span class="built_in">document</span>.createElement(<span class="string">&#x27;table&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 挂载</span></span></span><br><span class="line"><span class="javascript">      tab.appendChild(table);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//20列</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> tr = <span class="built_in">document</span>.createElement(<span class="string">&#x27;tr&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        table.appendChild(tr);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">12</span>; j++) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//12行</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> td = <span class="built_in">document</span>.createElement(<span class="string">&#x27;td&#x27;</span>);</span></span><br><span class="line"><span class="javascript">          tr.appendChild(td);</span></span><br><span class="line"><span class="javascript">          td.innerText = j;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>动态创建九九乘法表：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">55px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">      <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> table = <span class="built_in">document</span>.createElement(<span class="string">&#x27;table&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    app.appendChild(table);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//9行</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> tr = <span class="built_in">document</span>.createElement(<span class="string">&#x27;tr&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      table.appendChild(tr);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 第一行输出一列</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> td = <span class="built_in">document</span>.createElement(<span class="string">&#x27;td&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        tr.appendChild(td);</span></span><br><span class="line"><span class="javascript">        td.innerText = j + <span class="string">&#x27;*&#x27;</span> + i + <span class="string">&#x27;=&#x27;</span> + i * j;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>节点的移动：</strong></p><p>appendChild和insertBefore不仅可以挂载到DOM树上面，还可以移动节点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是移动过来的<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>标杆节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>标杆节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>标杆节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//获取原父节点</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//获取新的父节点</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 获取要移动的节点</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> p = app.firstElementChild;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 获取标杆</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> vp = box.children[<span class="number">1</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// box.appendChild(p);//移动到新的父节点里面的最后</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    box.insertBefore(p, vp); <span class="comment">//标杆节点前面</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><strong>节点的删除：</strong></p><p>使用removeChild()方法从DOM中删除一个子节点，子节点不能主动删除自己，必须由父节点删除它</p><p>父节点.removeChild(要删除的子节点)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我被删除<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    app.removeChild(app.firstElementChild);</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>节点的克隆：</strong></p><p>使用cloneNode()方法可以克隆节点，克隆的节点需要挂载到DOM树，参数是布尔值，默认是false，true代表深克隆，即节点下面的子节点都会一起克隆，反之不会。</p><p>var 克隆节点 = 旧节点.clineNode()</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>深克隆<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>标杆节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>标杆节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>标杆节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取标杆</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vp = box.children[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> newnode = app.cloneNode(<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//box.appendChild(newnode);</span></span></span><br><span class="line"><span class="javascript">    box.insertBefore(newnode, vp); <span class="comment">//标杆节点前面</span></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="延迟执行"><a href="#延迟执行" class="headerlink" title="延迟执行"></a>延迟执行</h1><p>可以使用window.onload = function(){}，使页面加载完成后再执行指定代码。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>JS的DOM节点无非就是获取，操作和挂载这几个方向，但是一个页面是非常复杂的，频繁操作DOM也非常消耗性能，这也是为啥现在大都使用MVVM框架。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录DOM的基础用法，如何增删改查一个DOM元素。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="DOM" scheme="https://www.frontblog.top/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript全局作用和局部作用闭包相关面试题</title>
    <link href="https://www.frontblog.top/article/634c77b2.html"/>
    <id>https://www.frontblog.top/article/634c77b2.html</id>
    <published>2021-11-11T02:45:46.000Z</published>
    <updated>2021-11-13T03:59:43.857Z</updated>
    
    <content type="html"><![CDATA[<p>近段时间看了许多JS基础的面试题，特此记录一下，本文主要通过例子和分析的形式记录。</p><h1 id="第一个例子："><a href="#第一个例子：" class="headerlink" title="第一个例子："></a>第一个例子：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br></pre></td></tr></table></figure><ul><li>这可以说面试中基本会遇到的，稍微查过的都知道这里输出6个5。</li><li>首先for 循环里的 <code>setTimeout</code> 执行了 5 次，每次都会将这个函数的执行推迟 <code>1000ms</code> ：</li><li>接下来就是这个函数被执行，那么此时函数的输出语句i就会往外找，而此时i已经是最终的5（最后的i++变成5），所以输出的都是5，for循环和<code>setTimeout</code>是不相互影响，可以理解为for循环把<code>setTimeout</code>平放了5次，那么5次之后，这些函数就会同时输出5。</li><li>最终结果就是：先输出最外层的5,<code>1000ms</code>后同时输出5个5</li></ul><h1 id="第二个例子："><a href="#第二个例子：" class="headerlink" title="第二个例子："></a>第二个例子：</h1><p>个人觉得也很套路的题目。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = []</span><br><span class="line">    <span class="keyword">var</span> i</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        num[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num[<span class="number">9</span>]</span><br><span class="line">&#125;</span><br><span class="line">test()()</span><br></pre></td></tr></table></figure><ul><li>先看看这段代码在干嘛：test()()是调用了该函数后立即执行掉，也就是test函数返回一个函数，再看test函数，里面定义了一个空数组和变量i，一个for循环了10次，数组的每一项推入一个函数，这个函数输出i，最后test函数返回数组的第9项。</li><li>可能会这样想：<code>num[i]</code>对象的函数就是  <code>console.log(i)</code>，换句话就是，<code>num[5]</code>输出的就是5，其实这样想就已经掉坑了，<strong>函数只有被调用的时候才执行</strong>，你这里的函数在for循环里面执行了吗，显然没有，我们是在test()()这里才执行的，所以，这里函数的i是不是要往外找，而这个i已经是最终的10，所以你无论下标是多少都是输出10</li><li>最终结果就是：输出10</li></ul><h1 id="第三个例子："><a href="#第三个例子：" class="headerlink" title="第三个例子："></a>第三个例子：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">test()();</span><br></pre></td></tr></table></figure><ul><li>依旧看代码代码在干嘛：全局定义了变量a，定义函数，函数调用后执行返回的函数，再看test函数，变量a属于全局，返回函数，这个函数输出的是a，最后又定义了a等于3。</li><li>这题目主要是要看全，注意变量提升，JS的执行阶段都会把变量提升到当前作用域前面，所以函数里面的a初看是全局，但是变量提升后，使得它变成了局部变量，注意，变量只提升定义，所以a在执行阶段就赋值了a等于2，返回的函数里卖弄没有i，往外找就是找到外层函数i，正是刚才的2.</li><li>最终结果就是：输出2</li></ul><h1 id="第四个例子："><a href="#第四个例子：" class="headerlink" title="第四个例子："></a>第四个例子：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">foo</span>:<span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> foo(c,a);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> func1=foo(<span class="number">0</span>);<span class="comment">//undefined</span></span><br><span class="line">func1.foo(<span class="number">1</span>);<span class="comment">//0</span></span><br><span class="line">func1.foo(<span class="number">2</span>);<span class="comment">//0</span></span><br><span class="line">func1.foo(<span class="number">3</span>);<span class="comment">//0</span></span><br><span class="line"><span class="keyword">var</span> func2=foo(<span class="number">0</span>).foo(<span class="number">1</span>).foo(<span class="number">2</span>).foo(<span class="number">3</span>);<span class="comment">//undefined、0、0、0</span></span><br><span class="line"><span class="keyword">var</span> func3=foo(<span class="number">0</span>).foo(<span class="number">1</span>);<span class="comment">//undefined、0</span></span><br><span class="line">func3.foo(<span class="number">2</span>);<span class="comment">//1</span></span><br><span class="line">func3.foo(<span class="number">3</span>);<span class="comment">//1</span></span><br></pre></td></tr></table></figure><ul><li>当初看这题目瞬间就懵了，这写的什么，foo连续调用什么东西，什么abc的，其实这些都是为了混淆，只要仔细分析，基础扎实，这题还是容易的</li><li>我把上面的题目简化成了一下这种，当然就是输出了a和b的值：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&#x27;a——&gt;&#x27;</span> + a);</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&#x27;b——&gt;&#x27;</span> + b);</span><br><span class="line">       <span class="keyword">return</span> &#123;</span><br><span class="line">         <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> foo(c, a);</span><br><span class="line">         &#125;,</span><br><span class="line">       &#125;;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">var</span> func1 = foo(<span class="number">0</span>); <span class="comment">//0,undefined</span></span><br><span class="line">     func1.foo(<span class="number">1</span>); <span class="comment">//1,0</span></span><br><span class="line">     func1.foo(<span class="number">2</span>); <span class="comment">//2,0</span></span><br><span class="line">     func1.foo(<span class="number">3</span>); <span class="comment">//3,0</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">var</span> func2 = foo(<span class="number">0</span>).foo(<span class="number">1</span>).foo(<span class="number">2</span>).foo(<span class="number">3</span>); <span class="comment">//0,undefine,1,0,2,1,3,2 写法更上面一样</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">var</span> func3 = foo(<span class="number">0</span>).foo(<span class="number">1</span>); <span class="comment">//0，undefine,1,0  </span></span><br><span class="line">     func3.foo(<span class="number">2</span>); <span class="comment">//2，1</span></span><br><span class="line">     func3.foo(<span class="number">3</span>); <span class="comment">//3，1</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211111151132.png"></p><ul><li><p>这题目可以分为三种写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;a——&gt;&#x27;</span> + a);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;b——&gt;&#x27;</span> + b);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> foo(c, a);</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func1 = foo(<span class="number">0</span>); <span class="comment">//0,undefined</span></span><br><span class="line">func1.foo(<span class="number">1</span>); <span class="comment">//1,0</span></span><br><span class="line">func1.foo(<span class="number">2</span>); <span class="comment">//2,0</span></span><br><span class="line">func1.foo(<span class="number">3</span>); <span class="comment">//3,0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//等同于：</span></span><br><span class="line"><span class="comment">//foo(0).foo(1)</span></span><br><span class="line"><span class="comment">//foo(0).foo(2)</span></span><br><span class="line"><span class="comment">//foo(0).foo(3)</span></span><br></pre></td></tr></table></figure></li></ul><p><code>var func1 = foo(0)</code>：这段代码传入了一个参数为0，那么这里a就是0，b为undefined，输出0，undefined，这一点不难理解。</p><p><code>func1.foo(1)</code>foo函数返回了一个对象，这个对象的属性又是一个函数，这个函数返回foo函数，这里千万不能被绕晕了，这段代码给了一个1的数字，其实就是传给了变量c，调用foo函数，传入的c就是给了a，这里a就输出了1，再回来看foo对象里面的函数里面的a，它会往外找，这是JS的作用域链，我们闭包的变量是存放在内存中不会被回收的，所以这里的a就是上面的0</p><p><code>func1.foo(2)</code>和<code>func1.foo(3)</code>同样的，都是调用了对象传入参数，c对应a，a对应b，c是我们传入的2、3，那么a就是闭包记住的0。</p><p>回到最初的题目，看下是不是一样的</p><ul><li>第二种写法初看会觉得很懵，但是仔细推敲，其实不难。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;a——&gt;&#x27;</span> + a);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;b——&gt;&#x27;</span> + b);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> foo(c, a);</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="keyword">var</span> func2 = foo(<span class="number">0</span>).foo(<span class="number">1</span>).foo(<span class="number">2</span>).foo(<span class="number">3</span>); <span class="comment">//0,undefined,1,0,2,1,3,2</span></span><br></pre></td></tr></table></figure><p>首先<code>foo(0)</code>是在调用函数，之后则是调用对象里面的方法，调用函数，最先输出0和undefined，记住此时a是0</p><p>接下来<code>foo(1)</code>是在调用对象的属性函数，c是传入给a，输出a等于1，那么a往外找就是0，输出1和0，记住此时a是1</p><p><code>foo(2)</code>也在调用对象的属性函数，c传给a，输出a等于2，a往外找是1，输出的是2和1，记住此时a是2</p><p><code>foo(3)</code>同理，输出3和2，因为2是刚才的a。</p><p>看到这里，不免有些困惑，那刚才的a怎么就没记住，其实记住了，那就是0如果没懂，第三种写法你就会看出什么了。</p><ul><li>第三种则是前两种的结合。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">undefined</span>，<span class="number">1</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;a——&gt;&#x27;</span> + a);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;b——&gt;&#x27;</span> + b);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> foo(c, a);</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="keyword">var</span> func3 = foo(<span class="number">0</span>).foo(<span class="number">1</span>); <span class="comment">//0，undefined、1、0</span></span><br><span class="line">func3.foo(<span class="number">2</span>); <span class="comment">//2，1</span></span><br><span class="line">func3.foo(<span class="number">3</span>); <span class="comment">//3，1</span></span><br></pre></td></tr></table></figure><ul><li><code>var func3 = foo(0).foo(1)</code>输出的确实是0，undefined、1、0，调用函数时：undefined，1，这里a = 0、b=undefined、调用对象时：a=1，b=0，记住这里的a时被记住的，也就是后面的a输出为啥是1；</li><li><code>func3.foo(2)</code>输出的是2、1，c等于a输出2，这个没问题，那这个a会往外找，而此时a是1，所以是2和1。</li><li><code>func3.foo(3)</code>是一样的，a记住的是1，输出3和1</li></ul><p>至此回头看原题，答案一目了然！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;近段时间看了许多JS基础的面试题，特此记录一下，本文主要通过例子和分析的形式记录。&lt;/p&gt;</summary>
    
    
    
    <category term="面试题" scheme="https://www.frontblog.top/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="面试题" scheme="https://www.frontblog.top/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript基础知识总结</title>
    <link href="https://www.frontblog.top/article/f32bf739.html"/>
    <id>https://www.frontblog.top/article/f32bf739.html</id>
    <published>2021-11-10T09:45:55.000Z</published>
    <updated>2021-11-12T04:27:28.343Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要总结近段时间以来的JavaScript的基础知识。</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>JS在ES5中使用var定义变量，在ES6中新增了let和const。</p><p>var的变量可以是任何数据类型，这点是区别Java或者C等强类型语言的。</p><p>使用var变量会存在变量声明提升问题，变量的提升会提升到当前的作用域，只提升变量不会提升值。</p><p>需要注意的是，除了函数和函数参数属于局部变量，使用var定义的变量都属于全局变量。</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p><strong>Number类型：</strong></p><p>在JS中，所有的数字都属于Number类型，科学计数法也属于，<strong>数字类型中一个特别的值：NaN，它是一个不自等的值</strong></p><p><strong>String类型：</strong></p><p>字符串是使用引号包裹的一串字符。</p><p>常用的7个方法：</p><ul><li>charAt(a)：返回指定位置的字符，位置从0开始</li><li>substring(a,b)：返回<strong>a开始到b结束，不包括b</strong>的子串 ，<strong>b不写则会一直截取到结束，不接受负的参数</strong>，自动调换位置。从小到大的形式</li><li>substr(a,b)：返回<strong>从a开始，b作为长度的子串，如果b省略，则会一直选择到字符串结尾</strong>，a还可以是负数，表示倒数，<strong>b不可以是负数</strong>，<strong>倒数后是往后边选的</strong></li><li>slice(a,b)：返回<strong>从a开始，b结束（不包括b）的子串，a，b可以是负数，表示倒数第几位，a必须小于b</strong>，<strong>不会自动调换位置</strong></li><li>toUpperCase()：返回字符串的小写形式</li><li>toLowerCase()：返回字符串大写形式</li><li>indexOf()：返回字符串首次出现位置，没有返回-1</li></ul><p><strong>Boolean类型:</strong></p><p>表示真假的数据类型，布尔类型值只有<code>true</code>和<code>false</code>，在判断条件中，除了以下六种情况都为真</p><p>1、undefined（未定义，找不到值时出现）</p><p>2、null（代表空值）</p><p>3、false（布尔值的false，字符串”false”布尔值为true）</p><p>4、0（数字0，字符串”0”布尔值为true）</p><p>5、<code>NaN</code>（无法计算结果时出现，表示”非数值”；但是typeof NaN===”number”）</p><p>6、””（双引号）或’’（单引号） （<strong>空字符串，中间有空格时也是true</strong>）</p><p><strong>Undefine类型：</strong></p><p>变量的默认值，它既是类型也是值，它的类型只有一个值，就是它本身，在变量声明中，提升的默认就是undefined</p><p><strong>Null类型:</strong></p><p>null表示’空‘，它是空对象</p><p><strong>数据类型检测：</strong></p><p>使用typeof可以对数据类型检测。</p><p><strong>如何判断变量值为NaN?</strong></p><p>使用isNaN传入变量值，会返回布尔值，但是因为其原理还是使用Number函数</p><p><strong>类型转换：</strong></p><ul><li><p>其他数-&gt;数字：使用Number函数，除了使用Number函数，还可以使用<code>parseInt</code>函数，将字符串转为整数，还可以使用<code>parseFloat</code>函数，<code>parseFloat</code>函数是将字符串转为浮点数，<code>parseInt</code>和<code>parseFloat</code>去**对布尔、null和undefined类型转换会变成<code>NaN</code>**，因为会被隐式转换为字符串，字符串转数字得到结果就是<code>NaN</code></p></li><li><p>其他数-&gt;字符串：使用String函数，还可以使用使用toString()方法</p></li><li><p>其他数-&gt;布尔值：使用Boolean函数</p></li></ul><p><strong>包装对象：</strong></p><p><strong>存取</strong>字符串、数字或布尔值的属性时，<strong>创建的临时对象</strong>称为包装对象，null和undefined没有包装对象，尝试使用“.”访问它们的属性会报错。</p><h1 id="表达式和运算符"><a href="#表达式和运算符" class="headerlink" title="表达式和运算符"></a>表达式和运算符</h1><p><strong>运算符</strong>：也叫操作符，是一种符号。通过运算符可以对一个或多个值进行运算，并获取运算结果。</p><p><strong>表达式</strong>：由数字、运算符、变量的组合（组成的式子）。</p><p>运算符主要分为：</p><p>算术运算符:+、-、*、/、%</p><p>关系运算符:&gt;、&lt;、&gt;=、&lt;=、==、!=、===、!==</p><p>逻辑运算符：！、&amp;&amp;、||</p><p>赋值运算符：=、+=、-=、*=、/=、%=、++、–</p><p>优先级：非运算-&gt;数学运算-&gt;关系运算-&gt;逻辑运算</p><p>隐式转换：如果参与数学运算符的某操作数不是数字类型，那么JavaScript会自动将操作数转换为数字型，本质是内部调用Number函数。如果是加号，其中有字符串，那么就不是进行计算而是进行拼接</p><p>IEEE754：小数结算可能会出现不准，使用tofix()保留小数点后几位</p><h1 id="逻辑判断和循环语句"><a href="#逻辑判断和循环语句" class="headerlink" title="逻辑判断和循环语句"></a>逻辑判断和循环语句</h1><p>if语句：if语句是最简单的条件语句，也称选择语句，它通常结合else一起使用，表示如果..就…否则…，if…else…一定会选择一条语句执行</p><p>if…elseif…语句：else if()条件分支“暗含”了不符合之前所有条件。</p><p>switch语句:在switch中圆括号中一般是一个变量命，这个变量被分类讨论，case表示“情况”，它后面没有圆括号，直接跟一个值，程序会依次将case后面的值与switch中圆括号的值<strong>全等比对</strong></p><p>三元运算符：条件表达式？表达式1：表达式2，表达式为真则执行表达式1，否则执行表达式2</p><p>for语句：适合一些规定范围</p><p>while语句：适合不定范围</p><p>do…while语句:至少会执行一次</p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>定义数组的三种方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ary = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)<span class="comment">//这样写有个缺点,既我想输入一个数字，其实只是去定义长度</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">4</span>)<span class="comment">//定义数组长度为4，值为undefined</span></span><br></pre></td></tr></table></figure><p>数组方法：</p><p>push()方法：在数组尾部插入新项：参数就是要插入的项，如果要插入多项，可以用逗号隔开，使用push()方法后，数组会立即改变</p><p>pop()方法：在数组尾部删除一项：没有参数，只能删除一项,返回的值是被删除的项。</p><p>unshift()方法:在数组头部插入新项：参数就是要插入的项，如果要插入多项，可以用逗号隔开，使用unshift()方法后，数组会立即改变</p><p>shift()方法:在数组头部删除一项：没有参数，只能删除一项</p><p><strong>splice()方法</strong>：可以对数组的<strong>增删改</strong>，它的本质就是去改变数组，参数第一和第二位必须是整数。</p><p>slice()方法:用来得到子数组，类似于字符串的slice方法，会返回<strong>从a下标开始，b下标结束（不包括b下标）的子串，a,b可以是负数，a，b必须是同时都是负数，否则得到空数组，表示倒数第几位数组项，a必须小于b，不会改变数组</strong></p><p>join()方法：使数组转为字符串，<strong>参数表示以什么字符作为连接符，如果留空则默认以逗号分隔</strong></p><p>split()方法:使字符串转为数组，参数表示以什么字符拆分字符串，一般不留空，只留空字符</p><p>concat()方法：合并多个数组。不会改变原数组</p><p>reverse()方法：将数组的全部项顺序置反，立即更改原来数组</p><p>indexof()方法:搜索数组中的元素，并返回该元素首次出现的下标，如果元素不存在，返回-1，参数是和数组的项是全等关系</p><p>includes()方法：判断数组中是否存在一个指定的值，返回的是布尔值，参数也是和数组项时全等关系。</p><p>二维数组：数组中的数组。</p><h1 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h1><p>这里需要知道基本数据类型和引用数据类型：</p><p>基本数据类型:会存放在一个内存地址中，我们把变量赋值给另外一个，则相当于开辟了新空间，这两个变量是不会影响的</p><p>引用数据类型：会存放在一块内存地址中，我们把一个对象或者数组赋值给另外一个变量，指向的内存地址是一样的，这就好比两个人住一个房间，其中一个对其修改，那么另外一个也受其影响。</p><p>浅拷贝：浅克隆是指只克隆数组第一层，如果是多为数组，或者数组中的项是其他引用数据类型，则不克隆其他层</p><p>深拷贝：通过递归方式进行深克隆：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var arr = [[1,2,3],[3,4,5]];</span><br><span class="line">function deepclone(arr)&#123;</span><br><span class="line">    var result = [];</span><br><span class="line">    for(var i = 0;i&lt;arr.lenght;i++)&#123;</span><br><span class="line">        if(Array.isArray(arr[i]))&#123;</span><br><span class="line">            //递归</span><br><span class="line">            result.push(deepclone(arr[i]))</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            result.push(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line">var arr2 = deepclone(arr)</span><br><span class="line">console.log(arr2)</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数就像一个工厂，通过传入参数，最终计算过后的结果。</p><p>函数也存在声明提升现象，并且优先于变量提升，函数提升可以调用一个后声明的函数，而不会引发错误，但是如果赋值给一个变量，则是变量声明提升规则，函数不会被提升。</p><p>立即执行函数：定义函数后立即被执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;立即执行函数&#x27;</span>)</span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure><p>闭包：函数和函数自身能访问到的变量;记忆性、私有变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">1</span>;</span><br><span class="line">    add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; n++ &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(n)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = fun()</span><br><span class="line">f()<span class="comment">//1</span></span><br><span class="line">add()</span><br><span class="line">f()<span class="comment">//2</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>JS的基础部分知识和其他语言基本相似，但是需要特别注意变量的声明提升，作用域链，JS中比较难的知识点：闭包、递归；比较杂多的知识点：数组方法。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要总结近段时间以来的JavaScript的基础知识。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="总结" scheme="https://www.frontblog.top/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的全局变量和局部变量</title>
    <link href="https://www.frontblog.top/article/998c8364.html"/>
    <id>https://www.frontblog.top/article/998c8364.html</id>
    <published>2021-11-09T08:13:24.000Z</published>
    <updated>2021-11-11T02:45:51.322Z</updated>
    
    <content type="html"><![CDATA[<p>本文意在通过例子的方式总结全局变量和局部变量的区别。</p><h1 id="例子一"><a href="#例子一" class="headerlink" title="例子一"></a>例子一</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)<span class="comment">//1，2，3，4，5，6，7，8，9</span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">window</span>.i)<span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>实际上JS编译时这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)<span class="comment">//1，2，3，4，5，6，7，8，9</span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">window</span>.i)<span class="comment">//10</span></span><br></pre></td></tr></table></figure><ul><li>能通过window调用，说明时全局的变量，这里的i在js预解析阶段被提升到前面，在执行的时候再为其赋值，如果使用let，则不会被提升。</li></ul><h1 id="例子二"><a href="#例子二" class="headerlink" title="例子二"></a>例子二</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)<span class="comment">//15</span></span><br><span class="line">&#125;</span><br><span class="line">fun(<span class="number">15</span>)</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">window</span>.a)<span class="comment">//undefine</span></span><br></pre></td></tr></table></figure><ul><li>函数的参数属于局部变量，不能通过window调用</li></ul><h1 id="例子三-重点"><a href="#例子三-重点" class="headerlink" title="例子三(重点)"></a>例子三(重点)</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">    arr.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">2</span>]()<span class="comment">//5</span></span><br></pre></td></tr></table></figure><ul><li>这个例子中无论哪个下标执行都会输出5，因为，i属于全局变量，函数输出的值是全局的，如果先要输出不同值，就需要设置成局部的变量，有两种方法，一种使用立即执行函数，另外一种就是使用let,</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var arr = [];</span><br><span class="line">for(var i = 0;i&lt;5;i++)&#123;</span><br><span class="line">    arr.push((function(i)&#123;//形参i属于局部变量</span><br><span class="line">        console.log(i)</span><br><span class="line">    &#125;)(i))//实参</span><br><span class="line">&#125;</span><br><span class="line">arr[2]()//2</span><br></pre></td></tr></table></figure><ul><li>使用了IIFE的方式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var arr = [];</span><br><span class="line">for(let i = 0;i&lt;5;i++)&#123;</span><br><span class="line">    arr.push(function()&#123;</span><br><span class="line">        console.log(i)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">arr[2]()//2</span><br></pre></td></tr></table></figure><ul><li>let不会被提升，所以也就完整的保留再函数里面</li></ul><h1 id="例子三-一"><a href="#例子三-一" class="headerlink" title="例子三.一"></a>例子三.一</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = []</span><br><span class="line">    <span class="keyword">var</span> i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        num[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> num[<span class="number">9</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test()()</span><br></pre></td></tr></table></figure><ul><li>这题目和前面的差不多，num[9]输出都是10，因为匿名函数输出这个i是上层的i，而这个i是不断变化的，我们输出的i的最终值。</li><li>在循环中将函数赋给数组，却并没有执行，也就是程序并不知道函数内部是个啥。等执行的时候，i已经变成了10，数组每一项的运行结果都是10</li><li>很套路的题目。。</li></ul><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211110224238.png"></p><h1 id="例子四"><a href="#例子四" class="headerlink" title="例子四"></a>例子四</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a)<span class="comment">//5</span></span><br><span class="line">&#125;</span><br><span class="line">fun()</span><br><span class="line"> <span class="built_in">console</span>.log(a)<span class="comment">//10</span></span><br></pre></td></tr></table></figure><ul><li>这里第一眼可能就会觉得a++属于全局变量，其实不然，a++属于局部变量，因为后面的var a被提升了，所以js的理解时这样的：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    a++;<span class="comment">//NaN</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a)<span class="comment">//5</span></span><br><span class="line">&#125;</span><br><span class="line">fun()</span><br><span class="line"> <span class="built_in">console</span>.log(a)<span class="comment">//10</span></span><br></pre></td></tr></table></figure><ul><li>如果把函数的var a变成let a,那么就不会被提升，函数里面的a++就是全局变量</li></ul><h1 id="例子五"><a href="#例子五" class="headerlink" title="例子五"></a>例子五</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">&quot;global&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> name=<span class="string">&quot;local&quot;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br></pre></td></tr></table></figure><ul><li>  第一眼看感觉是local和global,因为会就近的找变量，其实不然，输出语句都是local，因为判断里面的var name被提升了，到执行阶段name赋值了local，而我们说过，除了函数内部和函数参数属于局部变量，其他都属于全局变量，所以local把global覆盖掉了，两次都是local</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文意在通过例子的方式总结全局变量和局部变量的区别。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript的闭包</title>
    <link href="https://www.frontblog.top/article/6341a1da.html"/>
    <id>https://www.frontblog.top/article/6341a1da.html</id>
    <published>2021-11-09T07:11:17.000Z</published>
    <updated>2021-11-10T13:50:33.867Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录闭包的基本概念</p><h1 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h1><p>关于闭包网上文章有许多说法，这里我的理解是这样：闭包是<strong>「函数」和「函数内部能访问到的变量」的总和，就是一个闭包。</strong>当我们写一个函数，那么函数里面的变量，作用域相关就已经确定了，你也可以这样理解：创建的函数都会创建闭包，因为这时候，它的环境是确定的，封闭的。但是我们写法通常是函数套函数，里面的函数返回外层函数的变量。</p><h1 id="闭包的记忆性"><a href="#闭包的记忆性" class="headerlink" title="闭包的记忆性"></a>闭包的记忆性</h1><p>当闭包产生时，函数所处环境的状态会始终保持在内存中，不会再外层函数调用后被自动清除，这就是闭包的记忆性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCheckTemp</span>(<span class="params">standardTemp</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkTemp</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= standardTemp) &#123;</span><br><span class="line">            alert(<span class="string">&#x27;你的体温正常&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            alert(<span class="string">&#x27;你的体温偏高&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> checkTemp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个checkTemp函数，它以37.1度为标准线</span></span><br><span class="line"><span class="keyword">var</span> checkTemp_A = createCheckTemp(<span class="number">37.1</span>);</span><br><span class="line"><span class="comment">// 再创建一个checkTemp函数，它以37.3度为标准线</span></span><br><span class="line"><span class="keyword">var</span> checkTemp_B = createCheckTemp(<span class="number">37.3</span>);</span><br><span class="line"></span><br><span class="line">checkTemp_A(<span class="number">37.2</span>);</span><br><span class="line">checkTemp_A(<span class="number">37.0</span>);</span><br><span class="line">checkTemp_B(<span class="number">37.2</span>);</span><br><span class="line">checkTemp_B(<span class="number">37.0</span>);</span><br></pre></td></tr></table></figure><h1 id="闭包模拟私有变量"><a href="#闭包模拟私有变量" class="headerlink" title="闭包模拟私有变量"></a>闭包模拟私有变量</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装一个函数，这个函数的功能就是私有化变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个局部变量a</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">getA</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">add</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            a++;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">pow</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            a *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = fun();</span><br><span class="line"><span class="comment">// 如果想在fun函数外面使用变量a，唯一的方法就是调用getA()方法</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.getA());</span><br><span class="line"><span class="comment">// 想让变量a进行加1操作</span></span><br><span class="line">obj.add();</span><br><span class="line">obj.add();</span><br><span class="line">obj.add();</span><br><span class="line"><span class="built_in">console</span>.log(obj.getA());</span><br><span class="line">obj.pow();</span><br><span class="line"><span class="built_in">console</span>.log(obj.getA());</span><br></pre></td></tr></table></figure><h1 id="一些例子"><a href="#一些例子" class="headerlink" title="一些例子"></a>一些例子</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    add = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        a++;</span><br><span class="line">    &#125;</span><br><span class="line">    f2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fun()())</span><br><span class="line">add()</span><br><span class="line"><span class="built_in">console</span>.log(fun()())</span><br></pre></td></tr></table></figure><ul><li>以上代码可能会觉得输出1和2，因为中间自增1，闭包具有记忆性，其实这是错误的，正确的是输出都是1，原因在于fun返回的函数被执行掉了，也就销毁了，add虽然自增了，但是重新调用就被覆盖了，所以两次都是1。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    add = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        a++;</span><br><span class="line">    &#125;</span><br><span class="line">    f2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> funa = fun()</span><br><span class="line"><span class="built_in">console</span>.log(funa())</span><br><span class="line">add()</span><br><span class="line"><span class="built_in">console</span>.log(funa())</span><br></pre></td></tr></table></figure><ul><li>这段代码才是输出1和2，原因是fun函数里面的函数被赋值给了一个全局变量，这个变量不知道什么时候被引用，所以就一直存在于内存中。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;xiuyan&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&#x27;BigBear&#x27;</span>;</span><br><span class="line">    showName();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changeName();</span><br></pre></td></tr></table></figure><ul><li>在 showName 函数的函数作用域内查找是否有局部变量 name</li><li>发现没找到，于是根据<strong>书写的位置</strong>，查找上层作用域（全局作用域），找到了 name 的值是 xiuyan，所以结果会打印 xiuyan。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录闭包的基本概念&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="闭包" scheme="https://www.frontblog.top/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的递归算法</title>
    <link href="https://www.frontblog.top/article/d5117ec1.html"/>
    <id>https://www.frontblog.top/article/d5117ec1.html</id>
    <published>2021-11-08T13:12:47.000Z</published>
    <updated>2021-11-09T07:03:07.449Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录JavaScript的递归算法</p><h1 id="什么是递归？"><a href="#什么是递归？" class="headerlink" title="什么是递归？"></a>什么是递归？</h1><p>函数的内部语句<strong>可以调用这个函数自身</strong>，从而<strong>发起对函数的一次迭代</strong>，在新的迭代中，又会执行调用函数自身的语句，从而又产生一次迭代，当函数执行到某一次时，不再执行新的迭代，函数被一层一层返回，函数被递归</p><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>下面是1+2+3+4和是多少的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> num + fun(num-<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">fun(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>分析：</p><p>首先我们来分析数据的走向：</p><ul><li>参数是4，判断条件不成立，即执行 <code>return num + fun(num-1)</code>语句，这里就调用了函数自身，num是4，<code>fun(num-1)</code>传入的参数是3，完成了第一次调用。</li><li>这个3不等于1，再次执行<code>return num + fun(num-1)</code>语句，num是3，<code>fun(num-1)</code>传入的参数是2，完成了第二次调用。</li><li>这个2不等于1，再次执行<code>return num + fun(num-1)</code>语句，num是2，<code>fun(num-1)</code>传入的参数是1,完成了第三次调用</li><li>参数为1，判断条件成立，返回1。</li></ul><p>然后分析函数递归走向：</p><ul><li>第三次调用<code>fun(num-1</code>)返回的是1，num是2，相加就是3，返回的就是3</li><li>第二次调用<code>fun(num-1</code>)返回的是3，也就是刚才返回过来的数值，num是3，相加就是6，返回的就是6</li><li>第一次调用<code>fun(num-1</code>)返回的是6，也就是刚才返回过来的数值，num是4，相加就是10，返回的就是10</li></ul><p>这就是递归的思路，一层一层的调用，然后再一层一层返回，递归不能无消止的调用，其中是有一个条件不断趋向于等于这个判断，这个判断成立之后返回一个东西，然后函数就会一层一层递归出去。</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/digui.jpg"></p><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>递归非常简单的几句代码就可以实现，但是缺点也不同小视，那就是损耗内存，函数调用会使用栈来保存临时变量。每调用一个函数，都会将临时变量封装为栈帧压入内存栈，等函数执行完成返回时，才出栈。</p><h1 id="规避递归堆栈溢出"><a href="#规避递归堆栈溢出" class="headerlink" title="规避递归堆栈溢出"></a>规避递归堆栈溢出</h1><p>规避递归堆栈溢出就是设置最大的递归次数，超过这个次数，我们就手动报错，当然这个数字事先无法估算，只适合一些最大深度比较低的递归调用，并非最佳实践。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params">num</span>)</span>&#123;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">2</span>) &#123;</span><br><span class="line">       <span class="built_in">console</span>.error(<span class="string">&#x27;超过最大递归&#x27;</span>);</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> num + fun(num-<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">fun(<span class="number">4</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录JavaScript的递归算法&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="递归" scheme="https://www.frontblog.top/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的arguments</title>
    <link href="https://www.frontblog.top/article/a9f31fe4.html"/>
    <id>https://www.frontblog.top/article/a9f31fe4.html</id>
    <published>2021-11-08T09:23:29.000Z</published>
    <updated>2021-11-08T09:48:02.273Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍javascript中的arguments类数组对象</p><p><strong><code>arguments</code></strong> 是一个对应于传递给函数的参数的类数组对象。 —MDN</p><p><code>arguments</code>对象不是一个 <code>Array</code>。它类似于<code>Array</code>，但除了length属性和索引元素之外没有任何<code>Array</code>属性。</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">arguments</span>.lenght<span class="comment">//5</span></span><br><span class="line">&#125;</span><br><span class="line">fun(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>关于arguments类数组还有许多可以研究的，比如arguments是对象，而对象是没有长度属性，arguments在ES6中的箭头函数是无法使用的等等，这里只做记录，以后更新。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍javascript中的arguments类数组对象&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript的函数优先提升</title>
    <link href="https://www.frontblog.top/article/c7b5ade2.html"/>
    <id>https://www.frontblog.top/article/c7b5ade2.html</id>
    <published>2021-11-08T02:18:24.000Z</published>
    <updated>2021-11-08T09:48:02.276Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录JavaScript的函数优先提升特性</p><p>我们知道在JS中，有一个预先解析阶段，在这个阶段内会去先看所有的变量，然后提升到前面，但是只是提升变量，并没有提升值，例如以下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//undefine</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>而在函数中，也存在提升的现象，我们可以调用一个等会声明的函数，这里不会报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fun();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  onsole.log(<span class="string">&#x27;this is function&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如果我们使用匿名函数，即赋值给变量 ，则使用的是变量声明提升的规则，后面的函数是不会被提升的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fun(); <span class="comment">//this is not function</span></span><br><span class="line"><span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  onsole.log(<span class="string">&#x27;this is function&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看以下例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fun(); <span class="comment">//2</span></span><br><span class="line"><span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">fun();<span class="comment">//1</span></span><br></pre></td></tr></table></figure><ul><li>在预解析阶段：根据函数提升和变量提升，<code>function fun()</code>和<code>var fun</code>都会被提升到前面，<strong>函数会优先被提升</strong>，变量则后提升，虽然这里同名，但是<strong>变量的提升不会覆盖函数的声明提升</strong></li><li>在执行阶段，第一个<code>fun()</code>是去执行一个函数，前面有函数的当然是<code>function fun()</code>,所以这里输出2。在预解析阶段提升了<code>var fun</code>,执行到第二条语句的时候，则给它赋值，这样<code>var fun</code>就是一个函数了，而在第二个函数体被提升后就不会再覆盖回来，相反，现在是被var fun覆盖，所以最后调用的输出结果是1</li></ul><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211108104444.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录JavaScript的函数优先提升特性&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript的深克隆和浅克隆</title>
    <link href="https://www.frontblog.top/article/b9182662.html"/>
    <id>https://www.frontblog.top/article/b9182662.html</id>
    <published>2021-11-08T01:15:30.000Z</published>
    <updated>2021-11-09T07:10:09.480Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍引用数据类型的浅克隆和深克隆</p><p>我们知道如果把数组赋值给另外数组的话，如果其中一个改变另外一个也受其影响，所以我们就需要克隆或者说拷贝一份相同的引用类型数据，不让它们相互之间影响。</p><h1 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h1><p>浅克隆是指只克隆数组第一层，如果是多为数组，或者数组中的项是其他引用数据类型，则不克隆其他层</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> result = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i  = <span class="number">0</span>; i &lt;arr.lenght;i++)&#123;</span><br><span class="line">    result.push(arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a>深克隆</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepclone</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr.lenght;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(arr[i]))&#123;</span><br><span class="line">            <span class="comment">//递归</span></span><br><span class="line">            result.push(deepclone(arr[i]))</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            result.push(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr2 = deepclone(arr)</span><br><span class="line"><span class="built_in">console</span>.log(arr2)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍引用数据类型的浅克隆和深克隆&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="深克隆和浅克隆" scheme="https://www.frontblog.top/tags/%E6%B7%B1%E5%85%8B%E9%9A%86%E5%92%8C%E6%B5%85%E5%85%8B%E9%9A%86/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的基本数据类型和引用数据类型</title>
    <link href="https://www.frontblog.top/article/a509b562.html"/>
    <id>https://www.frontblog.top/article/a509b562.html</id>
    <published>2021-11-08T00:46:23.000Z</published>
    <updated>2021-11-08T09:48:02.279Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录JavaScript的基本数据类型和引用数据类型的不同</p><p>先看个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">a++;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//6</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr;</span><br><span class="line">arr.push(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[1, 2, 3,4]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">//[1, 2, 3,4]</span></span><br></pre></td></tr></table></figure><p>可以看出这是变量赋值给另外一个变量，自身的改变不会影响到其他，这是因为变量存放在内存地址中，赋值给另外变量，即申请了另外的内存空间，所以一个变量改变并不会影响另外一个，而数组是引用类型，申明一个数组相当于在内存申请了一块空间，也就是堆内存，当我们把这个数组赋值给另外一个数组变量，其实只是把这个变量的指针指向了同一个内存空间，即两个变量数组公用一个空间，所以，一个改变即同时改变。</p><p>在看个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numarr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> numarr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(numarr == numarr1); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(numarr === numarr1); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log([] == []); <span class="comment">//false</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num == num1); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>可以看出数组相同，即使两两比对也是false，这是因为引用类型对比的是内存地址</p><p>如果像比较两个数组是否相同，可以先转字符串比较。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numarr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> numarr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(numarr.toString() == numarr1.toString()); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(numarr.toString());<span class="comment">//1,2,3</span></span><br><span class="line"><span class="built_in">console</span>.log(numarr1.toString());<span class="comment">//1,2,3</span></span><br></pre></td></tr></table></figure><p>顺序不一样的对比：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numarr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> numarr1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(numarr.sort().toString() == numarr1.sort().toString()); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(numarr.sort().toString());</span><br><span class="line"><span class="built_in">console</span>.log(numarr.sort().toString());</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录JavaScript的基本数据类型和引用数据类型的不同&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>SSH免密钥连接服务器</title>
    <link href="https://www.frontblog.top/article/f85a2d78.html"/>
    <id>https://www.frontblog.top/article/f85a2d78.html</id>
    <published>2021-11-06T07:45:55.000Z</published>
    <updated>2021-11-07T04:27:59.701Z</updated>
    
    <content type="html"><![CDATA[<p>一般登录服务器通过SSH方式，每次都是需要密码，非常繁琐，本文介绍一种只需要<code>ssh+别名</code>就能连接服务器的方法。</p><h1 id="什么是SSH"><a href="#什么是SSH" class="headerlink" title="什么是SSH"></a>什么是SSH</h1><p>SSH是一种网络协议，用于计算机之间的加密登录。如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露，默认的端口是22</p><h1 id="怎么连接"><a href="#怎么连接" class="headerlink" title="怎么连接"></a>怎么连接</h1><p>通过<code>ssh root@IP</code>回车，输入密码就可以连接到，如果默认端口修改了就需要加-p参数，这在后面修改端口号讲。</p><h1 id="修改主机名字"><a href="#修改主机名字" class="headerlink" title="修改主机名字"></a>修改主机名字</h1><p>查询：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/hostname</span><br></pre></td></tr></table></figure><p>修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/hostname</span><br></pre></td></tr></table></figure><p>修改按<code>i</code>进入编辑，按<code>esc</code>退出编辑，<code>:wq</code>退出并保存</p><h1 id="修改端口"><a href="#修改端口" class="headerlink" title="修改端口"></a>修改端口</h1><p>查询默认监听的端口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anlp |grep sshd</span><br></pre></td></tr></table></figure><p>修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>按<code>i</code>进入编辑，打开prot的注释，修改你想要的端口，我们可以看到上面的一段话，如果你修改端口号，需要执行：<code>semanage port -a -t ssh_port_t -p tcp #PORTNUMBER</code>  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># If you want to change the port on a SELinux system, you have to tell</span><br><span class="line"># SELinux about this change.</span><br><span class="line"># semanage port -a -t ssh_port_t -p tcp #PORTNUMBER</span><br></pre></td></tr></table></figure><p>执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">semanage port -a -t ssh_port_t -p tcp #你修改的端口</span><br></pre></td></tr></table></figure><p>如果提示<code>-bash: semanage: command not found</code>，则执行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum whatprovides semanage</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y policycoreutils-python</span><br></pre></td></tr></table></figure><p>再次执行刚才的命令，没有返回任何信息，通过以下命令查找是否添加成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">semanage port -l | grep ssh</span><br></pre></td></tr></table></figure><p>最后就是重启一下ssh:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure><p>返回<code>Redirecting to /bin/systemctl restart sshd.service</code>即是成功，</p><p>通过查找默认端口，或者重新连接服务器确认是否成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 你修改端口号 root@IP</span><br></pre></td></tr></table></figure><p>需要注意的是，在服务云商店那里是需要 开放端口的，否则连接不上。</p><h1 id="免密登陆"><a href="#免密登陆" class="headerlink" title="免密登陆"></a>免密登陆</h1><p>首先需要在本地生成ssh证书，在本地计算机，命令如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>一直回车即可，在win10上，找到目录：<code>C:\Users\自己用户名\.ssh</code></p><p>打开，没有则新建config文件，不要有后缀名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host #别名</span><br><span class="line">  Port #你修改后的端口</span><br><span class="line">  HostName #IP</span><br><span class="line">  User root#用户名</span><br><span class="line">  IdentityFile #密钥地址，要包含文件名</span><br><span class="line">  IdentitiesOnly yes</span><br></pre></td></tr></table></figure><p>在服务器上通过<code>cd ~/.ssh</code>，<code>ls</code>,查看有没有<code>authorized_keys</code>文件，有则编辑，没有则新建。</p><p>新建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.ssh</span><br><span class="line">vi authorized_keys</span><br></pre></td></tr></table></figure><p>把本地计算机的pub文件复制进去，再次通过<code>ssh 别名</code>连接服务器成功。</p><p>至此，已经完成服务器的免密登录</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一般登录服务器通过SSH方式，每次都是需要密码，非常繁琐，本文介绍一种只需要&lt;code&gt;ssh+别名&lt;/code&gt;就能连接服务器的方法。&lt;/p&gt;</summary>
    
    
    
    <category term="开发技巧" scheme="https://www.frontblog.top/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="效率" scheme="https://www.frontblog.top/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的二维数组</title>
    <link href="https://www.frontblog.top/article/7f0bfd33.html"/>
    <id>https://www.frontblog.top/article/7f0bfd33.html</id>
    <published>2021-11-05T12:57:59.000Z</published>
    <updated>2021-11-07T08:59:13.220Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍JavaScript的二维数组。</p><h1 id="什么是二维数组？"><a href="#什么是二维数组？" class="headerlink" title="什么是二维数组？"></a>什么是二维数组？</h1><p>以数组作为数组元素的数组，即“数组中的数组”，eg: <code>var arr = [[12,,15,36],[56,98,45]]</code></p><h1 id="如何遍历数组？"><a href="#如何遍历数组？" class="headerlink" title="如何遍历数组？"></a>如何遍历数组？</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">    [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line">          [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],</span><br><span class="line">    [<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]</span><br><span class="line">          ]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr.lenght;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(arr[i][j])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍JavaScript的二维数组。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript的冒泡排序</title>
    <link href="https://www.frontblog.top/article/9e8798c2.html"/>
    <id>https://www.frontblog.top/article/9e8798c2.html</id>
    <published>2021-11-04T12:47:26.000Z</published>
    <updated>2021-11-05T12:59:55.643Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍算法排序之一的冒泡排序</p><p>冒泡排序的核心思路是一趟一趟地进行多次项的两两比较，每次都会把最小的元素拍好位置，如同水中的气泡上浮一样</p><p>下面是一个例子：</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211105084801.png"></p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211105084946.png"></p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211105085051.png"></p><h1 id="公式："><a href="#公式：" class="headerlink" title="公式："></a>公式：</h1><p>n个数字，排序的趟数是n-1趟，比较次数是n(n-1)/2</p><h1 id="基本算法"><a href="#基本算法" class="headerlink" title="基本算法"></a>基本算法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 倒数开始，最后一个跟前一个比，如果小于，那么互换位置</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>];</span><br><span class="line"><span class="comment">//比较趟数-&gt;4</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">//j=4;</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = arr.length - <span class="number">1</span>; j &gt;= i; j--) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;arr[j]-&gt;&#x27;</span> + arr[j]);</span><br><span class="line">    <span class="built_in">console</span>.log(arr[j - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (arr[j] &lt; arr[j - <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">      arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">      arr[j - <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;----------------&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍算法排序之一的冒泡排序&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="算法" scheme="https://www.frontblog.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript数组相关算法</title>
    <link href="https://www.frontblog.top/article/d514bee5.html"/>
    <id>https://www.frontblog.top/article/d514bee5.html</id>
    <published>2021-11-04T09:03:21.000Z</published>
    <updated>2021-11-10T09:46:32.013Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍数组相关的算法题目。</p><h1 id="问题：遍历数组，求数组总和、平均数"><a href="#问题：遍历数组，求数组总和、平均数" class="headerlink" title="问题：遍历数组，求数组总和、平均数"></a>问题：遍历数组，求数组总和、平均数</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">22</span>,<span class="number">56</span>,<span class="number">45</span>,<span class="number">34</span>]</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr.lenght;i++)&#123;</span><br><span class="line">    sum = sum + arr[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum)</span><br><span class="line"><span class="built_in">console</span>.log(sum/arr.lenght)</span><br></pre></td></tr></table></figure><h1 id="问题：求数组的最大、最小值"><a href="#问题：求数组的最大、最小值" class="headerlink" title="问题：求数组的最大、最小值"></a>问题：求数组的最大、最小值</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scoreArr = [<span class="number">56</span>,<span class="number">8</span>,<span class="number">98</span>,<span class="number">25</span>,<span class="number">31</span>,<span class="number">555</span>,<span class="number">26</span>]</span><br><span class="line"><span class="keyword">var</span> max = scoreArr[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">var</span> min = scoreArr[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i&lt;scoreArr.lenght;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(scoreArr[i]&gt;max)&#123;</span><br><span class="line">        max = scoreArr[i]</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(scoreArr[i]&lt;min)&#123;</span><br><span class="line">        min = scoreArr[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(max,min)</span><br></pre></td></tr></table></figure><h1 id="问题：数组去重"><a href="#问题：数组去重" class="headerlink" title="问题：数组去重"></a>问题：数组去重</h1><p>思路：准备空数组，遍历原数组，如果遍历到的项不在结果数组中，则推入结果数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = []</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">56</span>,<span class="number">8</span>,<span class="number">98</span>,<span class="number">25</span>,<span class="number">31</span>,<span class="number">555</span>,<span class="number">26</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr.lenght;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(result.includes(arr[i]) === <span class="literal">false</span> )&#123;</span><br><span class="line">        result.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br></pre></td></tr></table></figure><h1 id="问题：随机从原数组中取3项"><a href="#问题：随机从原数组中取3项" class="headerlink" title="问题：随机从原数组中取3项"></a>问题：随机从原数组中取3项</h1><p>思路：准备一个空结果数组，遍历原数组，随机选择一项，推入结果数组，为了不重复推入同一个项，可以将其删除，但是会改变原来数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = []</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">56</span>,<span class="number">8</span>,<span class="number">98</span>,<span class="number">25</span>,<span class="number">31</span>,<span class="number">555</span>,<span class="number">26</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random * arr.lenght);</span><br><span class="line">    result.push(arr[n]);</span><br><span class="line">    arr.splice(n,<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍数组相关的算法题目。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="算法" scheme="https://www.frontblog.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的循环判断算法</title>
    <link href="https://www.frontblog.top/article/badcd860.html"/>
    <id>https://www.frontblog.top/article/badcd860.html</id>
    <published>2021-11-01T12:17:03.000Z</published>
    <updated>2021-11-02T15:16:36.437Z</updated>
    
    <content type="html"><![CDATA[<p>算法算是在编程语言中较为独立出来的知识，一个问题可能有好几种解法，本文主要是循环语句的算法。通过问题-&gt;分析-&gt;代码的方式书写。</p><h1 id="问题：判断用户输入的数字是否为水仙花数？"><a href="#问题：判断用户输入的数字是否为水仙花数？" class="headerlink" title="问题：判断用户输入的数字是否为水仙花数？"></a>问题：判断用户输入的数字是否为水仙花数？</h1><p>水仙花数：是指一个 3 位数，它的每个位上的数字的立方之和等于它本身。例如：1^3 + 5^3+ 3^3 = 153</p><p><strong>分析</strong>：</p><p>既然是每个数位的立方和相加等于本身，那么重点是怎么得到这3位数的每一位数，然后让每个数的立方相加起来，那么就能判断它是否等于本身，是的话那他就是水仙花数，否则不是。</p><p><strong>解法一：</strong>既然是拆位，我们可以使用字符串的方法去获取每个数值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = prompt(<span class="string">&#x27;请输入一个3位数&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> a = n.charAt(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> b = n.charAt(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">var</span> c = n.charAt(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li>prompt输入的是字符串，所以可以直接使用<code>charAt()</code>方法获取值</li><li>接下来，就是去将每个数乘以3，然后相加，然后判断是否等于本身</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">Math</span>.pow(a,<span class="number">3</span>)+<span class="built_in">Math</span>.pow(b,<span class="number">3</span>)+<span class="built_in">Math</span>.pow(c,<span class="number">3</span>) == n)&#123;</span><br><span class="line">    alert(<span class="string">&#x27;是水仙花数&#x27;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     alert(<span class="string">&#x27;不是水仙花数&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>程序到这里已经基本完成，但是有一点需要注意和改进的地方，需要注意的是：<code>Math.pow(a,3)</code>这个语句中，a是去做了隐式的转换，也就是它的类型是Number，而此时n是String，两个是弱对比，使用全等那么这个程序将永远为false，改进的是对用户输入的数字进行非法的数字进行拦截，因为我们规定是3位数，用户可不一定输入3位数，综合以上，下面是改进代码。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = prompt(<span class="string">&#x27;请输入一个3位数&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isNaN</span>(n) &amp;&amp; n&gt;=<span class="number">100</span> &amp;&amp; n&lt;= <span class="number">999</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a = n.charAt(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> b = n.charAt(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">var</span> c = n.charAt(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">var</span> d = <span class="built_in">Number</span>(n)</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Math</span>.pow(a,<span class="number">3</span>)+<span class="built_in">Math</span>.pow(b,<span class="number">3</span>)+<span class="built_in">Math</span>.pow(c,<span class="number">3</span>) === d)&#123;</span><br><span class="line">    alert(<span class="string">&#x27;是水仙花数&#x27;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     alert(<span class="string">&#x27;不是水仙花数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;请输入合法数字&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面的代码嵌套了一层判断，主要是去拦截用户的非法请求，减少程序的出错率，但是还有继续优化的地方，比如：用户输入错误后应该可以让它继续输入其他，输入正确则退出程序，下面是优化后的代码。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> n = prompt(<span class="string">&#x27;请输入一个3位数&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isNaN</span>(n) &amp;&amp; n&gt;=<span class="number">100</span> &amp;&amp; n&lt;= <span class="number">999</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a = n.charAt(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> b = n.charAt(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">var</span> c = n.charAt(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">var</span> d = <span class="built_in">Number</span>(n)</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Math</span>.pow(a,<span class="number">3</span>)+<span class="built_in">Math</span>.pow(b,<span class="number">3</span>)+<span class="built_in">Math</span>.pow(c,<span class="number">3</span>) === d)&#123;</span><br><span class="line">    alert(<span class="string">&#x27;是水仙花数&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     alert(<span class="string">&#x27;不是水仙花数&#x27;</span>)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;请输入合法数字&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这样一来，当用户输入非法数值时候可以重新输入，而输入正确，则显示结果并且结束程序。</li></ul><p><strong>解法二：</strong>我们可以使用数学的方式得到这三位数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">parseInt</span>(n / <span class="number">100</span>); <span class="comment">//得到百位数</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">parseInt</span>((n / <span class="number">10</span>) % <span class="number">10</span>); <span class="comment">//得到十位数</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="built_in">parseInt</span>(n % <span class="number">10</span>); <span class="comment">//得到个位数</span></span><br></pre></td></tr></table></figure><ul><li>这个是结合了取余的方法，在结合解法一，最终代码如下：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> n = <span class="built_in">Number</span>(prompt(<span class="string">&#x27;请输入一个3位数&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isNaN</span>(n) &amp;&amp; n&gt;=<span class="number">100</span> &amp;&amp; n&lt;= <span class="number">999</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">parseInt</span>(n / <span class="number">100</span>); <span class="comment">//得到百位数</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">parseInt</span>((n / <span class="number">10</span>) % <span class="number">10</span>); <span class="comment">//得到十位数</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="built_in">parseInt</span>(n % <span class="number">10</span>); <span class="comment">//得到个位数</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Math</span>.pow(a,<span class="number">3</span>)+<span class="built_in">Math</span>.pow(b,<span class="number">3</span>)+<span class="built_in">Math</span>.pow(c,<span class="number">3</span>) === n)&#123;</span><br><span class="line">    alert(<span class="string">&#x27;是水仙花数&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     alert(<span class="string">&#x27;不是水仙花数&#x27;</span>)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;请输入合法数字&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="问题：计算1-2-3-……-99-100的和"><a href="#问题：计算1-2-3-……-99-100的和" class="headerlink" title="问题：计算1+2+3+……+99+100的和"></a>问题：计算1+2+3+……+99+100的和</h1><p>分析：每次相加都是在原来基础上加1，这个时候我们需要一个变量来存储他们的和。思路是：第一个是1，那么把1存起来，然后第二个数是2，再和之前的存起来，这就达到一个不断累加的效果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">    sum = sum +i;<span class="comment">//0+1、1+2、3+3...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum)<span class="comment">//5050</span></span><br></pre></td></tr></table></figure><ul><li>以上涉及到的是一个累加的变量，我们去定义了一个变量，把和不断的累加起来，得到最终的结果，除了使用for，我们还可以使用while循环</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">sum = sum+i;</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum)<span class="comment">//5050</span></span><br></pre></td></tr></table></figure><h1 id="问题：1-100中哪个数字除以3余1、除以4余2，除以5余3？"><a href="#问题：1-100中哪个数字除以3余1、除以4余2，除以5余3？" class="headerlink" title="问题：1~100中哪个数字除以3余1、除以4余2，除以5余3？"></a>问题：1~100中哪个数字除以3余1、除以4余2，除以5余3？</h1><p>分析：这个题目应该想到的是穷举法，我把每个数去判断一下，不就找出来了吗</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">1</span> &amp;&amp; i % <span class="number">4</span> == <span class="number">2</span> &amp;&amp; i % <span class="number">5</span> == <span class="number">3</span>)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="问题：寻找最小的满足n²-gt-456789的整数n"><a href="#问题：寻找最小的满足n²-gt-456789的整数n" class="headerlink" title="问题：寻找最小的满足n²&gt;456789的整数n"></a>问题：寻找最小的满足n²&gt;456789的整数n</h1><p>分析：这里需要注意的是最小满足，即找到n²大于456789的最小数，比如：1²是否大于456789，2²是否大于456789，以此类推。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span>(n*n&lt;=<span class="number">456789</span>)&#123;</span><br><span class="line">    n++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(n)<span class="comment">//676</span></span><br></pre></td></tr></table></figure><h1 id="问题：小兔子拔萝卜，第一天拔一个，第二天拔两个，第几天可以拔完500个"><a href="#问题：小兔子拔萝卜，第一天拔一个，第二天拔两个，第几天可以拔完500个" class="headerlink" title="问题：小兔子拔萝卜，第一天拔一个，第二天拔两个，第几天可以拔完500个"></a>问题：小兔子拔萝卜，第一天拔一个，第二天拔两个，第几天可以拔完500个</h1><p>分析:这其实还是一个自增问题，什么时候拔完500个，也就是<strong>累计超过500</strong>，那么判断条件就出来了，接下来这个天数是自增一，而且天数对应着当天拔萝卜的数量，所以自增一，思路是这样：第一天拔一个，好，现在存起来，第二天拔两个，存起来，直到这个存起来的数大于等于500的时候，我们就知道是第几天了，也就得到这个问题的解，另外，这题目<strong>和上面的1加到100有类似地方</strong>，只不过判断的条件换了，换成了<strong>对比累加的变量</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;<span class="comment">//这里的i有连层代表，一个是天数，一个是当天拔萝卜大的数量</span></span><br><span class="line"><span class="keyword">while</span>(sum &lt;=<span class="number">500</span>)&#123;</span><br><span class="line">    sum = sum +i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i)<span class="comment">//33</span></span><br></pre></td></tr></table></figure><ul><li>但是以上代码是存在问题的，我们i++是先使用后加一，所以导致后面输出的会再次加一，导致多了一次的天数解决办法就是去减一，这种出一情况往往就是要输出那个自增的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;<span class="comment">//这里的i有连层代表，一个是天数，一个是当天拔萝卜大的数量</span></span><br><span class="line"><span class="keyword">while</span>(sum &lt;=<span class="number">500</span>)&#123;</span><br><span class="line">    sum = sum +i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i - <span class="number">1</span>)<span class="comment">//32</span></span><br></pre></td></tr></table></figure><h1 id="问题：有由用户输入数字n，求算术的值"><a href="#问题：有由用户输入数字n，求算术的值" class="headerlink" title="问题：有由用户输入数字n，求算术的值"></a>问题：有由用户输入数字n，求算术的值</h1><p>这个算式如下：</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211101133126.png"></p><p>分析：我们需要知道这题目是要干什么，这题目其实是把这些分数相加在一起，规律就是，分母是从2开始，每次自增1，直到n结束，分子则是比分母+1,</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> zi = <span class="number">2</span>;<span class="comment">//定义分子的初值</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;<span class="comment">//定义累加数值</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">5</span></span><br><span class="line"><span class="comment">//只要用户输入的数字大于分子，那么就循环累加</span></span><br><span class="line"><span class="keyword">while</span>(zi &lt;= n)&#123;</span><br><span class="line">    sum = sum + (zi+<span class="number">1</span>)/ zi;</span><br><span class="line">    zi++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>题目写到这里算是基本完成，但是我们需要注意一点，分数得到的数值往往会是小数，而JavaScript采用了IEEE754二进制浮点数算术标准,存在精度丢失情况，我们使用toFix()解决，保留小数点几位。除了使用while的方式，其实还可以使用for循环</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> zi = <span class="number">2</span>;<span class="comment">//定义分子的初值</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;<span class="comment">//定义累加数值</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">5</span></span><br><span class="line"><span class="comment">//只要用户输入的数字大于分子，那么就循环累加</span></span><br><span class="line"><span class="keyword">while</span>(zi &lt;= n)&#123;</span><br><span class="line">    sum = sum + (zi+<span class="number">1</span>)/ zi;</span><br><span class="line">    zi++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum.toFix(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>for循环解法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> n = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">sum = (i + <span class="number">1</span>) / i;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum.toFixed(<span class="number">2</span>));</span><br></pre></td></tr></table></figure><ul><li>for这种解法看着更加清爽一些和易于理解。</li></ul><h1 id="问题：求n的阶乘"><a href="#问题：求n的阶乘" class="headerlink" title="问题：求n的阶乘"></a>问题：求n的阶乘</h1><p>分析：阶乘是什么？3的阶乘是<code>1*2*3</code>，那么就是每次递增1，只要是小于等于就去循环累乘。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> n = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = n;i&lt;=n;i++)&#123;</span><br><span class="line">    result = result *i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><h1 id="问题：圆周率可以由下面的莱布尼次级数公式计算出来，请由用户输入参数n计算圆周率"><a href="#问题：圆周率可以由下面的莱布尼次级数公式计算出来，请由用户输入参数n计算圆周率" class="headerlink" title="问题：圆周率可以由下面的莱布尼次级数公式计算出来，请由用户输入参数n计算圆周率"></a>问题：圆周率可以由下面的莱布尼次级数公式计算出来，请由用户输入参数n计算圆周率</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">var</span> item = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">var</span> n = <span class="built_in">Number</span>(prompt(<span class="string">&#x27;请输入数字&#x27;</span>));</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">     item *= i / (<span class="number">2</span> * i + <span class="number">1</span>);</span><br><span class="line">     sum += item;</span><br><span class="line">   &#125;</span><br><span class="line">   alert((<span class="number">1</span> + sum) * <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h1 id="问题：寻找1-100的所有质数"><a href="#问题：寻找1-100的所有质数" class="headerlink" title="问题：寻找1~100的所有质数"></a>问题：寻找1~100的所有质数</h1><p>分析：只能够被1和它本身整除，最小质数2，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">outer:<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">2</span>;j&lt;i;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i%j == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span> outer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>outer是for的别名，continue是跳到指定的for循环。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;算法算是在编程语言中较为独立出来的知识，一个问题可能有好几种解法，本文主要是循环语句的算法。通过问题-&amp;gt;分析-&amp;gt;代码的方式书写。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
    <category term="算法" scheme="https://www.frontblog.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的数组</title>
    <link href="https://www.frontblog.top/article/ae208be1.html"/>
    <id>https://www.frontblog.top/article/ae208be1.html</id>
    <published>2021-11-01T10:31:56.000Z</published>
    <updated>2021-11-04T06:54:04.314Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍JavaScript的数组及数组的各种方法</p><h1 id="数组的简介与定义"><a href="#数组的简介与定义" class="headerlink" title="数组的简介与定义"></a>数组的简介与定义</h1><p><strong>什么是数组：</strong></p><p>数组（Array），用来<strong>存储一组相关的值</strong>，从而方便进行求和、计算平均数、逐项遍历等操作</p><p><strong>怎么定义数组：</strong></p><ul><li><p>使用数组字面量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ary = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure></li><li><p>使用Array构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)<span class="comment">//这样写有个缺点,既我想输入一个数字，其实只是去定义长度</span></span><br></pre></td></tr></table></figure></li><li><p>使用构造函数定义长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">4</span>)<span class="comment">//定义数组长度为4，值为undefined</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>访问数组项：</strong></p><p>通过下标访问，下标从0开始</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>])<span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>下标越界的时候，不会报错，会返回undefined，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">5</span>])<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p><strong>数组长度：</strong></p><p>数组也有长度，调用lenght属性，返回该数组的长度</p><p><strong>数组类型检测：</strong></p><p>数组用typeof检测结果是object，Array.isArray()方法可以用来检测数组</p><p><strong>更改数组项：</strong></p><p>数组并不是只读，我们可以修改其中任何项的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3,4,5]</span><br><span class="line">arr[2] = 6</span><br><span class="line">console.log(arr)//1,2,6,4,5</span><br></pre></td></tr></table></figure><p>但是如果创建一个超过数组下标，则中间的值为empty</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">arr[<span class="number">7</span>] = <span class="number">6</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//1,2,3,4,5,empty*2,6</span></span><br></pre></td></tr></table></figure><p><strong>数组遍历：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr.lenght;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组的常用方法"><a href="#数组的常用方法" class="headerlink" title="数组的常用方法"></a>数组的常用方法</h1><h2 id="push-方法"><a href="#push-方法" class="headerlink" title="push()方法"></a>push()方法</h2><p>在数组尾部插入新项：参数就是要插入的项，如果要插入多项，可以用逗号隔开，使用push()方法后，数组会立即改变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">arr.push(<span class="string">&#x27;50&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//1, 2, 3, 4, 5, &#x27;50&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>需要注意的是arr.push()返回的值不是新数组，而是新数组的长度。</li></ul><h2 id="pop-方法"><a href="#pop-方法" class="headerlink" title="pop()方法"></a>pop()方法</h2><p>在数组尾部删除一项：没有参数，只能删除一项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> a = arr.pop()</span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//1，2，3，4</span></span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//5</span></span><br></pre></td></tr></table></figure><ul><li>返回的值是被删除的项。</li></ul><h2 id="unshift-方法"><a href="#unshift-方法" class="headerlink" title="unshift()方法"></a>unshift()方法</h2><p>在数组头部插入新项：参数就是要插入的项，如果要插入多项，可以用逗号隔开，使用unshift()方法后，数组会立即改变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">arr.unshift(<span class="string">&#x27;50&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//&#x27;50&#x27;,1, 2, 3, 4, 5</span></span><br></pre></td></tr></table></figure><ul><li>需要注意的是arr.unshift()返回的值不是新数组，而是新数组的长度。</li></ul><h2 id="shift-方法"><a href="#shift-方法" class="headerlink" title="shift()方法"></a>shift()方法</h2><p>在数组头部删除一项：没有参数，只能删除一项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> a = arr.shift()</span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//2，3，4</span></span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//1</span></span><br></pre></td></tr></table></figure><ul><li>返回的值是被删除的项。</li></ul><h2 id="splice-方法"><a href="#splice-方法" class="headerlink" title="splice()方法"></a>splice()方法</h2><p>可以对数组的<strong>增删改</strong>，它的本质就是去改变数组，参数第一和第二位必须是整数。</p><blockquote><p><strong><code>splice()</code></strong> 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组。——MDN</p></blockquote><p><strong>替换数组：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.splice(<span class="number">3</span>, <span class="number">3</span>, <span class="string">&#x27;new&#x27;</span>, <span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[1, 2, 3, &#x27;new&#x27;, 6,7]</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//[4,5]</span></span><br></pre></td></tr></table></figure><ul><li>参数第一个代表：下标3；参数第二个参数代表：连续替换3个项；即：在<strong>下标3开始（包含下标3）</strong>，连续选择三个替换，可以看到，替换的超出原有的数组，即增加数组长度</li><li>返回值是被替换的值</li></ul><p><strong>插入指定位置项：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.splice(<span class="number">3</span>, <span class="number">0</span>, <span class="string">&#x27;new&#x27;</span>, <span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[1, 2, 3, &#x27;new&#x27;, 6, 7, 4, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//[]</span></span><br></pre></td></tr></table></figure><ul><li>把第二个参数改为0，即在<strong>下标的前面</strong>插入数据</li><li>因为是插入数据，返回值为空数组</li></ul><p><strong>删除指定位置项：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.splice(<span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//[4,5]</span></span><br></pre></td></tr></table></figure><ul><li>不写替换的值，则从下标3开始（包括下标3），连续2位删除</li><li>返回值是删除的值</li></ul><p>以下情况都不建议刻意书写，很容易掉坑，js是弱控制语言，所以并不会报错：</p><p>只有一个参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.splice(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[1, 2]</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//[3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>另外这种第二参数是非整数，会被值为0，变成添加，不过不建议这样写，<strong>第二参数是会被忽略的</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.splice(<span class="number">2</span>, <span class="string">&#x27;new&#x27;</span>, <span class="string">&#x27;old&#x27;</span>, <span class="string">&#x27;lsf&#x27;</span>, <span class="string">&#x27;cxz&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[1, 2, &#x27;old&#x27;, &#x27;lsf&#x27;, &#x27;cxz&#x27;, 3, 4, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//[]</span></span><br></pre></td></tr></table></figure><p>再看错误例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.splice(<span class="string">&#x27;new&#x27;</span>, <span class="string">&#x27;old&#x27;</span>);<span class="comment">//开始参数不是整数</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//1, 2, 3, 4, 5</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//[]</span></span><br></pre></td></tr></table></figure><h2 id="slice-方法"><a href="#slice-方法" class="headerlink" title="slice()方法"></a>slice()方法</h2><p>用来得到子数组，类似于字符串的slice方法，会返回<strong>从a下标开始，b下标结束（不包括b下标）的子串，a,b可以是负数，a，b必须是同时都是负数，否则得到空数组，表示倒数第几位数组项，a必须小于b，不会改变数组</strong></p><p><strong>正确规范的写法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.slice(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//[3,4,5]</span></span><br></pre></td></tr></table></figure><p>倒数获取：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.slice(<span class="number">2</span>,-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//[3,4]</span></span><br></pre></td></tr></table></figure><p><strong>下面是错误示范：</strong></p><p>很明显，下面例子中，获取的下标越界了，但是不会报错，也不会出现undefine，只会截取到数组结尾</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.slice(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//[3,4,5]</span></span><br></pre></td></tr></table></figure><p>不允许去写a&gt;b，否则获取不到，返回空数组，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.slice(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//[]</span></span><br></pre></td></tr></table></figure><p>第一参数如果是负数，第二参数就必须是负数，否则返回空数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.slice(-<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//[]</span></span><br></pre></td></tr></table></figure><h2 id="join-方法"><a href="#join-方法" class="headerlink" title="join()方法"></a>join()方法</h2><p>使数组转为字符串，<strong>参数表示以什么字符作为连接符，如果留空则默认以逗号分隔</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">22</span>,<span class="number">33</span>,<span class="number">555</span>]</span><br><span class="line">arr.join()<span class="comment">//&quot;22,33,555&quot;</span></span><br><span class="line">arr.join(<span class="string">&#x27;&#x27;</span>)<span class="comment">//&#x27;2233555&#x27;</span></span><br><span class="line">arr.join(<span class="string">&#x27;-&#x27;</span>)<span class="comment">//&quot;22-33-555&quot;</span></span><br><span class="line">arr.toString()<span class="comment">//&quot;22,33,555&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="split-方法"><a href="#split-方法" class="headerlink" title="split()方法"></a>split()方法</h2><p>使字符串转为数组，参数表示以什么字符拆分字符串，一般不留空，只留空字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abcdefg&#x27;</span></span><br><span class="line">str.split()<span class="comment">//[&#x27;abcdefg&#x27;]</span></span><br><span class="line">str.split(<span class="string">&#x27;&#x27;</span>)<span class="comment">//[&#x27;a&#x27; ,&#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;,&#x27;g&#x27;]</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&#x27;a-b-c-d-e-f-g&#x27;</span></span><br><span class="line">str.split(<span class="string">&#x27;-&#x27;</span>)<span class="comment">//[&#x27;a&#x27; ,&#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;,&#x27;g&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="concat-方法"><a href="#concat-方法" class="headerlink" title="concat()方法"></a>concat()方法</h2><p>合并多个数组。不会改变原数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr1 = [1,2,3,4,5];</span><br><span class="line">var arr2 = [6,7,8,9];</span><br><span class="line">var arr3 = [10,11,12];</span><br><span class="line">var arr = arr1.concat(arr2,arr3);</span><br><span class="line">console.log(arr)//[1,2,3,4,5,6,7,8,9,10,11,12]</span><br></pre></td></tr></table></figure><h2 id="reverse-方法"><a href="#reverse-方法" class="headerlink" title="reverse()方法"></a>reverse()方法</h2><p>将数组的全部项顺序置反，立即更改原来数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3]</span><br><span class="line">arr.reverse()//[3,2,1]</span><br></pre></td></tr></table></figure><h2 id="indexof-方法"><a href="#indexof-方法" class="headerlink" title="indexof()方法"></a>indexof()方法</h2><p>搜索数组中的元素，并返回该元素首次出现的下标，如果元素不存在，返回-1，参数是和数组的项是全等关系，也就是数组中有数字类型2，使用indexof查找字符串类型2，得到结果是-1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>]</span><br><span class="line">arr.indexof(<span class="number">3</span>)<span class="comment">//2</span></span><br></pre></td></tr></table></figure><h2 id="includes-方法"><a href="#includes-方法" class="headerlink" title="includes()方法"></a>includes()方法</h2><p>判断数组中是否存在一个指定的值，返回的是布尔值，参数也是和数组项时全等关系。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>]</span><br><span class="line">arr.includes(<span class="number">3</span>)<span class="comment">//true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍JavaScript的数组及数组的各种方法&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript随机函数的公式</title>
    <link href="https://www.frontblog.top/article/6556cfc2.html"/>
    <id>https://www.frontblog.top/article/6556cfc2.html</id>
    <published>2021-11-01T04:08:09.000Z</published>
    <updated>2021-11-01T10:34:15.926Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍JavaScript的随机函数的公式。</p><p>再JavaScript中，想获取随机函数需要使用<code>Math.random()</code>，该函数会返回0~1之间的小数，但是这不符合我们一般的使用，我们一般会给出一个区间，然后在该区间随机一个数：</p><p>得到[a,b]区间的整数：公式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span> (<span class="built_in">Math</span>.random() * (b-a+<span class="number">1</span>) ) + a</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍JavaScript的随机函数的公式。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript的判断和循环语句</title>
    <link href="https://www.frontblog.top/article/8bd1ac6e.html"/>
    <id>https://www.frontblog.top/article/8bd1ac6e.html</id>
    <published>2021-10-30T09:26:58.000Z</published>
    <updated>2021-11-03T00:47:24.236Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍JavaScript的判断语句和循环语句。</p><h1 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h1><p>if语句是最简单的条件语句，也称选择语句，它通常结合else一起使用，表示如果..就…否则…</p><p>if…else…一定会选择一条语句执行</p><p>if语句的执行块只有一条语句时，可以省略大括号，分号结尾</p><p>示例：判断闰年</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> year = <span class="built_in">Number</span>(prompt(<span class="string">&#x27;请输入年份&#x27;</span>));</span><br><span class="line"><span class="comment">//能被4整除且不能被100整除</span></span><br><span class="line"><span class="comment">//能被100整除也能被400整除</span></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) ||</span><br><span class="line">  (year % <span class="number">100</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">400</span> != <span class="number">0</span>)</span><br><span class="line">) &#123;</span><br><span class="line">  alert(<span class="string">&#x27;是闰年&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  alert(<span class="string">&#x27;不是闰年&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="if多条件判断语句"><a href="#if多条件判断语句" class="headerlink" title="if多条件判断语句"></a>if多条件判断语句</h1><p>else if()条件分支“暗含”了不符合之前所有条件。</p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211031201209.png"></p><h1 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h1><p>除if语句之外，JS还提供了另外一种选择语句：switch语句。</p><p>用途：当一个变量被分类讨论的情况。</p><p>在switch中圆括号中一般是一个变量命，这个变量被分类讨论</p><p>case表示“情况”，它后面没有圆括号，直接跟一个值，程序会依次将case后面的值与switch中圆括号的值<strong>全等比对</strong>，如果相同，则执行case后面的语句，default为默认情况。需要注意的是，case后面要书写<strong>break</strong>，否则会造成语句的贯穿，后面的也会被执行。</p><p>示例：要求用户输入一个1~12中的任意一个数字，显示这个月份的天数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="built_in">Number</span>(prompt(<span class="string">&#x27;输入1~12月份&#x27;</span>));</span><br><span class="line">      <span class="keyword">switch</span> (n) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">          alert(<span class="string">&#x27;这个月有31天&#x27;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">          alert(<span class="string">&#x27;这个月有30天&#x27;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">          alert(<span class="string">&#x27;这个月有28或29天&#x27;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          alert(<span class="string">&#x27;输入正确数字&#x27;</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h1 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h1><p>JavaScript中提供了一种叫做“三元运算”的语法形式，让我们可以方便地实现选择：条件表达式？表达式1：表达式2，表达式为真则执行表达式1，否则执行表达式2</p><p>用途：根据条件是否成立，在两个不同值中选择变量的值</p><h1 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for循环有三个表达式，第三个表达式不能有分号。</p><ul><li><code>var i = 1;</code>表示定义一个“循环变量” i,并赋值为1</li><li>i<code>&lt;=10;</code>，表示继续执行循环的条件，只要条件为真，则会一直执行</li><li><code>i++</code>，用来更新循环变量，使循环的值越来越趋向终点</li></ul><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211031202912.png"></p><p>需要注意的是，var和let的区别:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i);<span class="comment">//ReferenceError: i is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i);<span class="comment">//10 </span></span><br></pre></td></tr></table></figure><p>有一个公式：</p><ul><li>如果有序递增，最后的语句写法是 i+=递增的数差值</li><li>如果有序递减，最后的语句写法是 i-=递减的数差值</li></ul><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 18、14、10、...、-6</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">18</span>; i &gt;= -<span class="number">6</span>; i -= -<span class="number">4</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//0、0.2、0.4、0.6、0.8、1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; i += <span class="number">0.2</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Number</span>(i.toFixed(<span class="number">1</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h1><p>while语句也是一种循环结构，是一种不定范围的循环，和for各有各的用处</p><p>while循环没有显示定义循环变量，必须自己在while循环外先定义号循环变量，有时甚至可以没有循环变量</p><p>循环体内的语句，必须使循环测试条件趋向不成立，否则会死循环</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> n = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">while</span> (n &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(n);</span><br><span class="line">   n++;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//1+2+3...+100</span></span><br><span class="line"> <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">   sum += i;</span><br><span class="line">   i++;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure><p>寻找满足n的平方大于456789的最大整数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">while</span> (<span class="built_in">Math</span>.pow(n, <span class="number">2</span>) &lt;= <span class="number">456789</span>) &#123;</span><br><span class="line">   n++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(n);</span><br></pre></td></tr></table></figure><h1 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h1><p>do…while循环将循环执行条件写到了循环体的后面，这样一来，循环体一定会至少执行一次，然后再检测循环执行条件是否为true，再来决定是否再执行一次，即，无论是否对错都会执行一次</p><p>示例：</p><p>编写程序，随机生成两个变量，在[-4,4]区间，但是要求不能同时为0</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">9</span>) - <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">9</span>) - <span class="number">4</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (a == <span class="number">0</span> &amp;&amp; b == <span class="number">0</span>); <span class="comment">//只要是0就再次执行，不是0就退出</span></span><br><span class="line"><span class="built_in">console</span>.log(a, b);</span><br></pre></td></tr></table></figure><h1 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h1><p>共同点： break和continue都是用来控制循环结构的，主要作用是停止循环。</p><p>break主要是<strong>终止</strong>整个或者这一层的循环，continue是<strong>跳过这次</strong>循环，开始下一次的循环</p><p>continue <strong>只能在循环语句中使用</strong>，即只能在 for、while 和 do…while 语句中使用。</p><p>break<strong>只能在循环体内和switch语句体内使用</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍JavaScript的判断语句和循环语句。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript的表达式和运算符</title>
    <link href="https://www.frontblog.top/article/f5797da9.html"/>
    <id>https://www.frontblog.top/article/f5797da9.html</id>
    <published>2021-10-29T13:49:12.000Z</published>
    <updated>2021-11-12T01:40:17.863Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍JavaScript的表达式和运算符。</p><h1 id="什么是表达式和运算符"><a href="#什么是表达式和运算符" class="headerlink" title="什么是表达式和运算符"></a>什么是表达式和运算符</h1><p>运算符：也叫操作符，是一种符号。通过运算符可以对一个或多个值进行运算，并获取运算结果。</p><p>表达式：由数字、运算符、变量的组合（组成的式子）。</p><p>表达式最终都会有一个运算结果，我们将这个结果称为表达式的返回值。</p><p>比如：<code>+</code>、<code>*</code>、<code>/</code>、<code>-</code> 都是运算符，而<code>（3+5）/2</code>则是表达式。</p><p>比如：typeof 就是运算符，可以来获得一个值的类型。它会将该值的类型以字符串的形式返回，返回值可以是 number string boolean undefined object。</p><h1 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h1><table><thead><tr><th align="center">意义</th><th align="center">运算符</th></tr></thead><tbody><tr><td align="center">加</td><td align="center">+</td></tr><tr><td align="center">减</td><td align="center">-</td></tr><tr><td align="center">乘</td><td align="center">*</td></tr><tr><td align="center">除</td><td align="center">/</td></tr><tr><td align="center">取余</td><td align="center">%</td></tr></tbody></table><p><strong>这里主要介绍取余：</strong></p><p>示例：如何取到375里面的3、7、5这三个数字呢</p><ul><li>得到3的方法：375除以100，得到3.75然后取整，得到3。即：parseInt(375/100)</li><li>得到7的方法：375除以100，余数是75，除以10，得到7.5，取整。即：parseInt((375% 100) / 10)</li><li>得到5的方法：375除以10，余数就是5。即：375% 10</li></ul><p><strong>隐式类型转换：</strong></p><p>如果参与数学运算符的某操作数不是数字类型，那么JavaScript会自动将操作数转换为数字型其中有字符串，那么就不是进行计算而是进行拼接</p><p>本质是内部调用Number函数。</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>*<span class="string">&#x27;4&#x27;</span> <span class="comment">// 12</span></span><br><span class="line"><span class="literal">true</span> + <span class="literal">true</span><span class="comment">//2</span></span><br><span class="line"><span class="number">3</span>* <span class="string">&#x27;2天&#x27;</span><span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><p><strong>IEEE754原则</strong></p><p>在JavaScript中，有些小数的数学运算不是很精准，这是因为JavaScript采用了IEEE754二进制浮点数算术标准，它是计算机底层编译的标准。有时候会产生误差</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> <span class="comment">//0.30000000000000004</span></span><br></pre></td></tr></table></figure><p>解决办法：</p><p><strong>调用数字的toFixed方法</strong>保留指定的小数位数</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">0.1</span> + <span class="number">0.2</span>).toFixed(<span class="number">2</span>)<span class="comment">//0.30</span></span><br></pre></td></tr></table></figure><p><strong>幂和开根号</strong></p><p>JavaScript中没有提供幂计算、开根号的运算符。需要使用Math对象的相关方法进行计算</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//幂</span></span><br><span class="line"><span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">3</span>)<span class="comment">//8 </span></span><br><span class="line"><span class="built_in">Math</span>.pow(<span class="number">3</span>,<span class="number">2</span>)<span class="comment">//9</span></span><br><span class="line"><span class="comment">//开根号</span></span><br><span class="line"><span class="built_in">Math</span>.sqrt(<span class="number">81</span>)<span class="comment">//9</span></span><br><span class="line"><span class="built_in">Math</span>.sqry(-<span class="number">81</span>)<span class="comment">//NaN</span></span><br><span class="line"><span class="comment">//向上(大)取整</span></span><br><span class="line"><span class="built_in">Math</span>.ceil(<span class="number">2.4</span>)<span class="comment">//3</span></span><br><span class="line"><span class="comment">//向下(小)取整</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="number">2.4</span>)<span class="comment">//2</span></span><br></pre></td></tr></table></figure><p><strong>算数运算符的运算规则</strong></p><ol><li>先算乘除、后算加减。</li><li>小括号<code>( )</code>：能够影响计算顺序，且可以嵌套。没有中括号、没有大括号，只有小括号。</li><li>百分号：取余。只关心余数。</li></ol><h1 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h1><table><thead><tr><th align="center">意义</th><th align="center">运算符</th></tr></thead><tbody><tr><td align="center">大于</td><td align="center">&gt;</td></tr><tr><td align="center">小于</td><td align="center">&lt;</td></tr><tr><td align="center">大于等于</td><td align="center">&gt;=</td></tr><tr><td align="center">小于等于</td><td align="center">&lt;=</td></tr><tr><td align="center">等于</td><td align="center">==</td></tr><tr><td align="center">不等于</td><td align="center">!=</td></tr><tr><td align="center">全等于</td><td align="center">===</td></tr><tr><td align="center">不全等于</td><td align="center">!==</td></tr></tbody></table><p>关系运算符的结果是布尔值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span>&gt;<span class="number">5</span> <span class="comment">//true</span></span><br><span class="line"><span class="number">8</span>&gt;=<span class="number">8</span><span class="comment">//true</span></span><br><span class="line"><span class="number">8</span>&lt;=<span class="number">11</span><span class="comment">//true</span></span><br><span class="line"><span class="number">7</span>&lt;<span class="number">4</span><span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>判断一个数字是否等于使用<code>==</code>，判断数字和数字类型是否相等则使用<code>===</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> == <span class="string">&#x27;3&#x27;</span><span class="comment">//true</span></span><br><span class="line"><span class="number">3</span> === <span class="string">&#x27;3&#x27;</span><span class="comment">//false</span></span><br><span class="line"><span class="number">0</span> == <span class="literal">undefined</span> <span class="comment">//false</span></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">null</span> <span class="comment">//true</span></span><br><span class="line"><span class="literal">undefined</span> === <span class="literal">null</span> <span class="comment">//false</span></span><br><span class="line"><span class="literal">NaN</span> == <span class="literal">NaN</span> <span class="comment">//false</span></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span><span class="comment">//false</span></span><br></pre></td></tr></table></figure><p><strong>如何判断变量值为NaN?</strong></p><p>使用isNaN传入变量值，会返回布尔值，但是因为其原理还是使用Number函数，所以就会出现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(<span class="literal">undefined</span>)<span class="comment">//true</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>)<span class="comment">//0</span></span><br></pre></td></tr></table></figure><p>undefined是一个类型，<strong>它的值只有一个</strong>，就是undefined，undefined不是NaN。</p><p><strong>不相等和不全等</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> != <span class="number">6</span> <span class="comment">//true</span></span><br><span class="line"><span class="number">5</span> !== <span class="number">6</span> <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span> != <span class="string">&#x27;5&#x27;</span> <span class="comment">//false</span></span><br><span class="line"><span class="number">5</span> !==<span class="string">&#x27;5&#x27;</span> <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>Javascript没有连比的，需要实现连比需要借助逻辑运算符</p><h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><table><thead><tr><th align="center">意义</th><th align="center">运算符</th></tr></thead><tbody><tr><td align="center">非</td><td align="center">！</td></tr><tr><td align="center">与</td><td align="center">&amp;&amp;</td></tr><tr><td align="center">或</td><td align="center">||</td></tr></tbody></table><p>非运算也可以称为置反运算，它是一个单目运算符，只需要一个操作数，运算结果一定是布尔值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">!<span class="literal">true</span> <span class="comment">//false</span></span><br><span class="line">!<span class="literal">false</span>  <span class="comment">//true</span></span><br><span class="line">!<span class="number">0</span> <span class="comment">//true</span></span><br><span class="line">!<span class="literal">undefined</span> <span class="comment">//true</span></span><br><span class="line">!<span class="string">&#x27;&#x27;</span> <span class="comment">//true</span></span><br><span class="line">!<span class="string">&#x27;123&#x27;</span><span class="comment">//false</span></span><br><span class="line">!!<span class="literal">true</span> <span class="comment">//true</span></span><br><span class="line">!!<span class="number">0</span> <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>与运算是双目运算符，<strong>只有两边真才是真，否则为假</strong></p><p>或运算时双目运算符，<strong>只要有一个真就为真，都假就为假</strong></p><p><strong>短路计算</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> &amp;&amp; <span class="number">6</span> <span class="comment">//6</span></span><br><span class="line"><span class="literal">undefined</span> &amp;&amp; <span class="number">15</span> <span class="comment">//undefined</span></span><br><span class="line"><span class="literal">null</span> &amp;&amp; <span class="number">2</span> <span class="comment">//null</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>&amp;&amp; <span class="number">16</span> <span class="comment">//&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27; &#x27;</span>&amp;&amp; <span class="number">16</span> <span class="comment">//16</span></span><br><span class="line"><span class="literal">NaN</span> &amp;&amp;  <span class="literal">undefined</span><span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><p>与运算会去看第一个数值，如果为假，那么后面就不会再去看，直接返回第一个数值，如果第一个数值为true，那么会去看第二个数值并且输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 || 6 //5</span><br><span class="line">undefined || 15 //15</span><br><span class="line">null || 2 //2</span><br><span class="line">&#x27;&#x27; || 16 //16</span><br><span class="line">&#x27; &#x27; || 16 //&#x27; &#x27;</span><br><span class="line">NaN ||  undefined //undefined</span><br></pre></td></tr></table></figure><p>或运算会去整体看，如果有一个真，那么就直接输出排在前面的真，如果都为假，那么就输出后面那个假的值</p><p>小结：</p><table><thead><tr><th align="center">表达式</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">a&amp;&amp;b(真，真)</td><td align="center">b</td></tr><tr><td align="center">a&amp;&amp;b(真，假)</td><td align="center">b</td></tr><tr><td align="center">a&amp;&amp;b(假，真)</td><td align="center">a</td></tr><tr><td align="center">a&amp;&amp;b(假，假)</td><td align="center">a</td></tr><tr><td align="center">a||b（真，真）</td><td align="center">a</td></tr><tr><td align="center">a||b（真，假）</td><td align="center">a</td></tr><tr><td align="center">a||b(假，真)</td><td align="center">b</td></tr><tr><td align="center">a||b(假，假)</td><td align="center">b</td></tr></tbody></table><p><strong>逻辑运算的顺序:  非-&gt;与-&gt;或</strong></p><h1 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h1><table><thead><tr><th align="center">意义</th><th align="center">运算符</th></tr></thead><tbody><tr><td align="center">赋值</td><td align="center">=</td></tr><tr><td align="center">加等于（a += 5  等价于a = a +5）</td><td align="center">+=</td></tr><tr><td align="center">减等于（a -= 5  等价于a = a -5）</td><td align="center">-=</td></tr><tr><td align="center">乘等于（a *= 5  等价于a = a *5）</td><td align="center">*=</td></tr><tr><td align="center">除等于（a /= 5  等价于a = a /5）</td><td align="center">/=</td></tr><tr><td align="center">取余等于（a %= 5  等价于a = a %5）</td><td align="center">%=</td></tr><tr><td align="center">自增（在自身加1）</td><td align="center">++</td></tr><tr><td align="center">自减（在自身减1）</td><td align="center">–</td></tr></tbody></table><p>赋值运算也会产生值，也就是会返回值，这就意味着，可以连续使用赋值运算符，比如：<code>var a = b= c = 15</code></p><p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211030170358.png"></p><h1 id="综合表达式"><a href="#综合表达式" class="headerlink" title="综合表达式"></a>综合表达式</h1><p>综合运算即把所有的运算加在一起，这就需要一个运算顺序了：非运算-&gt;数学运算-&gt;关系运算-&gt;逻辑运算</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> &lt; <span class="number">3</span> + <span class="number">3</span>; <span class="comment">//true</span></span><br><span class="line"><span class="number">3</span> &gt; <span class="number">2</span> &amp;&amp; <span class="number">8</span> &gt; <span class="number">3</span> + <span class="number">4</span>; <span class="comment">//true</span></span><br><span class="line"><span class="number">3</span> &gt; <span class="number">2</span> &amp;&amp; <span class="number">8</span> &gt; <span class="number">3</span> + <span class="number">5</span>; <span class="comment">//false</span></span><br><span class="line">!<span class="number">13</span> &lt; <span class="number">5</span> - <span class="number">3</span>; <span class="comment">//true</span></span><br><span class="line">!<span class="number">13</span> &lt; <span class="number">5</span> - <span class="number">5</span>; <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p><strong>变量范围表示</strong></p><p>验证a是介于5到12之间：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a&gt;=5 &amp;&amp; a&lt;=12</span><br></pre></td></tr></table></figure><h1 id="润年判断"><a href="#润年判断" class="headerlink" title="润年判断"></a>润年判断</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> year = <span class="built_in">Number</span>(prompt(<span class="string">&#x27;请输入年份&#x27;</span>));</span><br><span class="line">     <span class="comment">//能被4整除且不能被100整除</span></span><br><span class="line">     <span class="comment">//能被100整除也能被400整除</span></span><br><span class="line">     <span class="keyword">if</span> (</span><br><span class="line">       (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) ||</span><br><span class="line">       (year % <span class="number">100</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">400</span> != <span class="number">0</span>)</span><br><span class="line">     ) &#123;</span><br><span class="line">       alert(<span class="string">&#x27;是闰年&#x27;</span>);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       alert(<span class="string">&#x27;不是闰年&#x27;</span>);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍JavaScript的表达式和运算符。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://www.frontblog.top/categories/javascript/"/>
    
    
  </entry>
  
</feed>
