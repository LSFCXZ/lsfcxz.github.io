<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HTML标签(功能划分)</title>
    <url>/article/a73ea136.html</url>
    <content><![CDATA[<p> 本文主要记录HTML的每个标签属性的功能和语义。部分参考MDN文档。</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>一个HTML文档是由元素去组成，标签是元素的组成部分，这么说是因为在HTML中元素是这样：<code>&lt;p class=&quot;nice”&gt;Hello,HTML&lt;/p&gt;</code>，</p>
<p>而标签只是：<code>&lt;p&gt;&lt;/p&gt;</code>,元素是由标签，标签属性和属性值组成。HTML有效标签共计114个，废弃过时28个。</p>
<h1 id="主根元素（1）"><a href="#主根元素（1）" class="headerlink" title="主根元素（1）"></a>主根元素（1）</h1><p><code>html</code></p>
<ul>
<li>表示一个HTML<strong>文档的根</strong>（顶级元素），所以它也被称为<em>根元素</em>。所有<strong>其他元素必须是此元素的后代</strong>。</li>
</ul>
<h1 id="文档元数据（6）"><a href="#文档元数据（6）" class="headerlink" title="文档元数据（6）"></a>文档元数据（6）</h1><p><code>head</code></p>
<ul>
<li>规定<strong>文档相关的配置信息</strong>（元数据），包括文档的标题，引用的文档样式和脚本等</li>
</ul>
<p><code>meta</code></p>
<ul>
<li>表示那些不能由其它 HTML 元相关（meta-related）元素表示的任何元数据信息。简单说就是描述文档的内容。</li>
</ul>
<p><code>link</code></p>
<ul>
<li>规定了当前文档与外部资源的关系。</li>
</ul>
<h1 id="分区根元素（1）"><a href="#分区根元素（1）" class="headerlink" title="分区根元素（1）"></a>分区根元素（1）</h1><h1 id="内容分区（9-14）"><a href="#内容分区（9-14）" class="headerlink" title="内容分区（9~14）"></a>内容分区（9~14）</h1><h1 id="文本内容（13）"><a href="#文本内容（13）" class="headerlink" title="文本内容（13）"></a>文本内容（13）</h1><h1 id="内联文本语义（29）"><a href="#内联文本语义（29）" class="headerlink" title="内联文本语义（29）"></a>内联文本语义（29）</h1><h1 id="图片和多媒体（6）"><a href="#图片和多媒体（6）" class="headerlink" title="图片和多媒体（6）"></a>图片和多媒体（6）</h1><h1 id="内嵌内容（7）"><a href="#内嵌内容（7）" class="headerlink" title="内嵌内容（7）"></a>内嵌内容（7）</h1><h1 id="脚本（3）"><a href="#脚本（3）" class="headerlink" title="脚本（3）"></a>脚本（3）</h1><h1 id="标记标识（2）"><a href="#标记标识（2）" class="headerlink" title="标记标识（2）"></a>标记标识（2）</h1><h1 id="表格内容（10）"><a href="#表格内容（10）" class="headerlink" title="表格内容（10）"></a>表格内容（10）</h1><h1 id="表单（14）"><a href="#表单（14）" class="headerlink" title="表单（14）"></a>表单（14）</h1><h1 id="交互元素（4）"><a href="#交互元素（4）" class="headerlink" title="交互元素（4）"></a>交互元素（4）</h1><h1 id="Web组件（4）"><a href="#Web组件（4）" class="headerlink" title="Web组件（4）"></a>Web组件（4）</h1><h1 id="过时和弃用元素（28）"><a href="#过时和弃用元素（28）" class="headerlink" title="过时和弃用元素（28）"></a>过时和弃用元素（28）</h1>]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity2D:素材编辑地图设计二</title>
    <url>/article/cd58071a.html</url>
    <content><![CDATA[<p>本文主要记录素材的编辑和地图的设计。</p>
<h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>在前面的一小节中已经安装好软件和导入素材，这一节主要是地图的 绘制和素材切图。</p>
<h1 id="游戏背景"><a href="#游戏背景" class="headerlink" title="游戏背景"></a>游戏背景</h1><p>查看素材包，如下图，就是主要要使用的文件，<code>back</code>文件就是游戏的背景，<code>tilest</code>文件是游戏等会用的地图，</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220103172334.png"></p>
<p>在导入背景之前，需要知道一件事情，点击图片，看到图片可以设置的一些属性，Pixels Per Unit这个属性，中文翻译就是每单位像素数，默认就是一格子就是100个像素，如果直接导入会变得非常小，所以这里需要修改统一修改成16，点击Apply。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220103172829.png"></p>
<p>点击图片拖拽到左边窗口Hierarchy。这样就实现了背景图片的导入。滚动鼠标滚轮可以缩放，点击game可以查看游戏时画面是怎样的，但是就是一个普通背景。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220103173318.png"></p>
<p>接下来认识几个可以调整画面位置的按钮。</p>
<p><strong>注意：设置移动时要选择的back这个图片操作，不要变成是在移动“相机”！！</strong></p>
<p>从左到右快捷键分别是：Q、W、E、R、T、Y。</p>
<p>功能是：</p>
<p>Q是<strong>随意拖拽显示的位置</strong>，但是不会影响到游戏中的背景显示位置。这里可以这样理解（软件的可视窗口的变化，也就是我们设计软件的“相机”会被改变，但是不会影响游戏的“相机”，中间的才是游戏的“相机”）</p>
<p>W是<strong>移动游戏中背景的位置</strong>，点击中心方块，随意拖拽位置，注意要在相机里面，不然就是正常游戏是看不见的，可以在game预览。</p>
<p>E是缩放大小，这个就是<strong>软件的可视范围的缩放</strong>，不会影响游戏。</p>
<p>R是<strong>游戏图片的缩放</strong>，这个会影响游戏的显示效果。</p>
<p>T是<strong>剪切图片</strong>，让图片变成随意矩形。</p>
<p>Y是<strong>即可缩放又可以拖拽</strong>图片。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220103173957.png"></p>
<p>如果想变成默认位置，点击右边的<code>Tranform</code>里面的设置，点击Reset进行重置，画面就恢复原来的位置。记得是选中图片操作。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220103175959.png"></p>
<h1 id="地图设计"><a href="#地图设计" class="headerlink" title="地图设计"></a>地图设计</h1><p>在进行地图之前，需要了解地图的素材，在素材包里面有个<code>tilest</code>和<code>tileset-sliced</code>两个文件，前一个是没有切图，后一个是作者切图好的，这里使用没有切图的文件，自己切图。</p>
<p>在左边窗口Hierarchy空白右键，创建<code>Tilemap</code>，为了方便观看，可以选择back图片，点击checkbox取消显示。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220103181324.png"></p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220103180412.png"></p>
<p>最终点击<code>Tilemap</code>，将看到这样一个界面，接下来就是在这里绘制地图。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220103181434.png"></p>
<p>接下来就是打开画板，window-&gt;2D-&gt;Tile Palette。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220103181649.png"></p>
<p>接下来就是如创建画板，点击<code>Creat</code>后会让其选择保存文件夹，创建一个<code>map</code>文件夹，存放地图相关的文件。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220103182059.png"></p>
<p>接下来，点击图片，把Pixels Per Unit设置为16，但是我们把<code>tilest</code>图片拖拽进去之后发现如下情景，一个小格就是一张图片，所以这里需要对图片切割。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220103182626.png"></p>
<p>删除方法：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220103183228.png"></p>
<p>怎么切割呢，选择要切割的图片，点击右边的Sprit Mode-&gt;Multiple，让其成为多元素的的Sprit。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220103183649.png"></p>
<p>接下来就是切图编辑，如下操作后，我们需要对图片切成我们要的16*16的像素块。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220103184323.png"></p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220103184446.png"></p>
<p>点击Slice进行切图，再点击Apply，我们就可以看到文件目录里面的地图文件变成了一小块一小块。至此，切图就好了。</p>
<p>我们回过来点击：window-&gt;2D-&gt;Tile Palette，把图片拖拽进去，选择map文件夹，导入，最终就变成这样：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220103185135.png"></p>
<p>最后我们就可以绘制地图了：点击地图素材，在此点击想要绘制的位置，就可以。</p>
<p>地图要控制在相机的范围内，游戏可以正常看到地图，可以在game中预览效果。</p>
<p>最终绘制的地图效果：（看个人设计）</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220103191210.png"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>设置背景：我们需要先调整Pixels Per Unit这个属性，变成16*16像素。</li>
<li>创建<code>Tilemap</code>，可以理解为瓦片地图，我们需要在每一个格子画地图。</li>
<li>切图：<code>prit Mode-</code>&gt;<code>Multiple</code></li>
<li>Tile Palette：这个是画板，我们需要把切图好后的素材拖到里面，然后我们就可以绘制地图了.</li>
<li>流程是：创建<code>Tilemap</code>-&gt;点击需要切图的图片<code>prit Mode</code>-&gt;画板Tile Palette-&gt;绘制地图</li>
</ul>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
        <tag>2D</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity2D:图层Layer和角色创建三</title>
    <url>/article/ba5f378c.html</url>
    <content><![CDATA[<p>本文主要记录使用Unity完成图层的设计和角色的创建。</p>
<h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>在上面的一小节中，完成了素材的裁切和地图的设计，那接下来就来完成游戏角色的创建。</p>
<h1 id="图层Layer"><a href="#图层Layer" class="headerlink" title="图层Layer"></a>图层Layer</h1><p>我们上一节中把背景取消显示了，那这时候我们让它显示的话会出现背景挡住了地图。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220103212120.png"></p>
<p>接下来怎么处理呢，点击图片，点击右侧选择Sorting Layer-&gt;Add Sorting Layer,添加两个Layer。然后选择Background，背景图片选择Background，选择地图，设置Sorting Layer为<code>Frontground</code>，这里<strong>图层的逻辑是：越是下面的图层越靠前</strong>。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220103212352.png"></p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220103212712.png"></p>
<p>通过新增Layout是一种方法，但是很明显，背景和地图应该归属为Background，所以这里第二种方法就是<strong>设置Order in layer这个属性</strong>，让它显示前后，数值越大，显示越靠前。建议采用后者方法。</p>
<p>这是最终设置后效果。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220103214020.png"></p>
<h1 id="创建角色"><a href="#创建角色" class="headerlink" title="创建角色"></a>创建角色</h1><p>在项目目录里面：<code>Assets\Sunnyland\artwork\Sprites\player\idle</code>有角色图片，可以全选之后设置unit为16，点击<code>Aplly</code>。</p>
<p>在左边窗口Hierarchy空白右键新建2D Object-&gt;Sprite。把idle的第一张图片拖拽到sprite属性里面，然后不要忘记设置Layer，让它显示在前面。</p>
<p>我们可以重命名为Plyer，点击右边的<code>Transform reaset</code>小狐狸出现的位置</p>
<p>但是我们点击游戏运行，没有任何反应，所以我们需要设置重力。</p>
<h1 id="设置重力"><a href="#设置重力" class="headerlink" title="设置重力"></a>设置重力</h1><p>我们点击Add Component，搜索Rigid body 2D添加，这时候我们点击运行会发现小狐狸掉出地图外面，这是因为没有碰撞体，我自己的理解是：设置了重力，但是地图和人物是没有接触的，所以两个没有接触的东西，当然不可能会撞一起，所以我们要想办法让地图和人物产生碰撞。</p>
<p><strong>注意：在设置这些属性一定要选对Plyer这个角色项，不然选择背景的话，就是背景会掉落消失在我们面前，这多少就有点。。</strong></p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220103220032.png"></p>
<h1 id="设置碰撞体"><a href="#设置碰撞体" class="headerlink" title="设置碰撞体"></a>设置碰撞体</h1><p>依然在右边点击Add Component，搜索<code>Box Collider 2D</code>,添加之后，可以把背景先关掉，然后选择 Edit  Collider ，编辑这个碰撞体的边缘。大概是这样：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220103221510.png"></p>
<p>当然碰撞体不能只有一个，还需要给地图添加碰撞，选择左边的<code>Tilemap</code>地图这个项，在右边点击Add Component，添加<code>Tilemap Collider</code>，然后运行程序，小狐狸稳稳的降落到地面。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>设置图层的显示有两种方法，一种是新建图层，越下面的图层显示越前，第二章是设置<code>Order in layer</code>，数值越大，显示越靠前</li>
<li>创建角色，新建Sprite，把人物添加进去。</li>
<li>设置重力：Rigid body 2D</li>
<li>设置碰撞体：Collider就是碰撞体，类型不同选择不同，这里我们小狐狸理解为一个盒子的碰撞体，而地图有地图的碰撞类型</li>
</ul>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
        <tag>2D</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo图床</title>
    <url>/article/dbc4c63e.html</url>
    <content><![CDATA[<p>本文主要介绍在写<code>Hexo</code>博客用到的两个工具，和解决图床问题。</p>
<h1 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h1><p>要想<code>Hexo</code>支持图片显示，大都会想到一个插件<code>hexo-asset-image</code>，但是如果想利于SEO，链接的优化，那会使用到<code>hexo-abbrlink</code>这个插件，但是会遇到问题就是图片失效了。这里主要是<code>hexo-abbrlink</code>这个插件改变了文章的地址，导致图片找不到，所以我们干脆直接把图片放到公网，直接访问即可。这里采用<code>gitee</code>作为图床，<code>github</code>也可以，但是访问速度慢</p>
<h1 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h1><p>这里使用该工具作为上传图片的工具，这是一款开源的工具，地址：<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p>
<p>选择插件下载<code>gitee</code>，注意要安装好Node环境。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20210926230424.png"></p>
<p>填写信息：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20210926231011.png"></p>
<ul>
<li>用户名是注册时候的链接名，不是昵称！！</li>
<li>仓库名小写，直接写就行，不需要写路径</li>
<li>存放路径随意</li>
<li>令牌是<code>Gitee</code>私人令牌，不要给太多权限，第一个就行</li>
<li>图片只能1M上限，大于1M访问不了，需要登陆才可以有权限访问</li>
</ul>
<p>设置默认图床为Gitee即可。</p>
<h1 id="snipaste"><a href="#snipaste" class="headerlink" title="snipaste"></a>snipaste</h1><p>这是一款截图工具，搭配<code>PicGo</code>可以很流畅的截图到上传在到文档引用等整个流程。</p>
<p>官网：<a href="https://zh.snipaste.com/">https://zh.snipaste.com/</a></p>
<p>也可以到window商店下载。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity2D:安装软件和导入素材一</title>
    <url>/article/cdb3de80.html</url>
    <content><![CDATA[<p>本系列文章主要记录使用Unity构建一款2D像素风的游戏，最终会发布成一个网站供大家游玩。本文主要记录如何安装Unity和导入素材。</p>
<h1 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h1><p>打开Unity官网：<a href="https://unity.cn/">https://unity.cn/</a> ，打开下载页面：<a href="https://unity.cn/releases">https://unity.cn/releases</a> ，不同时间可能不同，本次游戏开发使用使用2018.4.5，下载Unity Installer版本，对应Visual Studio 2017，安装过程直接下一步，Unity需要登陆。</p>
<h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>打开Unity，输入项目名称，保存路径，选择2D。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220103110332.png"></p>
<p>这是创建后unity的主界面，如果和看到不一样，可以选择顶部窗口，window-&gt;Layouts-&gt;Default就可以恢复默认。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220103110742.png"></p>
<h1 id="认识窗口"><a href="#认识窗口" class="headerlink" title="认识窗口"></a>认识窗口</h1><p>接下来认识窗口的大概用途，这不是必须，但是有利于开发效率。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220103111820.png"></p>
<ul>
<li>01是项目的物体，可以理解</li>
<li>02是项目目录</li>
<li>03是相机的窗口</li>
<li>04是游戏窗口</li>
<li>05是Unity商店</li>
<li>06是项目可配置的 属性</li>
</ul>
<h1 id="导入素材"><a href="#导入素材" class="headerlink" title="导入素材"></a>导入素材</h1><p>打开unity的商店，既是Asset Store，搜索<code>sunnyland</code>，点击下载，导入。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220103112715.png"></p>
<p>可以看到自己项目目录有<code>Sunnyland</code>的目录，说明导入成功</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>安装软件版本2018.4.5，认识窗口的主要功能，导入素材。</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
        <tag>2D</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity2D:角色动画效果Animation六</title>
    <url>/article/19149d3a.html</url>
    <content><![CDATA[<p>本文主要记录如何设计人物站立时的动画效果。</p>
<h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>在前面的一小节中，完成小狐狸左右方向的改变和跳跃，但是都是维持着一个动作，那么这节将完成小狐狸站立时的动画和移动时动画，涉及到操作较为繁琐，会以图片为主。</p>
<h1 id="站立动画"><a href="#站立动画" class="headerlink" title="站立动画"></a>站立动画</h1><p>点击Player，右侧选择添加组件<code>Animator</code>，在下边项目目录新建文件夹Animation，在里面新建Player文件夹，再在里面新建Animator Controller，给它重命名叫Player吧，然后把它拖拽到刚才新建的组件。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220104204330.png"></p>
<p>接下来就是创建动画了</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220104204527.png"></p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220104204819.png"></p>
<p>创建名称就叫idle吧。然后打开资源包，</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220104205012.png"></p>
<p>然后全选图片，把它放到Animation这个窗口上，然后播放。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220104205318.png"></p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220104210530.png"></p>
<p>怎么查看动画的逻辑呢？</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220104210854.png"></p>
<p>这个时候，我们基本完成了站立的动画，但是问题是无论我们是走路，跳跃都是这个动画，所以接下来就是完成移动时的 动画。</p>
<h1 id="移动时动画"><a href="#移动时动画" class="headerlink" title="移动时动画"></a>移动时动画</h1><p>接下来我们创建跑动动画，名字就叫做run吧。同样，找到素材文件夹里面的run，记得把图片修改成16unit，然后把图片全选放到Animation这个窗口上，然后调整为10。注意保存的路径！</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220104211318.png"></p>
<p>接下来为两个动画设置逻辑。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220104212938.png"></p>
<p>然后如下操作：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220104213327.png"></p>
<p>接下绑定一些逻辑：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220104213959.png"></p>
<p>接下来设置跑动到站立的逻辑。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220104214230.png"></p>
<p>接下来就是书写Script，获取这个<code>runing</code>。</p>
<p>新建变量，把组件拖到这个变量里边。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public Animator anim;//动画</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220105091031.png"></p>
<p>最终代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class PlayerController : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    //游戏的刚体，也就是小狐狸</span><br><span class="line">    public Rigidbody2D rb;</span><br><span class="line">    public float speed;//速度</span><br><span class="line">    public float jumpforce;//跳跃</span><br><span class="line">    public Animator anim;//动画</span><br><span class="line">    //游戏初始化执行</span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    //每一帧变化执行</span><br><span class="line">    void FixedUpdate()</span><br><span class="line">    &#123;</span><br><span class="line">        Movement();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    void Movement()</span><br><span class="line">    &#123;</span><br><span class="line">        //得到玩家输入，-1代表左，0代表没动，1代表右。这个会得到1-0之间，-1到0之间的数。得到是浮点类型</span><br><span class="line">        float horizontalmove = Input.GetAxis(&quot;Horizontal&quot;);</span><br><span class="line">        //这个会直接得到1.0、0和-1.0</span><br><span class="line">        float facedircetion = Input.GetAxisRaw(&quot;Horizontal&quot;);</span><br><span class="line">        //角色移动 </span><br><span class="line">        rb.velocity = new Vector2(horizontalmove * speed * Time.deltaTime, rb.velocity.y);</span><br><span class="line">        anim.SetFloat(&quot;runing&quot;, Mathf.Abs(facedircetion));//动画</span><br><span class="line">        //移动方向</span><br><span class="line">        if(facedircetion !=0)</span><br><span class="line">        &#123;</span><br><span class="line">            transform.localScale = new Vector3(facedircetion, 1, 1);</span><br><span class="line">        &#125;</span><br><span class="line">        //跳跃代码</span><br><span class="line">        if (Input.GetButtonDown(&quot;Jump&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            rb.velocity = new Vector2(rb.velocity.x, jumpforce*Time.deltaTime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>其实就是原来基础上新增两行代码，定义变量这个好理解。</li>
<li> <code>anim.SetFloat(&quot;runing&quot;, Mathf.Abs(facedircetion));</code>这句主要是这个动画效果添加float的数据类型，这个键值是“<code>runing</code>”，那它的值是始终是1，这里回到刚才的设置条件，我们是设置条件大于0.1的时候改变状态，那这里只要角色移动，就会得到1的结果，角色移动，就是跑动的动画， <code>Mathf.Abs()</code>是C#的数学函数，将值放进里面都会得到正的值，就是绝对值。</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在本节中，最主要的是如何去录制这个动画效果，如何创建Animator组件并使用，该组件主要是来完成动画效果。并且呢，如何去判断从跑到站立，从站立到跑。以下是一些思路：</p>
<p>首先是去<strong>创建Animator组件</strong>，然后我们<strong>创建一个Animator Controller脚本</strong>去放到组件，这个就是动画相关的脚本，我们不用去编辑代码的，然后呢，我们在去<strong>录制动画</strong>，录制好之后呢，需要<strong>把动画的逻辑调整好</strong>，什么时候跑到站立，什么时候站立到跑，调正之后就是到Player脚本去<strong>定义变量，获取Animator组件</strong>，给它<strong>设置一个值</strong>，这个值就是来改变跑还是站立的动画，这个很好理解，我们移动就是跑嘛，那移动时候，不管左右，都是1，1就是跑的状态，这样就实现了小狐狸不移动的时候是站立动画，移动时候就是跑的动画</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
        <tag>2D</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity2D:角色移动四</title>
    <url>/article/20223717.html</url>
    <content><![CDATA[<p>本文主要记录如何让角色进行左右的移动。</p>
<h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>在上一小节中，使用Layer图层，把背景，地图和人物分别设置图层，让其能显示正常，再通过给人物设置Rigid body 2D和Box Collider 2D，让人物具有重力和碰撞体，再给地图设置Tilemap Collider，让其地图也有碰撞体，这样，人物就可以稳稳停在地图上了。</p>
<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><p>玩游戏都知道我们一般使用AWSD或者方向键来控制角色移动，在下面我们可以看到<code>Horizontal</code>这个属性，译文是水平的意思，当然它就是操作左右的一个属性，关于<code>Horizontal</code>在代码部分进行详解。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220104094309.png"></p>
<h1 id="脚本创建"><a href="#脚本创建" class="headerlink" title="脚本创建"></a>脚本创建</h1><p>要想让人物移动，就得在它身上绑定脚本，点击Player这个角色，再点击右边的Add Component，New Script，起个名字就叫做PlayerController，意思就是Player的控制器嘛，新建好之后可以创建文件夹来统一脚本存放位置，但是记得把脚本拖拽给Player这个项，然后编辑代码。</p>
<h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class PlayerController : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    //游戏的刚体，也就是小狐狸</span><br><span class="line">    public Rigidbody2D rb;</span><br><span class="line">    public float speed;//速度</span><br><span class="line">    // Start is called before the first frame update</span><br><span class="line">    //游戏初始化执行</span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Update is called once per frame</span><br><span class="line">    //每一帧变化执行</span><br><span class="line">    void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        Movement();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    void Movement()</span><br><span class="line">    &#123;</span><br><span class="line">        //得到玩家输入，-1代表左，0代表没动，1代表右。</span><br><span class="line">        float horizontalmove = Input.GetAxis(&quot;Horizontal&quot;);</span><br><span class="line">            rb.velocity = new Vector2(horizontalmove * speed, rb.velocity.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>上面代码中是最终完成的，其实就是定义两个变量，Rigidbody2D和speed，然后在动画的每一帧执行move方法。</li>
<li><code>Input.GetAxis(&quot;Horizontal&quot;)</code>这是得到玩家输入的方向，按下左方向或者A键得到-1，按下右方向或者D键得到1，不动就是0</li>
<li><code>rb.velocity</code>是刚体速度的变化</li>
<li><code>Vector2</code>是2D的速度变化，两个参数，第一个是x方向，第二是y方向，也就是上下方向，传入horizontalmove是1或者是-1，那得到结果就是正负结果，speed是速度，所以这里的意思是负数越大，说明你向左的幅度大。这里y轴没有变化。</li>
</ul>
<p>这里需要注意，我们设置Rigidbody2D，但是程序不会知道我们是哪个Rigidbody2D，所以返回到Unity中，可以在脚本看到脚本多了Rigidbody2D和speed这两个属性，这是我们刚才代码写的，所以我们需要把人物Rigidbody2D拖拽到脚本的Rigidbody2D进行关联。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220104101611.png"></p>
<p>如果这时候运行，会发现如果快速移动，小狐狸会转起来，这时候我们需要给人物的Rigidbody2D的Constraints锁定Z轴。</p>
<h1 id="关于BUG"><a href="#关于BUG" class="headerlink" title="关于BUG"></a>关于BUG</h1><p>这个时候的小狐狸确实可以左右移动，但是会出现卡住现象，这是因为小狐狸身上是一个矩形的碰撞体，具体会在后面的8节解决问题。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>如何获取玩家输入： <code>float horizontalmove = Input.GetAxis(&quot;Horizontal&quot;);</code></li>
<li>如何移动：<code> rb.velocity = new Vector2(horizontalmove * speed, rb.velocity.y);</code></li>
</ul>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
        <tag>2D</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity2D:角色方向和跳跃五</title>
    <url>/article/13c3ec8b.html</url>
    <content><![CDATA[<p>本文主要记录如何完成人物在左右的移动的时候改变方向，并且实现角色的跳跃。</p>
<h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>在上一节中，完成了小狐狸的左右移动，但是小狐狸的面只是朝一个方向，感觉特别僵硬，而且不能跳跃，接下来就完成这两个功能。</p>
<h1 id="方向改变"><a href="#方向改变" class="headerlink" title="方向改变"></a>方向改变</h1><p>在unity中，我们改变<code>Transform</code>里面的Scale的x为-1，就会发现狐狸的方向改变了，有了这点思路，就可以判断按键的左右，然后去改变值，就可以实现功能。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220104104619.png"></p>
<p>代码是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void Movement()</span><br><span class="line">&#123;</span><br><span class="line">    //得到玩家输入，-1代表左，0代表没动，1代表右。这个会得到1-0之间，-1到0之间的数。得到是浮点类型</span><br><span class="line">    float horizontalmove = Input.GetAxis(&quot;Horizontal&quot;);</span><br><span class="line">    //这个会直接得到1.0、0和-1.0</span><br><span class="line">    float facedircetion = Input.GetAxisRaw(&quot;Horizontal&quot;);</span><br><span class="line">    //移动 </span><br><span class="line">    rb.velocity = new Vector2(horizontalmove * speed, rb.velocity.y);</span><br><span class="line">    //移动方向</span><br><span class="line">    if(facedircetion !=0)</span><br><span class="line">    &#123;</span><br><span class="line">        transform.localScale = new Vector3(facedircetion, 1, 1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>transform.localScale</code>也就是刚才说的<code>Transform</code>里面的Scale，因为里面是三维的，所以需要使用Vector3，改变的第一参数，其他不变。<code>Input.GetAxisRaw(&quot;Horizontal&quot;);</code>这个会得到浮点类型的-1.0、0和1.0，传递过去就刚好可以实现小狐狸方向的反转。</p>
<p>运行游戏就可以看到小狐狸的方向跟着改变了。</p>
<h1 id="小调整"><a href="#小调整" class="headerlink" title="小调整"></a>小调整</h1><p>我们电脑不是每一个都是60帧数，所以需要修改<code>Update</code>为<code>FixedUpdate</code>。</p>
<p>在移动代码中修改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rb.velocity = new Vector2(horizontalmove * speed * Time.deltaTime, rb.velocity.y);</span><br></pre></td></tr></table></figure>

<p>调整之后会发现移动速度很慢，这时候把速度调整为400，即可以正常移动了。</p>
<h1 id="角色跳跃"><a href="#角色跳跃" class="headerlink" title="角色跳跃"></a>角色跳跃</h1><p>脚本代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public float jumpforce;//跳跃</span><br><span class="line">        //跳跃代码</span><br><span class="line">       if (Input.GetButtonDown(&quot;Jump&quot;))</span><br><span class="line">       &#123;</span><br><span class="line">           rb.velocity = new Vector2(rb.velocity.x, jumpforce*Time.deltaTime);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>jumpforce</code>变量就是跳跃的力度。</li>
<li><code>(Input.GetButtonDown(&quot;Jump&quot;)</code>是玩家按下空格的时候。</li>
<li> <code>rb.velocity = new Vector2(rb.velocity.x, jumpforce*Time.deltaTime);</code>改变上下方向。</li>
</ul>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
        <tag>2D</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity2D:角色跳跃动画七</title>
    <url>/article/bd32f395.html</url>
    <content><![CDATA[<p>本文主要记录如何实现人物跳跃的动画效果，主要是对上一节中的动画效果更深入使用和理解。</p>
<h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>在上一节中，我们的人物已经实现了站立时的动画和移动时的动画，但是跳跃的时候，人物还是保持站立的动画，如果跳跃的时候左右移动还可以看到人物空中踏步，这显然是不好的，接下来就是解决这个问题。</p>
<h1 id="创建动画"><a href="#创建动画" class="headerlink" title="创建动画"></a>创建动画</h1><p>首先跳跃动画其实是包括了两个动画，一个是跳起，一个是下落时的动画，那接下来就去创建动画。创建之前要记得把图片换成16unit，创建跳的动画，名称：jump  创建下落的动画，名称：fall，记得保存的路径。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220105113330.png"></p>
<p>那我们打开Animator就可以看到这两个动画了，接下来就是把动画链接起来。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220105114540.png"></p>
<h1 id="动画逻辑"><a href="#动画逻辑" class="headerlink" title="动画逻辑"></a>动画逻辑</h1><p>首先需要理解一点：跑动的时候我们可以跳跃，站立可以跳跃，跳跃之后就是下落，下落之后就是站立的状态。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220105115123.png"></p>
<p>这里修改一下之前的变量：<code>runing</code>-&gt;<code>running</code>,对于的代码需要修改。</p>
<p>添加两个布尔值：jumping和falling，这两个值的用处就是用来控制动画之间的切换，回顾上一节中，我们是不是跑到站立，站立到跑，就是使用到runing这个值，相同的，只要我们改变这些值，我们就可以实现动画之间的切换。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220105120118.png"></p>
<p>首先我们来设置跑-&gt;到跳的逻辑：这里就是jumping为true的时候就变成跳的动画。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220105120626.png"></p>
<p>然后我们再来设置站立时候跳跃：其实时一样的，选择的箭头变成idea指向jump而已。此图省略。</p>
<p>接下来就是在跳跃的代码里面编写：显而易见，我们上次时set一个浮点数，那这次就set一个布尔值，我们就可以实现跳跃的动画了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">anim.SetBool(&quot;jumping&quot;, true);</span><br></pre></td></tr></table></figure>

<p>接下来继续完成：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220105121530.png"></p>
<p>完成下落之后，我们当然得把跳的动画关闭所以记得把jump的值为false。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220105121828.png"></p>
<p>那接下来落地之后要回归到idle，那我们接下来就是设置这条逻辑：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220105122154.png"></p>
<p>我们来整理一下这里的思路：首先我们<strong>站立和跑动要到跳跃，jumping要为true</strong>，那<strong>跳跃要到下落，falling要为true，并且jumping要为false</strong>，因为你不能下落还要跳跃吧，然后就是<strong>下落之后我们要站立，那falling要为false，idle就是要为true</strong>。</p>
<h1 id="代码逻辑"><a href="#代码逻辑" class="headerlink" title="代码逻辑"></a>代码逻辑</h1><p>完成上面动画的逻辑，我们需要使用脚本来编写控制这些动画了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public LayerMask ground;//地图的碰撞层</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220105175634.png"></p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220105175846.png"></p>
<p>然后回到刚才的ground属性，下拉看到Ground，就是我们地图创建的，选择它即可。这是最终代码，记得<code>Collider2D</code>是人物的碰撞体，要添加到这个变量里面来。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class PlayerController : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    //游戏的刚体，也就是小狐狸</span><br><span class="line">    public Rigidbody2D rb;</span><br><span class="line">    public float speed;//速度</span><br><span class="line">    public float jumpforce;//跳跃</span><br><span class="line">    public Animator anim;//动画</span><br><span class="line">    public LayerMask ground;//地图的碰撞层</span><br><span class="line">    public Collider2D coll;//人物碰撞体</span><br><span class="line">    //游戏初始化执行</span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    //每一帧变化执行</span><br><span class="line">    void FixedUpdate()</span><br><span class="line">    &#123;</span><br><span class="line">        Movement();</span><br><span class="line">        SwitchAnim();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    void Movement()</span><br><span class="line">    &#123;</span><br><span class="line">        //得到玩家输入，-1代表左，0代表没动，1代表右。这个会得到1-0之间，-1到0之间的数。得到是浮点类型</span><br><span class="line">        float horizontalmove = Input.GetAxis(&quot;Horizontal&quot;);</span><br><span class="line">        //这个会直接得到1.0、0和-1.0</span><br><span class="line">        float facedircetion = Input.GetAxisRaw(&quot;Horizontal&quot;);</span><br><span class="line">        //角色移动 </span><br><span class="line">        rb.velocity = new Vector2(horizontalmove * speed * Time.deltaTime, rb.velocity.y);</span><br><span class="line">        anim.SetFloat(&quot;running&quot;, Mathf.Abs(facedircetion));//动画</span><br><span class="line">        //移动方向</span><br><span class="line">        if(facedircetion !=0)</span><br><span class="line">        &#123;</span><br><span class="line">            transform.localScale = new Vector3(facedircetion, 1, 1);</span><br><span class="line">        &#125;</span><br><span class="line">        //跳跃代码</span><br><span class="line">        if (Input.GetButtonDown(&quot;Jump&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            rb.velocity = new Vector2(rb.velocity.x, jumpforce*Time.deltaTime);</span><br><span class="line">            anim.SetBool(&quot;jumping&quot;, true);//跳跃动画</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //动画之间切换的效果</span><br><span class="line">    void SwitchAnim()</span><br><span class="line">    &#123;</span><br><span class="line">        anim.SetBool(&quot;idle&quot;, false);//</span><br><span class="line">        //如果是跳跃</span><br><span class="line">        if (anim.GetBool(&quot;jumping&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            if (rb.velocity.y &lt; 0)</span><br><span class="line">            &#123;</span><br><span class="line">                anim.SetBool(&quot;jumping&quot;, false);</span><br><span class="line">                anim.SetBool(&quot;falling&quot;, true);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else if (coll.IsTouchingLayers(ground))//判断是否触碰到地图</span><br><span class="line">        &#123;</span><br><span class="line">            anim.SetBool(&quot;falling&quot;,false);</span><br><span class="line">            anim.SetBool(&quot;idle&quot;, true);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>就是加了判断，如果两个碰撞体在一起，就是人物到了地面，所以就回归到站立动画</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本节中难点在于动画之间的切换，什么时候该执行什么动画，小狐狸触碰到地面时怎么知道的，这里就是使用<code>coll.IsTouchingLayers(ground)</code>。</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
        <tag>2D</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity2D:修复移动问题八</title>
    <url>/article/2d8dee04.html</url>
    <content><![CDATA[<p> 本文主要记录前面开发中可能遇到问题的解决方法。</p>
<h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>经过前面的开发之后，小狐狸基本实现了移动跳跃，和站立跳跃下落的动画，但是，如果按照之前的开发，可能会出现无缘无故卡住的现象，接下来就解决这个问题。</p>
<h1 id="移动卡住问题"><a href="#移动卡住问题" class="headerlink" title="移动卡住问题"></a>移动卡住问题</h1><p>两种方法：</p>
<p>第一种：</p>
<p>给小狐狸添加一个圆形的碰撞体，把它绑定到脚下，这样就不会产生卡住现象。这里修改之后，记得把这个组件拖到脚本里面的coll，因为这时候，我们应该时去判断这个碰撞体和地图的接触。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220105190347.png"></p>
<p>第二种：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20220105185702.png"></p>
<h1 id="优化代码"><a href="#优化代码" class="headerlink" title="优化代码"></a>优化代码</h1><p>这里有些变量我们时不需要更改的，可以设置成私有状态，那怎么获取呢，就需要在游戏开始的时候获取这些组件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> private Rigidbody2D rb;</span><br><span class="line"> private Animator anim;//动画</span><br><span class="line">void Start()</span><br><span class="line"> &#123;</span><br><span class="line">     rb = GetComponent&lt;Rigidbody2D&gt;();</span><br><span class="line">     anim = GetComponent&lt;Animator&gt;();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
        <tag>2D</tag>
      </tags>
  </entry>
  <entry>
    <title>Autojs记录</title>
    <url>/article/e2e5156.html</url>
    <content><![CDATA[<p>本文主要记录<code>Autojs</code>脚本的开发。</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><strong>不需要Root权限</strong>的JavaScript自动化软件，这是<code>AutoJS</code>的官方的宣传语，它主要就是实现手机屏幕的自动点击。学习<code>AutoJS</code>有必要了解它的历史，现在<code>AutoJS</code>分为两个版本，一个为开源版本（已经停更），一个就是Pro版本，这个是闭源并且收费的，至于为什么，这是作者的回答：</p>
<blockquote>
<p>这些功能我都不需要，想继续使用免费版，免费版仍然会更新吗？<br>答：免费版已更新至<code>4.1.1Beta</code>并且不再更新。一方面，<code>Auto.js</code>从2017年1月免费提供<code>Auto.js</code>至今，已经花费了大量精力，无法同时维持两个版本，而如果只维持免费版则没有继续更新的足够动力；另一方面，有不少人对<code>Auto.js</code>的开源代码进行修改，增加某些功能后做成费用高昂的收费版出售，没有取得任何授权，也违背了开源协议中的【非商业性使用】条款；甚至用以群控、刷单等灰色、非法用途。这让本人感到十分心寒，这也是免费/开源版停更的重要原因。</p>
</blockquote>
<p>这两个版本的 差异还是挺明显，开源版本是比较强大些的，但是存在一些Bug，一些功能也没用那么完善，文档也不是很全，当然也可以拉取项目后自己维护。Pro版本就砍掉一些功能，砍掉这些功能就是为了防止别人进行一些非法用途。</p>
<h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><p>现在官网只有<code>AutoJSPro</code>的软件，这里是4.1.1的软件和打包插件：链接：<a href="https://pan.baidu.com/s/1LqlkACcsw558zNc4w8MjIw">https://pan.baidu.com/s/1LqlkACcsw558zNc4w8MjIw</a><br>提取码：6666</p>
<p>在手机安装好后打开软件，点开连接电脑，输入电脑的<code>IP</code>地址。</p>
<p>电脑安装<code>VSCode</code>，点击扩展，搜索<code>Auto.js-VSCodeExt</code>，安装，查看，命令面板，<code>auto js new project</code>,会看到<code>mainjs</code>和一个<code>json</code>文件，main就是程序要运行的，<code>json</code>文件是打包需要的配置</p>
<p>然后就是<code>auto js start serve</code>开启服务，run就是运行项目，看到屏幕有弹窗就是成功了。</p>
<h1 id="如何开发"><a href="#如何开发" class="headerlink" title="如何开发"></a>如何开发</h1><p>完成了项目环境基本也就没啥问题，想实现什么功能基本就是看文档自行发挥，这里需要注意的是，<code>AutoJS</code>的文档是<a href="https://hyb1996.github.io/AutoJs-Docs/#/">https://hyb1996.github.io/AutoJs-Docs/#/</a> 这个，不要写着<code>AutoJs</code>的代码，看着Pro版本的文档。</p>
<h2 id="调起应用"><a href="#调起应用" class="headerlink" title="调起应用"></a>调起应用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//启动微信</span></span><br><span class="line"><span class="keyword">var</span> wx = getPackageName(<span class="string">&quot;微信&quot;</span>);</span><br><span class="line">app.launch(wx);</span><br><span class="line"><span class="built_in">console</span>.show()</span><br><span class="line"><span class="built_in">console</span>.log(wx);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.launch(<span class="string">&#x27;com.tencent.mm&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>上面两个其实都一样，第一个去显示控制台，打印微信这个程序的包名，第二个就是直接调起微信，有些时候我们是不知道包名的，所以第一种方法就有用处了。</p>
<h2 id="坐标点击"><a href="#坐标点击" class="headerlink" title="坐标点击"></a>坐标点击</h2><p>坐标点击算是比较直接的 方法，但是只能适合自己的手机，比较每个手机的屏幕是不一样的，可以打开手机开发者模式，打开输入模式里面的指针，显示指针位置就可以看到点击的坐标，有了坐标以后就可以让<code>Autojs</code>自己点击了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">click(x,y)</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li><code>AutoJS</code>算是容易学习的，所见即所得，基本都是全局函数，想实现什么功能，直接调用<code>Api</code>即可实现功能;</li>
<li>开发的难度在于页面的点击逻辑，程序点击时间是立即生效的，而页面时需要时间响应的，所以中间需要停留一段时间再去执行程序才能确保点击成功。</li>
<li><code>AutoJS</code>的调试一般就是显示控制台，在控制台打印消息，然后去跟踪错误的信息并调整代码。</li>
<li>做好代码功能划分也是十分必要的，如果十几个页面功能堆叠一起，查起Bug十分痛苦，也不利于维护。</li>
<li><code>AutoJS</code>本身代码就在于客户端，想破解理论是可以的，想真正防止被破解，除非代码放在服务器，但是代价就是你需要花时间搞定后端的东西，另外就是设置卡密，卡密只能限制恶意传播，通过反编译后依然可以得到源代码。</li>
</ul>
]]></content>
      <categories>
        <category>AutoJS</category>
      </categories>
      <tags>
        <tag>Autojs</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity2D:镜头跟踪九</title>
    <url>/article/5a8ade92.html</url>
    <content><![CDATA[<p> 本文主要记录Unity如何实现人物的镜头跟踪。</p>
<h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>经过前面的Debug之后，现在基本实现了移动跳跃和动画实现，但是呢，会发现小狐狸怎么跳，镜头都是一个位置，就算跳出边界了也就看不见了，接下来就是去解决这个问题。</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
        <tag>2D</tag>
      </tags>
  </entry>
  <entry>
    <title>小破站正式上线</title>
    <url>/article/36e749dc.html</url>
    <content><![CDATA[<p>断断续续半年时间，使用<code>Hexo</code>已有很长一段时间，经历了不断的优化踩坑，最开始使用<code>NexT</code>做为博客主题，到后来使用了Butterfly主题，到对主题的一系列魔改，最终还是回到<code>NexT</code>作为博客的主题。</p>
<p><code>NexT</code>主题相对来说较为简洁，使用Butterfly主题确实对博客有很大的美化程度，最主要是在浏览器渲染上面，由于集成大量插件和动画特效，使得手机浏览时不是特别顺畅。</p>
<p>最终博客站为了流畅度，只留下实用功能，对博客轻量美化，让网站即顺畅又优美。</p>
<p>目前使用<code>GithubPages</code>加<code>GiteePages</code>双代码平台推送，测试下来，电信网络访问<code>githubPages</code>很大概率屏蔽，<code>GiteePages</code>需要手动更新，较为麻烦，<code>CDN</code>加速效果不明显，CI平台需要收取一定费用，介于目前情况，只能暂时如此，未来计划使用服务器搭建自己的CI平台进行自动化部署</p>
<p>2021-12-22：<code>update</code></p>
<p>目前博客已经使用自动化平台构建发布。</p>
]]></content>
      <categories>
        <category>Hexo框架</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>在线视频播放实现</title>
    <url>/article/bff5c62c.html</url>
    <content><![CDATA[<p>最近想开发一个在线教育类的移动Web，涉及到一个问题就是在线视频播放问题，起初以为一个video标签不就搞定，但是后来考虑到网络带宽，视频地址，文件的加密，就不得做进一步处理。</p>
<h1 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h1><p>由于涉及到前后端，这里后端是采用nede的Koa框架，其实原理大都一样。前端使用HTML结构，播放器使用腾讯播放器的<code>SDK</code>。</p>
<p>腾讯播放器官方文档：<a href="https://cloud.tencent.com/document/product/881">https://cloud.tencent.com/document/product/881</a></p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><p>可以到仓库直接克隆一个工程化项目做基本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@gitee.com:lsfcxz/koa_start.git</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i </span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure>

<p>准备工作：</p>
<p>需要把<code>mp4</code>转成<code>hls</code>格式，即一个<code>m3u8</code>文件和多个ts文件。这里推荐一个在线转换网站：<a href="https://mp4.to/hls">https://mp4.to/hls</a></p>
<p>把文件放在项目的public目录下，项目集成了<code>koa-static</code>这个中间件，所以访问：<a href="http://localhost:3000:/test/test.m3u8">http://localhost:3000:/test/test.m3u8</a> 的时候是可以去访问到文件</p>
<p>注意：test是文件夹，个人喜欢把文件归到一个文件夹下面，<code>test.m3u8</code>当然就是文件名字。<code>m3u8</code>和<code>ts</code>要放在同一级目录，不放在一起就需要改<code>#EXTINF:</code>下面的ts文件路径。</p>
<h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>在线视频<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 视频容器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;id_test_video&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:100%; height:auto;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 腾讯播放器SDK  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://web.sdk.qcloud.com/player/tcplayerlite/release/v2.4.1/TcPlayer-2.4.1.js&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> player = <span class="keyword">new</span> TcPlayer(<span class="string">&#x27;id_test_video&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">      <span class="string">&quot;m3u8&quot;</span>: <span class="string">&#x27;http://192.168.0.105:3000/test/test.m3u8&#x27;</span>, <span class="comment">//请替换成实际可用的播放地址</span></span></span><br><span class="line"><span class="javascript">      <span class="string">&quot;autoplay&quot;</span>: <span class="literal">true</span>,      <span class="comment">//iOS 下 safari 浏览器，以及大部分移动端浏览器是不开放视频自动播放这个能力的</span></span></span><br><span class="line"><span class="javascript">      <span class="string">&quot;poster&quot;</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">&quot;width&quot;</span>: <span class="string">&#x27;480&#x27;</span>,<span class="comment">//视频的显示宽度，请尽量使用视频分辨率宽度</span></span></span><br><span class="line"><span class="javascript">      <span class="string">&quot;height&quot;</span>: <span class="string">&#x27;320&#x27;</span><span class="comment">//视频的显示高度，请尽量使用视频分辨率高度</span></span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果前端能够正常播放视频，说明已经成功。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211230104623.png"></p>
<p>这里的URL是不能被直接访问的：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211230104740.png"></p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211230104836.png"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上虽然一定程度加大了视频盗取成本，但是破解的方式也很简单，只要把ts文件和<code>m3u8</code>文件下载下来，然后再转回来就可以得到视频文件，再者<code>hls</code>这个东西适合做这种录播，点播，不适合做直播这种实时的，延时大，因为其原理就是把文件分片传输，分片大小也决定了传输的效率。</p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>流媒体</tag>
      </tags>
  </entry>
</search>
