<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BFC规范</title>
    <url>/article/9221e461.html</url>
    <content><![CDATA[<p>本文介绍CSS的BFC规范和如何形成BFC的规范。</p>
<p>BFC概念：</p>
<p>BFC(Box Formatting Context 会计格式化上下文)是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然。BFC是封闭在一个盒子里面，使网页布局达到一种稳定状态</p>
<p>四种方法：</p>
<ol>
<li>float的值不是none</li>
<li>posittion的值不是static或者relative</li>
<li>display的值是inline-block、flex、或者inline-flex</li>
<li>overflow：hidden</li>
</ol>
<p>浏览器差异：</p>
<p>IE6、7浏览器使用haslayout机制，和BFC规范略有差异，比如IE浏览器可以使用zoom：1属性“让盒子拥有layout”</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS3文档</title>
    <url>/article/248395c9.html</url>
    <content><![CDATA[<p>本文主要介绍CSS3的属性和属性，以属性+属性值+注释的形式。</p>
<h1 id="文本字体"><a href="#文本字体" class="headerlink" title="文本字体"></a>文本字体</h1><h2 id="color属性"><a href="#color属性" class="headerlink" title="color属性"></a>color属性</h2><p>属性值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">color: 英文颜色|十六进制|rgb()|rgba();</span><br></pre></td></tr></table></figure>

<ul>
<li>设置文字前景色</li>
<li>十六进制：红绿蓝，#ff0000</li>
<li>透明:transparent</li>
</ul>
<h2 id="font-size属性"><a href="#font-size属性" class="headerlink" title="font-size属性"></a>font-size属性</h2><p>属性值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">font-size:n px|n em|n rem</span><br></pre></td></tr></table></figure>

<ul>
<li>设置字号，网页通常字号16px，浏览器最小支持10px</li>
</ul>
<h2 id="font-weight属性"><a href="#font-weight属性" class="headerlink" title="font-weight属性"></a>font-weight属性</h2><p>属性值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">font-weight:normal | bold |lighter | bolder</span><br></pre></td></tr></table></figure>

<ul>
<li>设置字号粗细</li>
<li>normal：正常属性，400等值；bold，加粗；lighter，更细（多数中文字体不支持）；bolder,更粗（多数中文字体不支持）</li>
</ul>
<h2 id="font-style属性"><a href="#font-style属性" class="headerlink" title="font-style属性"></a>font-style属性</h2><p>属性值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">font-style: normal | italic | oblique</span><br></pre></td></tr></table></figure>

<ul>
<li>设置字体倾斜</li>
<li>normal表示取消倾斜；italic 表示倾斜字体； oblique表示倾斜字体(不常用)</li>
</ul>
<h2 id="font-decoration属性"><a href="#font-decoration属性" class="headerlink" title="font-decoration属性"></a>font-decoration属性</h2><p>属性值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">font-decoration:none | underline | line-through</span><br></pre></td></tr></table></figure>

<ul>
<li>设置文字下划线</li>
<li>none  表示没有修饰线；underline 表示下划线；line-through 表示删除线</li>
</ul>
<h2 id="font-family属性"><a href="#font-family属性" class="headerlink" title="font-family属性"></a>font-family属性</h2><p>属性值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">font-family:&#x27;微软雅黑&#x27;</span><br></pre></td></tr></table></figure>

<ul>
<li>用来设置字体</li>
<li>字体可以是列表形式，后面的字体是前面的后备字体</li>
<li>字体名称为中文或者英文有空格，都需要使用引号包裹</li>
</ul>
<h1 id="段落和行"><a href="#段落和行" class="headerlink" title="段落和行"></a>段落和行</h1><h2 id="text-indent属性"><a href="#text-indent属性" class="headerlink" title="text-indent属性"></a>text-indent属性</h2><p>属性值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">text-indent: n em</span><br></pre></td></tr></table></figure>

<ul>
<li>设置首行文本缩进</li>
</ul>
<h2 id="text-align属性"><a href="#text-align属性" class="headerlink" title="text-align属性"></a>text-align属性</h2><p>属性值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">text-align:left | center |right</span><br></pre></td></tr></table></figure>

<ul>
<li>是指文字横向方向</li>
</ul>
<h2 id="line-height属性"><a href="#line-height属性" class="headerlink" title="line-height属性"></a>line-height属性</h2><p>属性值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">line-height: n px</span><br></pre></td></tr></table></figure>

<ul>
<li>设置文字段落行高</li>
</ul>
<h1 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h1><h2 id="width属性"><a href="#width属性" class="headerlink" title="width属性"></a>width属性</h2><ul>
<li>设置宽度</li>
</ul>
<h2 id="height属性"><a href="#height属性" class="headerlink" title="height属性"></a>height属性</h2><ul>
<li>设置高度</li>
</ul>
<h2 id="padding属性"><a href="#padding属性" class="headerlink" title="padding属性"></a>padding属性</h2><ul>
<li>设置内边距</li>
<li>共有4个小属性：padding-top(上内边距)、padding-right(右内边距)、padding-bottom（下内边距）、padding-left(左内边距)</li>
<li>padding综合属性：上、右、下、左；上下、左右；上下、右、左</li>
</ul>
<h2 id="marght属性"><a href="#marght属性" class="headerlink" title="marght属性"></a>marght属性</h2><ul>
<li>设置外边距 </li>
<li>共有4个小属性：marght-top(上外边距)、marght-right(右外边距)、marght-bottom（下外边距）、marght-left(左外边距))</li>
<li>marght综合属性：上、右、下、左；上下、左右；上下、右、左</li>
</ul>
<h2 id="border属性"><a href="#border属性" class="headerlink" title="border属性"></a>border属性</h2><ul>
<li>设置边框</li>
<li>三要素：边框宽度、线型、颜色</li>
<li>线型：solid:实线、dotted:虚线、dashed:点状线</li>
<li>拆分三个小属性：border-width、border-style、border-color</li>
<li>border有四个方向：border-top、border-right、border-bottom、border-left、它们都具有三要素</li>
<li>border四个方向也可以拆三个小属性：border-top-width、border-top-style、border-top-color等等</li>
</ul>
<h2 id="box-sizing属性"><a href="#box-sizing属性" class="headerlink" title="box-sizing属性"></a>box-sizing属性</h2><p>属性值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">box-sizing:border-box | content-box</span><br></pre></td></tr></table></figure>

<ul>
<li>border-box设置为内缩形式，即IE盒模型，宽高为盒子的实际宽高。</li>
<li>content-box为默认</li>
</ul>
<h1 id="元素隐藏"><a href="#元素隐藏" class="headerlink" title="元素隐藏"></a>元素隐藏</h1><h2 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a>display属性</h2><p>属性值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">display:block | inline | inline-block |none</span><br></pre></td></tr></table></figure>

<ul>
<li>设置元素块级转换</li>
<li>block为块级；inline为行内；inline-block为行内块;none为隐藏元素，彻底放弃位置</li>
<li>display一般是作为元素的显示状态。</li>
</ul>
<h2 id="visibility属性"><a href="#visibility属性" class="headerlink" title="visibility属性"></a>visibility属性</h2><p>属性值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">visibility:hidden</span><br></pre></td></tr></table></figure>

<ul>
<li>hidden设置为不可见，不放弃位置</li>
<li>visibility一般设置为元素的可见度</li>
</ul>
<h1 id="浮动与定位"><a href="#浮动与定位" class="headerlink" title="浮动与定位"></a>浮动与定位</h1><h2 id="float属性"><a href="#float属性" class="headerlink" title="float属性"></a>float属性</h2><p>属性值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">float:left | right</span><br></pre></td></tr></table></figure>

<ul>
<li>设置盒子的浮动，实现并排</li>
<li>left左浮动,right右浮动</li>
</ul>
<h2 id="position属性"><a href="#position属性" class="headerlink" title="position属性"></a>position属性</h2><p>属性值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">position: relative | absolute | fixed | sticky</span><br></pre></td></tr></table></figure>

<ul>
<li>设置元素的定位</li>
<li>relative为相对定位，相对自己原来位置定位；不脱离文档流</li>
<li>absolute为绝对定位，相对最近一个定位元素进行定位，脱离文档流</li>
<li>fixed为固定定位，相对浏览器窗口定位，脱离文档流</li>
<li>sticky为粘性定位，结合了固定定位和相对定位的特性，相对原来位置定位，但是对于浏览器位置是固定的</li>
</ul>
<h1 id="盒子圆角、阴影"><a href="#盒子圆角、阴影" class="headerlink" title="盒子圆角、阴影"></a>盒子圆角、阴影</h1><h2 id="border-radius属性"><a href="#border-radius属性" class="headerlink" title="border-radius属性"></a>border-radius属性</h2><p>属性值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">border-radius: n px | n%</span><br></pre></td></tr></table></figure>

<ul>
<li>设置盒子的圆角，多少px是作为圆的半径</li>
<li>有四个小属性：border-top-left-radius、border-top-right-radius、border-bootom-left-radius、border-bootom-right-radius</li>
</ul>
<h2 id="box-shadow属性"><a href="#box-shadow属性" class="headerlink" title="box-shadow属性"></a>box-shadow属性</h2><p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>:inset <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span> <span class="number">50px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, .<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>五元素：</p>
<p>x偏移、y偏移、模糊量、(阴影延展)、颜色</p>
</li>
<li><p>x偏移，正式往左边走，负数右边</p>
</li>
<li><p>y偏移，正式往下边走，负数上边</p>
</li>
<li><p>阴影延展：往4个方向扩展</p>
</li>
<li><p>模糊量：模糊程度</p>
</li>
<li><p>颜色：英文、十六进制、rgb()、rgba()等表示法</p>
</li>
<li><p>盒子还可以设置内部阴影：inset</p>
</li>
<li><p>可以设置多个阴影重复，使用逗号隔开</p>
</li>
</ul>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h2 id="background-color属性"><a href="#background-color属性" class="headerlink" title="background-color属性"></a>background-color属性</h2><p>属性值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background-color:英文颜色 | 十六进制 |rgb |rgba</span><br></pre></td></tr></table></figure>

<ul>
<li>设置背景颜色</li>
</ul>
<h2 id="background-image属性"><a href="#background-image属性" class="headerlink" title="background-image属性"></a>background-image属性</h2><p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background-image:url()</span><br></pre></td></tr></table></figure>

<ul>
<li>设置背景图片，可以相对路径或者网络图片</li>
<li>一般为横纵重复</li>
</ul>
<h2 id="background-repeat属性"><a href="#background-repeat属性" class="headerlink" title="background-repeat属性"></a>background-repeat属性</h2><p>属性值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background-repeat:repeat |repeat-x |repeat-y |no-repeat</span><br></pre></td></tr></table></figure>

<ul>
<li>设置背景图片的重复模式</li>
<li>repeat默认；repeat-x X轴平铺；repeat-y轴平铺；no-repeat不平铺</li>
</ul>
<h2 id="background-size属性"><a href="#background-size属性" class="headerlink" title="background-size属性"></a>background-size属性</h2><p>属性值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background-size:contain | cover | px</span><br></pre></td></tr></table></figure>

<ul>
<li>设置图片的尺寸。IE9</li>
<li>contain表示图片尺寸以容纳到盒子里，完整显示，有白边</li>
<li>cover表示将背景图片尺寸以撑满盒子，不完整显示</li>
</ul>
<h2 id="background-clip属性"><a href="#background-clip属性" class="headerlink" title="background-clip属性"></a>background-clip属性</h2><p>属性值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background-clip:boreder-box | padding-box | content-box</span><br></pre></td></tr></table></figure>

<ul>
<li>设置背景裁剪到哪个位置</li>
<li>boreder-box默认、padding-box裁切到内边，不会绘制到边框、content-box裁切到内容区域</li>
</ul>
<h2 id="background-attachment属性"><a href="#background-attachment属性" class="headerlink" title="background-attachment属性"></a>background-attachment属性</h2><p>属性值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background-attachment:fixed | local |scroll</span><br></pre></td></tr></table></figure>

<ul>
<li>设置背景固定，适合在一些视觉误差场景</li>
<li>fixed可以理解为固定定位，自己滚动条不动，外部滚动条不动</li>
<li>local自己滚动条动，外部滚动条动</li>
<li>scroll自己滚动条不动，外部滚动条动（默认值）</li>
</ul>
<h2 id="background-position属性"><a href="#background-position属性" class="headerlink" title="background-position属性"></a>background-position属性</h2><p>属性值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background-position:100px 200px |top left|top center|top right|left center|center center|right center|bottom  left|bottom center |bottom right</span><br></pre></td></tr></table></figure>

<ul>
<li>设置背景位置</li>
<li>可以使用top、left、center、right、bottom来描述位置</li>
</ul>
<h1 id="弹性布局"><a href="#弹性布局" class="headerlink" title="弹性布局"></a>弹性布局</h1><h1 id="变形"><a href="#变形" class="headerlink" title="变形"></a>变形</h1><h2 id="tranform属性"><a href="#tranform属性" class="headerlink" title="tranform属性"></a>tranform属性</h2><p>属性值：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">tranform:<span class="built_in">rotate</span>()|<span class="built_in">scale</span>()|<span class="built_in">skew</span>()|<span class="built_in">translate</span>()|<span class="built_in">rotateX</span>()|<span class="built_in">rotateY</span>()|<span class="built_in">rotateZ</span>()|<span class="built_in">translateX</span>()|<span class="built_in">translateY</span>()|<span class="built_in">translateZ</span>()</span><br></pre></td></tr></table></figure>

<ul>
<li>设置变形，如何变形。</li>
<li>rotate()：旋转变形，单位deg，示例：<code>tranform:rotate(45deg)</code>，表示顺时针旋转45度</li>
<li>scale()：缩放变形，没有单位，就是数字，代表倍数，示例：<code>tranform:scale(3)</code>,表示放大3倍</li>
<li>skew()：斜切变形，单位deg，示例：<code>tranform:skew(10deg,20deg)</code></li>
<li>translate()：位移变形，单位px，示例:<code>transform:translate(100px,200px)</code>，表示向右100px，向下200px</li>
<li><code>rotateX()</code>、<code>rotateY</code>()和<code>rotateZ()</code>都是3D旋转,单位deg,示例:<code>transform:rotateY(45deg) rotateX(45deg);</code>，父盒子要设置perspective属性</li>
<li>translateX()、translateY()和translateZ()都是空间移动，必须先3D旋转后才可以进行空间移动，示例：<code>transform: rotateY(128deg) rotateX(52deg) translateY(50px) translateZ(50px);</code></li>
</ul>
<h2 id="perspective属性"><a href="#perspective属性" class="headerlink" title="perspective属性"></a>perspective属性</h2><p>示例</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">perspective</span>:<span class="number">300px</span></span><br></pre></td></tr></table></figure>

<ul>
<li>设置景深效果，主要配合3D旋转使用</li>
</ul>
<h2 id="transform-origin属性"><a href="#transform-origin属性" class="headerlink" title="transform-origin属性"></a>transform-origin属性</h2><p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform-origin</span>:<span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<ul>
<li>绕着的点的位置</li>
</ul>
<h1 id="过渡与动画"><a href="#过渡与动画" class="headerlink" title="过渡与动画"></a>过渡与动画</h1><h2 id="transition属性"><a href="#transition属性" class="headerlink" title="transition属性"></a>transition属性</h2><p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transition</span>:width <span class="number">1s</span> linear <span class="number">0s</span></span><br></pre></td></tr></table></figure>

<ul>
<li>设置过渡效果</li>
<li>四要素：过渡属性，动画总时长，变化速度曲线，延迟时间</li>
</ul>
<h2 id="keyframes属性"><a href="#keyframes属性" class="headerlink" title="@keyframes属性"></a>@keyframes属性</h2><p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> test &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">0deg</span>) <span class="built_in">rotateY</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">360deg</span>) <span class="built_in">rotateY</span>(<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>定义动画效果</li>
<li>test为动画的名称，调用动画时候使用， from是开始状态，to是结束状态。</li>
</ul>
<h2 id="animation属性"><a href="#animation属性" class="headerlink" title="animation属性"></a>animation属性</h2><p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">animation</span>: test <span class="number">3s</span> linear <span class="number">0s</span> infinite;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用动画效果</li>
<li>test是动画名称，3s是总时长，linear是缓动效果，0s是延迟执行时间，第五个是，动画执行次数，如果想永久运行，则使用<code>infinite</code>，如果想让动画偶次数自动逆向执行，则使用<code>animation</code>参数作为第六个参数，如果想让动画停止在最后结束状态，那么则使用<code>forwards</code>参数</li>
</ul>
<h1 id="鼠标形状"><a href="#鼠标形状" class="headerlink" title="鼠标形状"></a>鼠标形状</h1><h2 id="cursor属性"><a href="#cursor属性" class="headerlink" title="cursor属性"></a>cursor属性</h2><p>属性值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cursor: pointer</span><br></pre></td></tr></table></figure>

<ul>
<li>设置鼠标形状</li>
<li>pointer表示小手状态</li>
</ul>
<h1 id="其他属性与属性值"><a href="#其他属性与属性值" class="headerlink" title="其他属性与属性值"></a>其他属性与属性值</h1><h2 id="important属性值"><a href="#important属性值" class="headerlink" title="!important属性值"></a>!important属性值</h2><ul>
<li>属性提升权重</li>
</ul>
<h2 id="z-index属性值"><a href="#z-index属性值" class="headerlink" title="z-index属性值"></a>z-index属性值</h2><ul>
<li>提升盒子层叠性，前提需要有定位属性</li>
</ul>
<h2 id="linear-image属性值"><a href="#linear-image属性值" class="headerlink" title="linear-image属性值"></a>linear-image属性值</h2><p>background-image属性可以使用linear-image()创建线性渐变</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-image</span>:<span class="built_in">linear-image</span>(to right,blue <span class="number">20%</span>,red)</span><br></pre></td></tr></table></figure>

<ul>
<li>to right表示渐变方向，blue是开始颜色、red是结束颜色</li>
<li>to right也可以写倾斜度数：45deg:45度</li>
<li>颜色可以有多个</li>
<li>颜色后面加百分数表示颜色出现的位置</li>
</ul>
<h2 id="radial-gradient属性值"><a href="#radial-gradient属性值" class="headerlink" title="radial-gradient属性值"></a>radial-gradient属性值</h2><p>background-image属性可以使用radial-gradient()创建渐性渐变</p>
<p>示例</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-image</span>:<span class="built_in">radial-gradient</span>(<span class="number">50%</span> <span class="number">50%</span>,blue,red)</span><br></pre></td></tr></table></figure>

<ul>
<li>50% 50%表示圆心坐标，blue表示内部颜色，red表示外部颜色</li>
</ul>
<h1 id="私有前缀"><a href="#私有前缀" class="headerlink" title="私有前缀"></a>私有前缀</h1><ul>
<li><p>Chrome:   -webkit-</p>
</li>
<li><p>Firefox:      -moz-</p>
</li>
<li><p>IE、Edge:   -ms-</p>
</li>
<li><p>Open: -o-</p>
</li>
</ul>
]]></content>
      <categories>
        <category>文档(更新中)</category>
      </categories>
  </entry>
  <entry>
    <title>CSS3的过渡与动画</title>
    <url>/article/c2010641.html</url>
    <content><![CDATA[<p>本文主要介绍CSS3里面的过渡与动画属性。</p>
<h1 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h1><p>过渡属性使用transition，可以为一个元素在不同样式之间变化自动添加“补间动画”。</p>
<p>主要有四要素：过渡属性，动画总时长，变化速度曲线，延迟时间</p>
<p>兼容到IE10</p>
<p>示例：<code>transition:width 1s linear 0s</code></p>
<p>哪些属性可以被过渡：</p>
<ul>
<li>所有数值类型的属性都可以过渡，英文属性值不可以，比如浮动</li>
<li>背景颜色和文字颜色都可以过渡</li>
<li>所有变形（2D和3D）都可以过渡</li>
</ul>
<p>过渡的四个小属性：</p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">transition-property</td>
<td align="center">哪些属性要过渡</td>
</tr>
<tr>
<td align="center">transition-duration</td>
<td align="center">动画时间</td>
</tr>
<tr>
<td align="center">transition-timing-function</td>
<td align="center">动画变化曲线</td>
</tr>
<tr>
<td align="center">transition-delay</td>
<td align="center">延迟时间</td>
</tr>
</tbody></table>
<p>缓动效果：</p>
<p>linear 是平缓过渡，也就是变化的速度曲线，除了linear 外还有以下几种</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211026125546.png"></p>
<p>除了以上设置方法外，还可以自定义设置过渡速度曲线，即贝塞尔曲线。</p>
<p>通过网站 <a href="https://cubic-bezier.com/">https://cubic-bezier.com</a> 可以生成贝塞尔曲线，示例：<code>transition:width 1s cubic-bezier(.17,.67,.52,.28) 0s</code> </p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      * &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="comment">/* 过渡 width，*/</span></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="css">        <span class="attribute">transition</span>: width <span class="number">1s</span> linear <span class="number">0s</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box1</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">        <span class="attribute">transition</span>: left <span class="number">1s</span> linear <span class="number">0s</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box1</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">left</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">        <span class="attribute">transition</span>: background-color <span class="number">1s</span> linear <span class="number">0s</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box2</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box3</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">        <span class="attribute">border-radius</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">transition</span>: all <span class="number">1s</span> linear <span class="number">0s</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box3</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box4</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="css">        <span class="attribute">transition</span>: transform <span class="number">1s</span> linear <span class="number">0s</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box4</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.2</span>) <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box5</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">perspective</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box5</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: aquamarine;</span></span><br><span class="line"><span class="css">        <span class="attribute">transition</span>: transform <span class="number">1s</span> linear <span class="number">0s</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box5</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">360deg</span>) <span class="built_in">rotateY</span>(<span class="number">360deg</span>);</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box5&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="一些案例"><a href="#一些案例" class="headerlink" title="一些案例"></a>一些案例</h2><p>演示地址: <a href="https://lsfcxz.gitee.io/transit">https://lsfcxz.gitee.io/transit</a></p>
<p>效果图：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211026182945.png"></p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211026214536.png"></p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211027092416.png"></p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211027092451.png"></p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211027092544.png"></p>
<h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><p>动画效果可以理解为过渡的一种延续，过渡动画是需要触发条件才会形成过渡，并且是在一定时间内完成，而动画则可以自动完成，并且也可以设置无限运行。</p>
<p><strong>定义动画：</strong></p>
<p>定义动画使用 <code>@keyframes</code>关键字定义，test为动画的名称，调用动画时候使用，可以理解为就是一个方法名， from是开始状态，to是结束状态。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> test &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">0deg</span>) <span class="built_in">rotateY</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">360deg</span>) <span class="built_in">rotateY</span>(<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>动画定义还可以使用多关键帧，使用百分数。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> test &#123;</span><br><span class="line">  <span class="number">10%</span> &#123;</span><br><span class="line">    backgroud-<span class="attribute">color</span>:red;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    backgroud-<span class="attribute">color</span>:blue;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span>&#123;</span><br><span class="line">   backgroud-<span class="attribute">color</span>:yellow;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用动画:</p>
<p>定义动画使用 <code>animation</code>关键字定义，test是动画名称，3s是总时长，linear是缓动效果，0s是延迟执行时间，第五个是，动画执行次数，如果想永久运行，则使用<code>infinite</code>，如果想让动画偶次数自动逆向执行，则使用<code>animation</code>参数作为第六个参数，如果想让动画停止在最后结束状态，那么则使用<code>forwards</code>参数。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">animation</span>: test <span class="number">3s</span> linear <span class="number">0s</span> infinite;</span><br></pre></td></tr></table></figure>

<h2 id="一些案例-1"><a href="#一些案例-1" class="headerlink" title="一些案例"></a>一些案例</h2><p>演示地址： <a href="https://lsfcxz.gitee.io/transit">https://lsfcxz.gitee.io/transit</a></p>
<p>效果图：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211027120549.png"></p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211027120627.png"></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>过渡与动画</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3的变形属性</title>
    <url>/article/a8e47f07.html</url>
    <content><![CDATA[<p>本文主要介绍CSS3中的变形属性。</p>
<p>CSS3中主要使用<code>tranform</code>属性来进行盒子的变形，变形主要分为2D和3D两大变形</p>
<h1 id="2D变形"><a href="#2D变形" class="headerlink" title="2D变形"></a>2D变形</h1><h2 id="旋转变形"><a href="#旋转变形" class="headerlink" title="旋转变形"></a>旋转变形</h2><p>将<code>tranform</code>属性的属性值设置为rotate(),即可实现旋转变形，单位deg表示为度数，正数表示顺时针方向，负数反之。</p>
<p>示例：<code>tranform:rotate(45deg)</code>,表示顺时针旋转45度</p>
<p>默认旋转是绕着中心点位置旋转，如果绕着的点不是中心位置，那么就使用<code>tranform-origin</code>属性。</p>
<p>示例：<code>tranform-origin:0 0</code>，表示绕着左上角旋转</p>
<h2 id="缩放变形"><a href="#缩放变形" class="headerlink" title="缩放变形"></a>缩放变形</h2><p>将<code>tranform</code>属性的属性值设置为scale(),即可实现缩放变形，括号里面是缩放倍数。</p>
<p>示例：<code>tranform:scale(3)</code>,表示放大3倍</p>
<p>也可以 <code>transform-origin</code>属性表示从哪个点开始放大，默认中心点</p>
<h2 id="斜切变形"><a href="#斜切变形" class="headerlink" title="斜切变形"></a>斜切变形</h2><p>将<code>tranform</code>属性的属性值设置为skew(),即可实现斜切变形，括号里面是两个数值，一个x斜切度，一个y斜切度,单位deg</p>
<p>示例：<code>tranform:skew(10deg,20deg)</code>,</p>
<h2 id="位移变形"><a href="#位移变形" class="headerlink" title="位移变形"></a>位移变形</h2><p>将<code>tranform</code>属性的属性值设置为translate(),即可实现位移变形，括号里面是两个数值，向右，向下两个方向,单位px。</p>
<p>和相对定位差不多，不会放弃自己原来的位置，兼容到IE9</p>
<p>示例:<code>transform:translate(100px,200px)</code></p>
<h1 id="3D变形"><a href="#3D变形" class="headerlink" title="3D变形"></a>3D变形</h1><h2 id="3D旋转"><a href="#3D旋转" class="headerlink" title="3D旋转"></a>3D旋转</h2><p>将<code>transform</code>属性的属性值设置为<code>rotateX()</code>或者<code>rotateY()</code>,即可实现3D旋转。</p>
<p><code>rotateX()</code>是绕横轴旋转，<code>rotateY()</code>是绕纵轴旋转，括号里面是度数,单位deg。</p>
<p>perspective属性用来定义透视强度，可以理解为人眼到舞台的距离，单位是px，直白点说，设置3D旋转的父盒子必须设置perspective属性。</p>
<p>3D旋转可以X，Y同时旋转，示例:<code>transform: rotateY(45deg) rotateX(45deg);</code></p>
<h2 id="空间移动"><a href="#空间移动" class="headerlink" title="空间移动"></a>空间移动</h2><p>将<code>transform</code>属性的属性值设置为<code>rotateX()</code>或者<code>rotateY()</code>后成为3D旋转后可继续添加translateX、translateY或者translateZ实现空间移动，换句话说，想实现空间移动，必须3旋转后才可以，空间移动单位为px。</p>
<p>示例：<code>transform: rotateY(128deg) rotateX(52deg) translateY(50px) translateZ(50px);</code></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>代码示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      * &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="comment">/* 透视强度 */</span></span></span><br><span class="line"><span class="css">      <span class="selector-class">.per</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">perspective</span>: <span class="number">179px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="comment">/* 旋转 */</span></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box1</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="comment">/* 缩放 */</span></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box2</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">2</span>);</span></span><br><span class="line"><span class="css">        <span class="comment">/* 中心点 */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* transform-origin: 0 0; */</span></span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="comment">/* 斜切 */</span></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box3</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box3</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">10deg</span>, <span class="number">20deg</span>);</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="comment">/* 位移 */</span></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box4</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box4</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100px</span>, <span class="number">200px</span>);</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="comment">/* 3D旋转 */</span></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box5</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">45deg</span>) <span class="built_in">rotateX</span>(<span class="number">45deg</span>);</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="comment">/* 空间移动 */</span></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box6</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">128deg</span>) <span class="built_in">rotateX</span>(<span class="number">52deg</span>) <span class="built_in">translateY</span>(<span class="number">50px</span>)</span></span><br><span class="line"><span class="css">          <span class="built_in">translateZ</span>(<span class="number">50px</span>);</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1 box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2 box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3 box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box4 box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;per&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box5 box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;per&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box6 box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS3层叠性、继承性、优先级</title>
    <url>/article/96691857.html</url>
    <content><![CDATA[<p>在CSS3中如果同时多个选择器都在描述同一个元素，那么CSS3会把一层一层的样式刷上去，这就是他的层叠性，但是，如果多个选择器都在描述这个元素的同个属性，CSS3会采取权重计算后采用那个样式，如果属性是具有继承性，则优先采用就近原则，当一样近的时候，才选择权重计算。这些计算只能是在同一个引用方式生效，否则，行内式是最高权重，然后才是内嵌，最后是外链。</p>
<h1 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h1><p>首先CSS全称叫CascadingStyleSheets，中文名为层叠性样式表，CSS根据选择器，属性，属性值为HTML标签刷上一层一层样式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">color</span>: aqua;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.spec</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">text-decoration</span>: underline;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#paragraph</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">font-size</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;spec&quot;</span> <span class="attr">id</span>=<span class="string">&quot;paragraph&quot;</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最终效果：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211001202944.png"></p>
<p>可以看到，每个选择器的样式都是一层一层刷上去的，但是如果每个选择器都在描述同一个属性呢，这需要后面的优先级，权重计算来衡量。</p>
<h1 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h1><p>CSS的优先级可以分为文件的引入方式和选择器的优先级</p>
<p>文件的引入方式，优先级又高到低：</p>
<ul>
<li>行内样式&gt;内嵌式&gt;链接式&gt;@import导入式</li>
</ul>
<p>选择器优先级：</p>
<ul>
<li>!important&gt;ID&gt;Class&gt;属性选择器&gt;伪类选择器&gt;伪元素选择器&gt;标签选择器&gt;通配选择器</li>
</ul>
<h1 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h1><p>color、font-开头、list-开头、text-开头、line-开头都具有继承性，继承性是祖先元素设置后，后代元素生效</p>
<p>需要注意的是：继承属性是优先采用就近原则，即描述该元素的远近，后采用优先级，最后再采用书写的远近。</p>
<p>以下文字就是blue，p的优先级是小于类的，但是具有继承性的是优先考虑就近原则</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以下文字是yellow，一样近，采用优先级</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">     <span class="selector-class">.p</span> &#123;</span></span><br><span class="line"><span class="css">       <span class="attribute">color</span>: yellow;</span></span><br><span class="line"><span class="css">     &#125;</span></span><br><span class="line"><span class="css">     <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">       <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="css">     &#125;</span></span><br><span class="line"><span class="css">     <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">       <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">     &#125;</span></span><br><span class="line"><span class="css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p&quot;</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以下文字是green，后写覆盖先写</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.p</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: yellow;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.p</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p&quot;</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="两个属性"><a href="#两个属性" class="headerlink" title="两个属性"></a>两个属性</h1><h2 id="important"><a href="#important" class="headerlink" title="!important"></a>!important</h2><p>!important是提升属性的权重，它影响的是该属性中的权重值，写在属性值后面，该属性的权重为最大</p>
<h2 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h2><p>z-index是影响层叠性，需要注意的是两个元素是<strong>需要设置定位属性</strong>才可以生效！</p>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><ul>
<li>下面p段落的文字是什么颜色？</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">     <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">       <span class="attribute">color</span>: aqua;</span></span><br><span class="line"><span class="css">     &#125;</span></span><br><span class="line"><span class="css">     <span class="selector-class">.box</span> <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="css">       <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">     &#125;</span></span><br><span class="line"><span class="css">     <span class="selector-id">#box2</span> &#123;</span></span><br><span class="line"><span class="css">       <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="css">     &#125;</span></span><br><span class="line"><span class="css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: yellow&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>正确答案是：aqua颜色</p>
<p>小结：</p>
<ul>
<li>首先color是继承属性，所以优先采用就近原则</li>
<li>就近原则在于描述的是否接近，如果一样近，权重又是一样，就看书写的远近。</li>
</ul>
<hr>
<ul>
<li>下面代码中会出现什么颜色？</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#box2</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.box3</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>正确答案：aqua</p>
<p>小结：</p>
<ul>
<li>background-color属性没有继承性，优先使用权重</li>
</ul>
<hr>
<ul>
<li>下面p段落的文字是什么颜色？</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">       <span class="selector-id">#box2</span> <span class="selector-class">.box3</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-id">#box4</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span> <span class="attr">id</span>=<span class="string">&quot;box4&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>正确答案：red</p>
<p>小结：</p>
<ul>
<li>color属性具有继承性，所以使用就近原则</li>
<li>两个选择器一样远近，使用权重计算</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS3选择器</title>
    <url>/article/1f818b1f.html</url>
    <content><![CDATA[<p>作为HTML和CSS的桥梁，CSS3拥有众多的选择器，本文主要介绍CSS的各种选择器。</p>
<p>先来看下选择器的思维导图。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211018100122.png"></p>
<h1 id="CSS2-1选择器"><a href="#CSS2-1选择器" class="headerlink" title="CSS2.1选择器"></a>CSS2.1选择器</h1><h2 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h2><p>标签选择器也称着元素选择器，就是选择HTML标签，这个标签不管嵌套多深，选择页面上所有该标签，由于覆盖面广，适合标签的初始化。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="comment">/*去除小圆点 */</span></span><br><span class="line">    <span class="attribute">list-style</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="comment">/* 去除下划线 */</span></span><br><span class="line">    <span class="attribute">text-decoration</span>:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h2><p>ID选择器原则上在页面只能存在一个名称，不能重名，虽然样式不会报错，但是在执行JavaScript脚本时则会报错。</p>
<p>命名规则：字母、数字、下划线、短横构成，<strong>不能数字开头</strong>，区分大小写。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#para1</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:red</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2><p>class命名规范与ID相同，class可以相同页面多个相同类目，同一个标签可以多个类</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;warning spec&quot;</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.warning</span> &#123;</span></span><br><span class="line"><span class="css">   <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css"> &#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.spec</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">font-style</span>: italic;</span></span><br><span class="line"><span class="css"> &#125;</span></span><br><span class="line"><span class="css"> </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h2><h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><p>选择该标签内部后代的选择器，使用<strong>空格隔开</strong>，下面的例子,选择了box类目里面所有类名为spec的标签，不管这标签嵌套多深，都会被选中。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> <span class="selector-class">.spec</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h3><p>选择即是什么又是什么的标签，只有两个标签符合了才会被选中。中间<strong>没有空格</strong>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-class">.spec</span>&#123;</span><br><span class="line">     <span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h3><p>选择所有该标签，<strong>逗号隔开</strong>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h2><p>伪类是添加到选择器的描述性词语，指定要选择的元素的特殊状态。超级链接就拥有4个特殊的状态。</p>
<table>
<thead>
<tr>
<th align="center">伪类</th>
<th align="center">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">a:link</td>
<td align="center">没有被访问的链接</td>
</tr>
<tr>
<td align="center">a:visited</td>
<td align="center">已经被访问的链接</td>
</tr>
<tr>
<td align="center">a:hover</td>
<td align="center">鼠标悬停的链接</td>
</tr>
<tr>
<td align="center">a:active</td>
<td align="center">正在被激活的链接</td>
</tr>
</tbody></table>
<blockquote>
<p>TIP:a标签的伪类一定要按顺序书写样式，否则伪类失效。</p>
</blockquote>
<h1 id="CSS3选择器"><a href="#CSS3选择器" class="headerlink" title="CSS3选择器"></a>CSS3选择器</h1><h2 id="元素关系选择器"><a href="#元素关系选择器" class="headerlink" title="元素关系选择器"></a>元素关系选择器</h2><h3 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h3><p>当<strong>使用&gt;符号分隔</strong>两个元素时，它只会匹配那些作为<strong>第一个元素</strong>的直接后代元素，即两个标签为父子关系。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&gt;<span class="selector-tag">p</span>&#123;</span><br><span class="line">   <span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a>相邻兄弟选择器</h3><p>相邻兄弟选择器，使用+符号连接两个选择器，有三个特点：同一父元素下的子元素，第一元素和第二元素是紧跟着的，他们是同级别的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span> + <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">color</span>: aqua;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>BOX的P标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 选中 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>Span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>BOX的P标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 选中 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>Span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>BOX的P标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 选中 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>Span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="通用兄弟选择器"><a href="#通用兄弟选择器" class="headerlink" title="通用兄弟选择器"></a>通用兄弟选择器</h3><p>通用选择器使用<del>符号，a</del>b选择a元素<strong>之后</strong>所有<strong>同层级</strong>b元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">     <span class="selector-tag">h3</span> ~ <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="css">       <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">     &#125;</span></span><br><span class="line"><span class="css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h3</span>&gt;</span>H3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 这两个会选中 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">span</span>&gt;</span>Span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">span</span>&gt;</span>Span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 选中 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">span</span>&gt;</span>Span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span>&gt;</span>Span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span>&gt;</span>Span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211001100734.png"></p>
<h2 id="序号选择器"><a href="#序号选择器" class="headerlink" title="序号选择器"></a>序号选择器</h2><p>选择该元素后面的第几个元素。</p>
<table>
<thead>
<tr>
<th align="center">举例</th>
<th align="center">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">:first-child</td>
<td align="center">第一个子元素</td>
</tr>
<tr>
<td align="center">:last-child</td>
<td align="center">最后一个子元素</td>
</tr>
<tr>
<td align="center">:nth-child(n)</td>
<td align="center">第n个子元素</td>
</tr>
<tr>
<td align="center">:nth-of-type(n)</td>
<td align="center">第n个某类型子元素</td>
</tr>
<tr>
<td align="center">:nth-last-child(n)</td>
<td align="center">倒数第n个子元素</td>
</tr>
<tr>
<td align="center">:nth-last-of-type(n)</td>
<td align="center">倒数第n个某类型子元素</td>
</tr>
</tbody></table>
<h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><table>
<thead>
<tr>
<th align="center">举例</th>
<th align="center">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">img[alt]</td>
<td align="center">选择有alt属性的img标签</td>
</tr>
<tr>
<td align="center">img[alt=”故宫”]</td>
<td align="center">选择有alt属性是故宫的img标签</td>
</tr>
<tr>
<td align="center">img[alt^=”北京”]</td>
<td align="center">选择有alt属性以北京<strong>开头</strong>的img标签</td>
</tr>
<tr>
<td align="center">img[alt$=”夜景”]</td>
<td align="center">选择有alt属性以夜景<strong>结尾</strong>的img标签</td>
</tr>
<tr>
<td align="center">img[alt*=”美”]</td>
<td align="center">选择有alt属性中<strong>含有</strong>美字样的img标签</td>
</tr>
<tr>
<td align="center">img[alt~=”手机拍摄”]</td>
<td align="center">选择有alt属性中有<strong>空格隔开</strong>的手机拍摄字样的img标签</td>
</tr>
<tr>
<td align="center">img[alt|=”参赛作品”]</td>
<td align="center">选择有alt属性以“参赛作品”<strong>开头</strong>的img标签</td>
</tr>
</tbody></table>
<h2 id="新增伪类选择器"><a href="#新增伪类选择器" class="headerlink" title="新增伪类选择器"></a>新增伪类选择器</h2><p>empty：选择空标签，空格不算空标签 </p>
<p>focus：选择当前获得焦点的表单元素</p>
<p>enabled：选择当前有效的表单元素</p>
<p>disabled：选择当前无效的表单元素</p>
<p>checked：选择当前已经勾选的单选按钮或者复选框</p>
<p>root：选择根元素，html标签</p>
<h2 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h2><ul>
<li><p><code>::before</code>：创建一个伪元素，其将成为匹配选中的元素的第一个子元素，必须设置content属性表示其中的内容</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line"><span class="attribute">content</span>:<span class="string">&#x27;★&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>::after</code>：创建一个伪元素，其将成为匹配选中的元素的最后一个子元素，必须设置content属性表示其中的内容</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line"><span class="attribute">content</span>:<span class="string">&#x27;★&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>::selection</code>：文档被用户高亮的部分，使用鼠标圈选部分</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">::selection</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:red</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>::first-letter</code>：文档第一行第一个字(必须是块级元素)</p>
</li>
<li><p><code>::first-line</code>：文档第一行字(必须是块级元素)</p>
</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS圆角和边框、盒阴影</title>
    <url>/article/a00aca70.html</url>
    <content><![CDATA[<p>本文主要介绍CSS的边框属性，圆角和盒子阴影。</p>
<h1 id="边框（border）"><a href="#边框（border）" class="headerlink" title="边框（border）"></a>边框（border）</h1><p>盒子的边框有三个属性值，边框有16个小属性，其中4个是边框的上下左右，12个上下左右加属性值的属性，边框小属性主要用来层叠大属性。</p>
<p>边框三要素：</p>
<ul>
<li><p>线宽度：单位px</p>
</li>
<li><p>线型：</p>
<p>（1）none (没有边框，无论边框宽度设为多大)<br>（2）dotted (点线式边框)<br>（3）dashed (破折线式边框)<br>（4）solid (直线式边框)<br>（5）double (双线式边框)<br>（6）groove (槽线式边框)<br>（7）ridge(脊线式边框)<br>（8）inset (内嵌效果的边框)<br>（9）outset (突起效果的边框)</p>
</li>
<li><p>颜色：英文、十六进制、rgb()、rgba()等表示法</p>
</li>
</ul>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border</span>:<span class="number">1px</span> solid red;</span><br></pre></td></tr></table></figure>

<p>边框的4个方向属性：</p>
<ul>
<li> border-top：上边框</li>
<li>bottom-right:右边框</li>
<li>border-bottom：下边框</li>
<li>border-left：左边框</li>
</ul>
<p>边框12个小属性：</p>
<ul>
<li>border-top-width</li>
<li>border-top-style</li>
<li>border-top-color</li>
<li>bottom-right-width</li>
<li>bottom-right-style</li>
<li>bottom-right-color</li>
<li>border-bottom-width</li>
<li>border-bottom-style</li>
<li>border-bottom-color</li>
<li>border-left-width</li>
<li>border-left-style</li>
<li>border-left-color</li>
</ul>
<h1 id="圆角-border-radius"><a href="#圆角-border-radius" class="headerlink" title="圆角(border-radius)"></a>圆角(border-radius)</h1><p>边框圆角单位可以是百分比也可以是px单位，分别有4个小属性：</p>
<ul>
<li>border-top-left-radius:</li>
<li>border-top-right-radius</li>
<li>border-bottom-right-radius</li>
<li>border-bottom-left-radius</li>
</ul>
<h1 id="盒阴影-box-shadow"><a href="#盒阴影-box-shadow" class="headerlink" title="盒阴影(box-shadow)"></a>盒阴影(box-shadow)</h1><p>五元素：</p>
<p>x偏移、y偏移、(阴影延展)、模糊量、颜色</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>:<span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span> <span class="number">50px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, .<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>x偏移，正式往左边走，负数右边</li>
<li>y偏移，正式往下边走，负数上边</li>
<li>阴影延展：往4个方向扩展</li>
<li>模糊量：模糊程度</li>
<li>颜色：英文、十六进制、rgb()、rgba()等表示法</li>
</ul>
<p>盒子还可以设置内部阴影：inset</p>
<p>也可以设置多个阴影重复，使用逗号隔开</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS实现正方体</title>
    <url>/article/6ad90280.html</url>
    <content><![CDATA[<p>本文主要使用CSS实现一个正方体。</p>
<p>直接看代码。</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="Untitled" src="https://codepen.io/lsfcxz/embed/ZEJKPjr?default-tab=html%2Cresult&editable=true&theme-id=light" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/lsfcxz/pen/ZEJKPjr">
  Untitled</a> by LSFCXZ (<a href="https://codepen.io/lsfcxz">@lsfcxz</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>正方体<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      * &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">        <span class="attribute">perspective</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">234</span>, <span class="number">0.295</span>);</span></span><br><span class="line"><span class="css">        <span class="comment">/* 前面 */</span></span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">145</span>, <span class="number">0</span>, <span class="number">0.336</span>);</span></span><br><span class="line"><span class="css">        <span class="comment">/* 顶面 */</span></span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">179</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0.384</span>);</span></span><br><span class="line"><span class="css">        <span class="comment">/* 背面 */</span></span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">180deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">26</span>, <span class="number">255</span>, <span class="number">0.37</span>);</span></span><br><span class="line"><span class="css">        <span class="comment">/* 底面 */</span></span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(-<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>) &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">128</span>, <span class="number">0.485</span>);</span></span><br><span class="line"><span class="css">        <span class="comment">/* 侧面 */</span></span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">6</span>) &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">106</span>, <span class="number">0.39</span>);</span></span><br><span class="line"><span class="css">        <span class="comment">/* 侧面 */</span></span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(-<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211025193759.png"></p>
]]></content>
  </entry>
  <entry>
    <title>CSS盒模型</title>
    <url>/article/94a1bb4e.html</url>
    <content><![CDATA[<p>本文介绍的是CSS的盒模型，CSS的盒模型分为W3C的标准模型和IE的怪异模型。</p>
<p>W3C的盒模型：</p>
<p>内容宽+左右内边距+左右边框 = 盒子<strong>实际</strong>宽度</p>
<p>内容宽+左右内边距+左右边框+左右外边距= 盒子<strong>占用</strong>宽度</p>
<p>高度同理，也就是设置的宽高就是内容可以使用的宽高，其他设置的值都是外扩的</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/2015-10-03-css-27.jpg"></p>
<p>IE的怪异盒模型：</p>
<p>IE盒模型虽然包含W3C的盒模型，但是它内容宽包含了内边距、边框和外边距，也就是说，设置的宽高不一定就是内容可以使用的宽高，它属于内缩的一种。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/2015-10-03-css-30.jpg"></p>
<p>当然我们可以通过以下属性灵活切换模型：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-sizing</span>: border-box;  // 设置为IE模型</span><br><span class="line"> 	<span class="attribute">box-sizing</span>: contetn-box; // 设置为标准模型</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS浮动布局和定位</title>
    <url>/article/29b6ab94.html</url>
    <content><![CDATA[<p>本文章主要介绍CSS的浮动布局和定位属性相关。</p>
<h1 id="浮动布局"><a href="#浮动布局" class="headerlink" title="浮动布局"></a>浮动布局</h1><p><strong>基本概念</strong></p>
<p>浮动最本质的功能就是实现并排，虽然使用<code>display: inline-block;</code>也可以实现并排，不过有间隙。</p>
<p><strong>浮动关键字</strong></p>
<p> <code>float: left</code>：左浮动</p>
<p> `float: right;：右浮动</p>
<p><strong>浮动使用要点</strong></p>
<ul>
<li><p>要浮动都浮动</p>
</li>
<li><p>父盒子有足够宽度，否则盒子会往下掉</p>
</li>
</ul>
<p><strong>浮动贴靠顺序</strong></p>
<ul>
<li>当父盒子空间不够时，浮动盒子会寻找前一个兄弟元素贴靠</li>
</ul>
<p><strong>浮动的特点</strong></p>
<ul>
<li>浮动的盒子无法称起父盒子，会造成高度塌陷</li>
<li>设置成浮动的盒子都可以设置宽高</li>
</ul>
<p><strong>浮动形成的布局</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">header</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.logo</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: palegreen;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.denglu</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: blueviolet;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.miaosu</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">701px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: burlywood;</span></span><br><span class="line"><span class="css">      <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">main</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.conten</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">700px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">aside</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">footer</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;denglu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;miaosu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;conten&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aside</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211006210028.png"></p>
<h1 id="清除浮动影响："><a href="#清除浮动影响：" class="headerlink" title="清除浮动影响："></a>清除浮动影响：</h1><ul>
<li><p>overflow: hidden（不推荐）</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  * &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.box3</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>不推荐理由：</p>
<ul>
<li>overflow: hidden主要是用来溢出隐藏，虽然可以使盒子遵循BFC规范而不造成浮动的影响，但是需要写一个父盒子，给父盒子设置属性</li>
<li>overflow: hidden可以然清除浮动，但是想让它清除外边距垂直塌陷，这需要在父盒子里面写一个子盒子，然后再写外边距，这样才可以清除外边距垂直塌陷的问题，总的说，这种方法很简单，但是如果不小心使用，问题较多</li>
</ul>
<ul>
<li><code>clear:both</code>（不推荐）</li>
</ul>
<p>给后面的父盒子设置，意为清除左右浮动</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    * &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box3</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="css">      <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不推荐理由：</p>
<ul>
<li>margin失效，高度塌陷</li>
</ul>
<ul>
<li>伪元素</li>
</ul>
<p>给父盒子设置伪元素</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  * &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box clearfix&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box clearfix&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>高度没有塌陷，只是给父盒子设置一个伪元素类</li>
</ul>
<ul>
<li>隔墙</li>
</ul>
<p>就是给div之间设置一个有高度的盒子</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    * &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.test</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box3</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h1><h2 id="相对定位（relative）"><a href="#相对定位（relative）" class="headerlink" title="相对定位（relative）"></a>相对定位（relative）</h2><p>相对自身进行定位，会在原来位置占位，适合在微调的场景，不脱离文档流</p>
<h2 id="绝对定位（absolute）"><a href="#绝对定位（absolute）" class="headerlink" title="绝对定位（absolute）"></a>绝对定位（absolute）</h2><p>相对于前一个定位元素进行定位，如果没有，则相对于body进行定位，脱离文档流，对其他元素不会产生干扰，而是进行压盖</p>
<p><strong>横向垂直居中</strong>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123; </span><br><span class="line">   	    <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">margin-top</span>: 负自己高度一半;</span><br><span class="line">        <span class="attribute">margin-left</span>: 负自己宽度一半;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="固定定位（fixed）"><a href="#固定定位（fixed）" class="headerlink" title="固定定位（fixed）"></a>固定定位（fixed）</h2><p>不管页面如何卷动，永远固定在一个位置，相对于视口位置，脱离文档流</p>
<h2 id="粘性定位（sticky）"><a href="#粘性定位（sticky）" class="headerlink" title="粘性定位（sticky）"></a>粘性定位（sticky）</h2><p>可以理解为相对定位和固定定位的结合，位置相对原来位置偏移，浏览器滚动不随着滚动，脱离文档流</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS背景属性</title>
    <url>/article/9f33a331.html</url>
    <content><![CDATA[<p>本文章主要介绍CSS3的背景属性。</p>
<h1 id="背景颜色-background-color"><a href="#背景颜色-background-color" class="headerlink" title="背景颜色(background-color)"></a>背景颜色(background-color)</h1><ul>
<li>padding区域是有背景颜色</li>
<li>支持英文、十六进制、rgb()、rgba()等表示法</li>
</ul>
<h1 id="背景图片（-background-image）"><a href="#背景图片（-background-image）" class="headerlink" title="背景图片（ background-image）"></a>背景图片（ background-image）</h1><ul>
<li>背景图片默认纵轴横轴重复</li>
</ul>
<p><strong>重复模式</strong>：</p>
<p>background-repeat属性可以改变背景图片的重复模式</p>
<table>
<thead>
<tr>
<th align="center">值</th>
<th align="center">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">repeat</td>
<td align="center">x,y均平铺</td>
</tr>
<tr>
<td align="center">repeat-x</td>
<td align="center">x,重复</td>
</tr>
<tr>
<td align="center">repeat-y</td>
<td align="center">y重复</td>
</tr>
<tr>
<td align="center">no-repeat</td>
<td align="center">不重复</td>
</tr>
</tbody></table>
<p><strong>背景图片尺寸</strong>：</p>
<ul>
<li>background-size用来设置图片的尺寸。</li>
<li>contain表示图片尺寸以容纳到盒子里，完整显示，有白边</li>
<li>cover表示将背景图片尺寸以撑满盒子，不完整显示</li>
</ul>
<p><strong>背景裁剪</strong>：</p>
<p>background-clip用来设置裁剪，背景是会覆盖到盒子边框的，使用该属性可以控制盒子背景裁剪到哪个地方</p>
<p><strong>背景定位</strong>：</p>
<p>background-attachment用来设置背景的定位。</p>
<table>
<thead>
<tr>
<th align="center">值</th>
<th align="center">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">fixed</td>
<td align="center">自己滚动条不动，外部滚动条不动</td>
</tr>
<tr>
<td align="center">local</td>
<td align="center">自己滚动条动，外部滚动条动</td>
</tr>
<tr>
<td align="center">scroll</td>
<td align="center">自己滚动条不动，外部滚动条动（默认）</td>
</tr>
</tbody></table>
<p><strong>背景位置</strong>：</p>
<p> background-position用来设置背景图片的起点位置。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-position</span>:<span class="number">100px</span> <span class="number">200px</span>;</span><br></pre></td></tr></table></figure>

<p>设置盒子横轴100px，纵轴200px，还可以使用四个方向的英文进行表示，CSS精灵</p>
<p><strong>线性渐变</strong>：</p>
<p>它是ackground-image的属性值，线型的</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-image</span>:<span class="built_in">linear-gradient</span>(to right, red,blue)</span><br></pre></td></tr></table></figure>

<p>位置也可以是角度，单位deg，也可以使用百分号设置出现的位置</p>
<p><strong>径向渐变</strong>：</p>
<p>radial-gradient属性值</p>
<p>background-image属性可以使用radial-gradient()创建渐性渐变</p>
<p>示例</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-image</span>:<span class="built_in">radial-gradient</span>(<span class="number">50%</span> <span class="number">50%</span>,blue,red)</span><br></pre></td></tr></table></figure>

<ul>
<li>50% 50%表示圆心坐标，blue表示内部颜色，red表示外部颜</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS篇(面试题)</title>
    <url>/article/3b5bdfda.html</url>
    <content><![CDATA[<p>本文主要收集CSS的面试题目。</p>
<h1 id="position的值，relative和absolute分别是相对于谁进行定位的？"><a href="#position的值，relative和absolute分别是相对于谁进行定位的？" class="headerlink" title="position的值，relative和absolute分别是相对于谁进行定位的？"></a>position的值，relative和absolute分别是相对于谁进行定位的？</h1><ul>
<li>absolute: 生成绝对定位的元素， 相对于最近一级的 定位不是<code>static</code>的父元素来进行定位；</li>
<li>fixed:（老IE不支持）生成绝对定位的元素，通常相对于浏览器窗口或<code>frame</code>进行定位；</li>
<li>relative: 生成相对定位的元素，相对于其在普通流中的位置进行定位；</li>
<li>static: 默认值。没有定位，元素出现在正常的流中；</li>
<li>sticky: 生成粘性定位的元素，容器的位置根据正常文档流计算得出</li>
</ul>
<h1 id="display-none和visibility-hidden的区别？"><a href="#display-none和visibility-hidden的区别？" class="headerlink" title="display:none和visibility:hidden的区别？"></a>display:none和visibility:hidden的区别？</h1><ul>
<li>display:none 隐藏对应的元素，在文档布局中不再给它分配空间，它各边的元素会合拢，就当他从来不存在；</li>
<li>visibility:hidden 隐藏对应的元素，但是在文档布局中仍保留原来的空间。</li>
</ul>
<h1 id="CSS中link和-import的区别是？"><a href="#CSS中link和-import的区别是？" class="headerlink" title="CSS中link和@import的区别是？"></a>CSS中link和@import的区别是？</h1><ul>
<li>link属于<code>HTML</code>标签，而<code>@import</code>是CSS提供的；</li>
<li>页面被加载的时，link会同时被加载，而<code>@import</code>被引用的CSS会等到引用它的CSS文件被加载完再加载；</li>
<li>import只在<code>IE5</code>以上才能识别，而link是<code>HTML</code>标签，无兼容问题；</li>
<li>link方式的样式的权重 高于<code>@import</code>的权重。</li>
</ul>
<h1 id="position-absolute和float属性的异同"><a href="#position-absolute和float属性的异同" class="headerlink" title="position:absolute和float属性的异同"></a>position:absolute和float属性的异同</h1><ul>
<li>共同点：对内联元素设置<code>float</code>和<code>absolute</code>属性，可以让元素脱离文档流，并且可以设置其宽高。</li>
<li>不同点：<code>float</code>仍会占据位置，<code>absolute</code>会覆盖文档流中的其他元素。</li>
</ul>
<h1 id="介绍一下box-sizing属性？"><a href="#介绍一下box-sizing属性？" class="headerlink" title="介绍一下box-sizing属性？"></a>介绍一下box-sizing属性？</h1><ul>
<li>box-sizing属性主要用来控制元素的盒模型的解析模式。默认值是<code>content-box</code>；</li>
<li>content-box：让元素维持W3C的标准盒模型。元素的宽度/高度由<code>border + padding + content</code>的<code>宽度/高度</code>决定，设置<code>width/height</code>属性指的是<code>content</code>部分的<code>宽/高</code>；</li>
<li>border-box：让元素维持IE传统盒模型（IE6以下版本和IE6~7的怪异模式）。设置<code>width/height</code>属性指的是<code>border + padding + content</code>。</li>
</ul>
<p><strong>标准浏览器下，按照W3C规范对盒模型解析，一旦修改了元素的边框或内距，就会影响元素的盒子尺寸，就不得不重新计算元素的盒子尺寸，从而影响整个页面的布局。</strong></p>
<h1 id="行内元素有哪些？块级元素有哪些？空元素有哪些？"><a href="#行内元素有哪些？块级元素有哪些？空元素有哪些？" class="headerlink" title="行内元素有哪些？块级元素有哪些？空元素有哪些？"></a>行内元素有哪些？块级元素有哪些？空元素有哪些？</h1><p>首先：CSS规范规定，每个元素都有display属性，确定该元素的类型，每个元素都有默认的display值，如div的display默认值为“block”，则为“块级”元素；span默认display属性值为“inline”，是“行内”元素。</p>
<p>（1）行内元素有：<code>a b span img input select strong（强调的语气）</code> （2）块级元素有：<code>div ul ol li dl dt dd h1 h2 h3 h4…p</code> （3）常见的空元素：<code>&lt;br&gt;&lt;hr&gt; &lt;img&gt; &lt;input&gt; &lt;link&gt; &lt;meta&gt;</code> 鲜为人知的是：<code>&lt;area&gt; &lt;base&gt; &lt;col&gt; &lt;command&gt; &lt;embed&gt; &lt;keygen&gt; &lt;param&gt; &lt;source&gt; &lt;track&gt; &lt;wbr&gt;</code></p>
<h1 id="对BFC规范的理解？"><a href="#对BFC规范的理解？" class="headerlink" title="对BFC规范的理解？"></a>对BFC规范的理解？</h1><p>BFC，块级格式化上下文，一个创建了新的BFC的盒子是独立布局的，盒子里面的子元素的样式不会影响到外面的元素。在同一个<code>BFC</code>中的两个毗邻的块级盒在垂直方向（和布局方向有关系）的<code>margin</code>会发生折叠。 W3C CSS 2.1 规范中的一个概念，它决定了元素如何对其内容进行布局，以及与其他元素的关系和相互作用。</p>
<h1 id="如何清除浮动"><a href="#如何清除浮动" class="headerlink" title="如何清除浮动?"></a>如何清除浮动?</h1><ol>
<li>额外标签<code>clear:both</code></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.fahter</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">1px</span> solid deeppink;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.big</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: darkorange;</span></span><br><span class="line"><span class="css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.small</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: darkmagenta;</span></span><br><span class="line"><span class="css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"> </span></span><br><span class="line"><span class="css">    <span class="selector-class">.clear</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">clear</span>:both;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fahter&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;big&quot;</span>&gt;</span>big<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;small&quot;</span>&gt;</span>small<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clear&quot;</span>&gt;</span>额外标签法<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>利用<code>BFC</code>，<code>overflow-hidden</code></li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.fahter</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid deeppink;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>使用<code>after</code>(推荐)</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.clearfix</span>:after&#123;/*伪元素是行内元素 正常浏览器清除浮动方法*/</span></span><br><span class="line"><span class="css">        content: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">clear</span>:both;</span></span><br><span class="line"><span class="css">        <span class="attribute">visibility</span>: hidden;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.clearfix</span>&#123;</span></span><br><span class="line"><span class="css">        *zoom: <span class="number">1</span>;<span class="comment">/*ie6清除浮动的方式 *号只有IE6-IE7执行，其他浏览器不执行*/</span></span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fahter clearfix&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;big&quot;</span>&gt;</span>big<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;small&quot;</span>&gt;</span>small<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;div class=&quot;clear&quot;&gt;额外标签法&lt;/div&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="常见的行内元素和块级元素都有哪些？"><a href="#常见的行内元素和块级元素都有哪些？" class="headerlink" title="常见的行内元素和块级元素都有哪些？"></a>常见的行内元素和块级元素都有哪些？</h1><ul>
<li>行内元素 <code>inline</code><ul>
<li>不能设置宽高，不能自动换行。</li>
<li>span、input、img、textarea、label、select。</li>
</ul>
</li>
<li>块级元素 block<ul>
<li>可以设置宽高，会自动换行。</li>
<li>p、h1/h2/h3/h4/h5、div、ul、li、table。</li>
</ul>
</li>
<li>inline-block<ul>
<li>可以设置宽高，会自动换行。</li>
</ul>
</li>
</ul>
<h1 id="常见的替换元素和非替换元素？"><a href="#常见的替换元素和非替换元素？" class="headerlink" title="常见的替换元素和非替换元素？"></a>常见的替换元素和非替换元素？</h1><ul>
<li>替换元素<ul>
<li>是指若标签的属性可以改变标签的显示方式就是替换元素，比如<code>input</code>的<code>type</code>属性不同会有不同的展现，<code>img</code>的 <code>src</code> 等。</li>
<li>img、input、iframe。</li>
</ul>
</li>
<li>非替换元素<ul>
<li>div、span、p。</li>
</ul>
</li>
</ul>
<h1 id="什么是-DOM-事件流？什么是事件委托？"><a href="#什么是-DOM-事件流？什么是事件委托？" class="headerlink" title="什么是 DOM 事件流？什么是事件委托？"></a>什么是 DOM 事件流？什么是事件委托？</h1><ul>
<li>DOM 事件流<ul>
<li>分为三个阶段<ul>
<li>捕获阶段</li>
<li>目标阶段</li>
<li>冒泡阶段</li>
</ul>
</li>
<li>在<code>addeventListener()</code>的第三个参数<code>useCapture</code>设为<strong>true</strong>，就会在捕获阶段运行，默认是<strong>false</strong>冒泡。</li>
</ul>
</li>
<li>事件委托<ul>
<li>利用冒泡原理(子向父一层层穿透)，把事件绑定到父元素中，以实现事件委托。</li>
</ul>
</li>
</ul>
<h1 id="什么是FOUC（无样式内容闪烁）？你如何来避免FOUC？"><a href="#什么是FOUC（无样式内容闪烁）？你如何来避免FOUC？" class="headerlink" title="什么是FOUC（无样式内容闪烁）？你如何来避免FOUC？"></a>什么是FOUC（无样式内容闪烁）？你如何来避免FOUC？</h1><p>FOUC - FlashOf Unstyled Content 文档样式闪烁</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;styletype=&quot;text/css&quot;media=&quot;all&quot;&gt;@import&quot;../fouc.css&quot;;<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>而引用CSS文件的@import就是造成这个问题的罪魁祸首。IE会先加载整个HTML文档的DOM，然后再去导入外部的CSS文件，因此，在页面DOM加载完成到CSS导入完成中间会有一段时间页面上的内容是没有样式的，这段时间的长短跟网速，电脑速度都有关系。</p>
]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM的事件传播</title>
    <url>/article/be14c4ce.html</url>
    <content><![CDATA[<p>本文主要介绍DOM的事件传播。</p>
<h1 id="一个问题"><a href="#一个问题" class="headerlink" title="一个问题"></a>一个问题</h1><p>如果一个盒子里面套一个盒子，每个盒子都有点击事件，当我们点击最里面的盒子，事件是怎么开始触发的</p>
<h1 id="事件传播"><a href="#事件传播" class="headerlink" title="事件传播"></a>事件传播</h1><p>事件传播分为捕获阶段和冒泡阶段，即由外到内，再由内到外触发，on开头只能监听冒泡阶段，add开头则可以监听捕获阶段，addEventListener最后的布尔值表示是否监听捕获阶段。</p>
<h1 id="观察"><a href="#观察" class="headerlink" title="观察"></a>观察</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-id">#box</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-id">#box1</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-id">#box2</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> box2 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      box.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;box&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      box1.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;box1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      box2.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;box2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      box.addEventListener(</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;click&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&#x27;box捕获阶段&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">      );</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      box1.addEventListener(</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;click&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&#x27;box1捕获阶段&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">      );</span></span><br><span class="line"><span class="javascript">      box2.addEventListener(</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;click&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&#x27;box2捕获阶段&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">      );</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>需要注意的时，最后一个的元素，冒泡和捕获阶段的根据书写顺序执行，其他就是先捕获再冒泡</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>事件传播</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM的事件对象</title>
    <url>/article/c298f46c.html</url>
    <content><![CDATA[<p>本文主要记录DOM的事件对象，待完成中…</p>
<h1 id="什么时事件对象"><a href="#什么时事件对象" class="headerlink" title="什么时事件对象"></a>什么时事件对象</h1><h1 id="鼠标位置"><a href="#鼠标位置" class="headerlink" title="鼠标位置"></a>鼠标位置</h1><h1 id="键盘字符码"><a href="#键盘字符码" class="headerlink" title="键盘字符码"></a>键盘字符码</h1><h1 id="阻止默认事件"><a href="#阻止默认事件" class="headerlink" title="阻止默认事件"></a>阻止默认事件</h1><h1 id="阻止事件传播"><a href="#阻止事件传播" class="headerlink" title="阻止事件传播"></a>阻止事件传播</h1>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>事件对象</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM的事件监听</title>
    <url>/article/448136fd.html</url>
    <content><![CDATA[<p>本文记录DOM的事件监听</p>
<h1 id="什么是事件监听"><a href="#什么是事件监听" class="headerlink" title="什么是事件监听"></a>什么是事件监听</h1><p>事件就是用户与网页的交互，监听就是对用户的操作做出反应，执行一些程序代码。</p>
<p>最简单的给元素设置事件监听的方法就是设置它们的on XXX属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="comment">//点击元素，做出反应</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="常见鼠标事件"><a href="#常见鼠标事件" class="headerlink" title="常见鼠标事件"></a>常见鼠标事件</h1><table>
<thead>
<tr>
<th align="center">事件名</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">onclick</td>
<td align="center">单击</td>
</tr>
<tr>
<td align="center">ondblcick</td>
<td align="center">双击</td>
</tr>
<tr>
<td align="center">onmousedown</td>
<td align="center">按下</td>
</tr>
<tr>
<td align="center">onmouseup</td>
<td align="center">松开</td>
</tr>
<tr>
<td align="center">onmousemove</td>
<td align="center">划过的时候触发</td>
</tr>
<tr>
<td align="center">onmouseenter</td>
<td align="center">鼠标进入</td>
</tr>
<tr>
<td align="center">onmouseleave</td>
<td align="center">鼠标离开</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">     <span class="selector-class">.btn</span> &#123;</span></span><br><span class="line"><span class="css">       <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">       <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">       <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">       <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">       <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">       <span class="attribute">line-height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">       <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">       <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="css">       <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="css">     &#125;</span></span><br><span class="line"><span class="css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>onclick单击<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;button1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>ondblclick双击<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;button2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>onmousedown按下<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;button3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>onmouseup松开<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;button4&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>onmousemove划过<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;button5&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>onmouseenter鼠标进入<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;button6&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>onmouseleave鼠标离开<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> button = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> button1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> button2 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> button3 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button3&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> button4 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button4&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> button5 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button5&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> button6 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button6&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     button.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       button.innerText = <span class="string">&#x27;我被点击了&#x27;</span>;</span></span><br><span class="line"><span class="javascript">     &#125;;</span></span><br><span class="line"><span class="javascript">     button1.ondblclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       button1.innerText = <span class="string">&#x27;我被双击了&#x27;</span>;</span></span><br><span class="line"><span class="javascript">     &#125;;</span></span><br><span class="line"><span class="javascript">     button2.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       button2.innerText = <span class="string">&#x27;我按下了&#x27;</span>;</span></span><br><span class="line"><span class="javascript">       button2.style = <span class="string">&#x27; background-color: red&#x27;</span>;</span></span><br><span class="line"><span class="javascript">     &#125;;</span></span><br><span class="line"><span class="javascript">     button3.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       button3.innerText = <span class="string">&#x27;鼠标松开&#x27;</span>;</span></span><br><span class="line"><span class="javascript">       button3.style = <span class="string">&#x27; background-color: green&#x27;</span>;</span></span><br><span class="line"><span class="javascript">     &#125;;</span></span><br><span class="line"><span class="javascript">     button4.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       button4.innerText = <span class="string">&#x27;鼠标划过&#x27;</span>;</span></span><br><span class="line"><span class="javascript">       button4.style = <span class="string">&#x27; background-color: green&#x27;</span>;</span></span><br><span class="line"><span class="javascript">     &#125;;</span></span><br><span class="line"><span class="javascript">     button5.onmouseenter = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       button5.innerText = <span class="string">&#x27;鼠标进入&#x27;</span>;</span></span><br><span class="line"><span class="javascript">       button5.style = <span class="string">&#x27; background-color: green&#x27;</span>;</span></span><br><span class="line"><span class="javascript">     &#125;;</span></span><br><span class="line"><span class="javascript">     button6.onmouseleave = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       button6.innerText = <span class="string">&#x27;鼠标离开&#x27;</span>;</span></span><br><span class="line"><span class="javascript">       button6.style = <span class="string">&#x27; background-color: green&#x27;</span>;</span></span><br><span class="line"><span class="javascript">     &#125;;</span></span><br><span class="line"><span class="javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="常见键盘事件"><a href="#常见键盘事件" class="headerlink" title="常见键盘事件"></a>常见键盘事件</h1><table>
<thead>
<tr>
<th align="center">事件名</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">onkeypress</td>
<td align="center">按下，无法识别系统按钮</td>
</tr>
<tr>
<td align="center">onkeydown</td>
<td align="center">按下，系统按钮可以识别，优先onkeypress</td>
</tr>
<tr>
<td align="center">onkeyup</td>
<td align="center">松开</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> input = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    input.onkeyup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(input.value);</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="常见表单事件"><a href="#常见表单事件" class="headerlink" title="常见表单事件"></a>常见表单事件</h1><table>
<thead>
<tr>
<th align="center">事件名</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">onchange</td>
<td align="center">当用户改变域的内容</td>
</tr>
<tr>
<td align="center">onfocus</td>
<td align="center">某元素获得焦点</td>
</tr>
<tr>
<td align="center">onblur</td>
<td align="center">某元素失去焦点</td>
</tr>
<tr>
<td align="center">onsubmit</td>
<td align="center">表单被提交</td>
</tr>
<tr>
<td align="center">onreset</td>
<td align="center">表单被重置</td>
</tr>
<tr>
<td align="center">oninput</td>
<td align="center">输入框输入状态</td>
</tr>
</tbody></table>
<h1 id="常见页面事件"><a href="#常见页面事件" class="headerlink" title="常见页面事件"></a>常见页面事件</h1><table>
<thead>
<tr>
<th align="center">事件名</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">onload</td>
<td align="center">页面加载完成</td>
</tr>
<tr>
<td align="center">onunlad</td>
<td align="center">退出页面</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>事件监听</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM的基础</title>
    <url>/article/6b13fd80.html</url>
    <content><![CDATA[<p>本文主要记录DOM的基础用法，如何增删改查一个DOM元素。</p>
<h1 id="DOM是什么"><a href="#DOM是什么" class="headerlink" title="DOM是什么"></a>DOM是什么</h1><p>DOM（Document Object Model,文档类型对象）</p>
<p>JS想要去操作HTML和CSS代码，就需要使用DOM，它是属于JS的Api，通过调用这些Api就才能去操作页面结构，DOM的思想是把页面的HTML标签当作一个节点，通过获取这些节点进行具体的操作，让页面具有“动态性”</p>
<p>一个DOM树：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211112172437.png"></p>
<h1 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h1><p>检测节点类型，使用nodeType，带☆指比较常见的。</p>
<table>
<thead>
<tr>
<th align="center">nodeType值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">☆  1</td>
<td align="center">元素节点</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">属性节点</td>
</tr>
<tr>
<td align="center">☆  3</td>
<td align="center">文字节点</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">文档中的 CDATA 部分（不会由解析器解析的文本）</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">实体引用</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">实体</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">处理指令</td>
</tr>
<tr>
<td align="center">☆  8</td>
<td align="center">注释节点</td>
</tr>
<tr>
<td align="center">☆  9</td>
<td align="center">doctument节点</td>
</tr>
<tr>
<td align="center">☆ 10</td>
<td align="center">DTD节点</td>
</tr>
<tr>
<td align="center">11</td>
<td align="center">轻量级的 Document 对象，能够容纳文档的某个部分</td>
</tr>
<tr>
<td align="center">12</td>
<td align="center">DTD 中声明的符号</td>
</tr>
</tbody></table>
<h1 id="节点关系"><a href="#节点关系" class="headerlink" title="节点关系"></a>节点关系</h1><p>先看一张图片：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211112174201.png"></p>
<p>父节点要访问子节点可以通过：firstChild调用第一个子节点、lastChild调用最后一个节点、childNodes调用子节点。</p>
<p>子节点想要访问父节点可以通过：parentNode调用父节点</p>
<p>同层级兄弟节点可以通过：nextSibling访问下一个节点，previousSibling访问上一个节点</p>
<p>需要注意的是，<strong>空白文本节点也是节点，使用上面的api会获取空白节点。</strong>通过只考虑元素节点的api就可以排除空白节点的干扰。</p>
<table>
<thead>
<tr>
<th align="center">关系</th>
<th align="center">考虑所有节点</th>
<th align="center">只考虑元素节点(IE9)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">第一个子节点</td>
<td align="center">firstChild</td>
<td align="center">firstElementChild</td>
</tr>
<tr>
<td align="center">最后一个子节点</td>
<td align="center">lastChild</td>
<td align="center">lastElementChild</td>
</tr>
<tr>
<td align="center">子节点</td>
<td align="center">childNodes</td>
<td align="center">children</td>
</tr>
<tr>
<td align="center">父节点</td>
<td align="center">parentNode</td>
<td align="center">同</td>
</tr>
<tr>
<td align="center">前一个兄弟节点</td>
<td align="center">previousSibling</td>
<td align="center">previousElementSibling</td>
</tr>
<tr>
<td align="center">后一个兄弟节点</td>
<td align="center">nextSibling</td>
<td align="center">nextElementSibling</td>
</tr>
</tbody></table>
<h1 id="document对象-获取节点"><a href="#document对象-获取节点" class="headerlink" title="document对象(获取节点)"></a>document对象(获取节点)</h1><p>document对象是本文档的根，几乎所有DOM的功能都封装在这个对象里面</p>
<p>访问元素节点的五个常用方法：</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">功能</th>
<th align="center">兼容性</th>
</tr>
</thead>
<tbody><tr>
<td align="center">getElementById()</td>
<td align="center">通过<strong>id</strong>得到元素</td>
<td align="center">IE6</td>
</tr>
<tr>
<td align="center">getElementsByTagName()</td>
<td align="center">通过<strong>标签</strong>得到<strong>元素数组</strong></td>
<td align="center">IE6</td>
</tr>
<tr>
<td align="center">getElementsByClassName()</td>
<td align="center">通过<strong>类名</strong>得到<strong>元素数组</strong></td>
<td align="center">IE9</td>
</tr>
<tr>
<td align="center">querySelector()</td>
<td align="center">通过<strong>选择器</strong>得到<strong>元素</strong></td>
<td align="center">IE8部分兼容、IE9完全兼容</td>
</tr>
<tr>
<td align="center">querySelectorAll()</td>
<td align="center">通过<strong>选择器</strong>得到<strong>元素数组</strong></td>
<td align="center">IE8部分兼容、IE9完全兼容</td>
</tr>
</tbody></table>
<p>getElementById()：如果页面有两个相同ID，只会获取第一个ID的盒子</p>
<p>getElementsByTagName()：得到的是一个节点数组。某个节点也可以调用getElementsByTagName()，从而得到内部的子节点。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>box段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>box段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>box段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>box段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 得到app里面的p</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> p = app.getElementsByTagName(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(p);</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>querySelector()：通过选择器选中节点，但是如果多个符合条件，只能选中第一个。</p>
<p>querySelectorAll()：通过选择器选中节点,可以选中多个。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      我是段落</span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是Span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      我是段落</span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是Span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#app p span&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app1 = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;#app p span&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(app1[<span class="number">0</span>]);</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h1><blockquote>
<p>注意，下面提到的app都是节点的代号，无其他含义</p>
</blockquote>
<p><strong>获取节点后，肯定是需要对节点相应的操作。对节点的操作有两个属性：innerHTML和innerText</strong></p>
<p>innerHTML：可以插入文字节点和HTML标签</p>
<p>innerText：只能插入纯文字</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    app.innerHTML = <span class="string">&#x27;&lt;h1&gt;Vue is Good&lt;/h1&gt;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    app.innerHTML = <span class="string">&#x27;Vue is Good&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    app.innerText = <span class="string">&#x27;Vue is Good&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    app.innerText = <span class="string">&#x27;&lt;h1&gt;Vue is Good&lt;/h1&gt;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>操作节点改变CSS属性:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/base.css&quot;</span> <span class="attr">id</span>=<span class="string">&quot;css&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">     <span class="selector-id">#app</span> &#123;</span></span><br><span class="line"><span class="css">       <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">       <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">       <span class="comment">/* background-color: aqua; */</span></span></span><br><span class="line"><span class="css">     &#125;</span></span><br><span class="line"><span class="css">     <span class="selector-class">.style2</span> &#123;</span></span><br><span class="line"><span class="css">       <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css">     &#125;</span></span><br><span class="line"><span class="css">     <span class="selector-class">.style3</span> &#123;</span></span><br><span class="line"><span class="css">       <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">     &#125;</span></span><br><span class="line"><span class="css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     <span class="comment">//下面两种效果一样，都属于内联式：通过内联式修改</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">//app.style.backgroundColor = &#x27;red&#x27;;</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">//app.style.cssText = &#x27;background-color:blue&#x27;;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="comment">//更改类名为style2或者style3：通过修改类名来修改样式</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">// app.setAttribute(&#x27;class&#x27;, &#x27;style2&#x27;);</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">// app.className = &#x27;style3&#x27;;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="comment">//通过更改href属性来修改样式</span></span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> css = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;css&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     css.setAttribute(<span class="string">&#x27;href&#x27;</span>, <span class="string">&#x27;css/base1.css&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     <span class="comment">//css.href = &#x27;./css/base1.css&#x27;;</span></span></span><br><span class="line"><span class="javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>主要有三种方法：</p>
<ul>
<li><code>app.style.backgroundColor</code>：直接调用属性，赋值属性值，<code>app.style.cssText</code>则是赋值属性和属性值，两者都是内联式，直接添加到标签里面</li>
<li><code>app.setAttribute(&#39;class&#39;, &#39;style2&#39;)</code>：是通过更改类名，达到修改样式作用，前提是这个类名需要在样式表定义好。<code>app.className = &#39;style3&#39;;</code>也是同样的道理，修改类名。</li>
<li> <code>css.setAttribute(&#39;href&#39;, &#39;css/base1.css&#39;);</code>和<code>css.href = &#39;./css/base1.css&#39;;</code>都是通过修改引入样式表的文件来修改样式。</li>
</ul>
<p>操作节点属性也特别简单，只需要获取节点后，调用属性即可，例如：app.href、app.src等等。</p>
<p><strong>setAttribute和getAttribute</strong></p>
<p>上面使用setAttribute，其实和getAttribute是配对的，我们可以使用setAttribute设置属性，getAttribute获取属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    app.setAttribute(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;10&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(app.getAttribute(<span class="string">&#x27;test&#x27;</span>)); <span class="comment">//10</span></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="节点创建、移动、删除、克隆"><a href="#节点创建、移动、删除、克隆" class="headerlink" title="节点创建、移动、删除、克隆"></a>节点创建、移动、删除、克隆</h1><p><strong>节点创建和挂载</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第一个子节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第二个子节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第三个子节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//获取父节点</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//获取p段落</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> paragraph = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//创建节点</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//节点插入文字</span></span></span><br><span class="line"><span class="javascript">    p.innerText = <span class="string">&#x27;我是段落&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//节点挂载</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//app.appendChild(p);//插入到父节点中最后的子节点</span></span></span><br><span class="line"><span class="javascript">    app.insertBefore(p, paragraph[<span class="number">2</span>]); <span class="comment">//插入到父节点里面的任意位置，需要一个标记，在这个标记的前面</span></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>创建的节点只是创建了标签，要想在页面上显示，就必须把标签挂在到DOM树上，使用appendChild和insertBefore就可以把节点挂载到DOM树上。两个不同在于，insertBefore更加灵活，需要指定一个标记。</p>
<p>用法：</p>
<p>appendChild:   父节点.appendChild(新的子节点)</p>
<p>insertBefore:    父节点.insertBefore(新的子节点,标杆节点)</p>
<p>小案例，动态创建表格：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="css">   <span class="attribute">order</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">   <span class="attribute">width</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">   <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">   <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">   <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;table&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">//获取节点</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> tab = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;table&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">//创建table</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> table = <span class="built_in">document</span>.createElement(<span class="string">&#x27;table&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 挂载</span></span></span><br><span class="line"><span class="javascript">      tab.appendChild(table);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//20列</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> tr = <span class="built_in">document</span>.createElement(<span class="string">&#x27;tr&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        table.appendChild(tr);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">12</span>; j++) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//12行</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> td = <span class="built_in">document</span>.createElement(<span class="string">&#x27;td&#x27;</span>);</span></span><br><span class="line"><span class="javascript">          tr.appendChild(td);</span></span><br><span class="line"><span class="javascript">          td.innerText = j;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>动态创建九九乘法表：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">55px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">      <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> table = <span class="built_in">document</span>.createElement(<span class="string">&#x27;table&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    app.appendChild(table);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//9行</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> tr = <span class="built_in">document</span>.createElement(<span class="string">&#x27;tr&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      table.appendChild(tr);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 第一行输出一列</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> td = <span class="built_in">document</span>.createElement(<span class="string">&#x27;td&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        tr.appendChild(td);</span></span><br><span class="line"><span class="javascript">        td.innerText = j + <span class="string">&#x27;*&#x27;</span> + i + <span class="string">&#x27;=&#x27;</span> + i * j;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>节点的移动：</strong></p>
<p>appendChild和insertBefore不仅可以挂载到DOM树上面，还可以移动节点。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是移动过来的<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>标杆节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>标杆节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>标杆节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//获取原父节点</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//获取新的父节点</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 获取要移动的节点</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> p = app.firstElementChild;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 获取标杆</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> vp = box.children[<span class="number">1</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// box.appendChild(p);//移动到新的父节点里面的最后</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    box.insertBefore(p, vp); <span class="comment">//标杆节点前面</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p><strong>节点的删除：</strong></p>
<p>使用removeChild()方法从DOM中删除一个子节点，子节点不能主动删除自己，必须由父节点删除它</p>
<p>父节点.removeChild(要删除的子节点)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我被删除<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    app.removeChild(app.firstElementChild);</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>节点的克隆：</strong></p>
<p>使用cloneNode()方法可以克隆节点，克隆的节点需要挂载到DOM树，参数是布尔值，默认是false，true代表深克隆，即节点下面的子节点都会一起克隆，反之不会。</p>
<p>var 克隆节点 = 旧节点.clineNode()</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>深克隆<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>标杆节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>标杆节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>标杆节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取标杆</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vp = box.children[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> newnode = app.cloneNode(<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//box.appendChild(newnode);</span></span></span><br><span class="line"><span class="javascript">    box.insertBefore(newnode, vp); <span class="comment">//标杆节点前面</span></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="延迟执行"><a href="#延迟执行" class="headerlink" title="延迟执行"></a>延迟执行</h1><p>可以使用window.onload = function(){}，使页面加载完成后再执行指定代码。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>JS的DOM节点无非就是获取，操作和挂载这几个方向，但是一个页面是非常复杂的，频繁操作DOM也非常消耗性能，这也是为啥现在大都使用MVVM框架。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>DOM</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6的let和const</title>
    <url>/article/fee5585c.html</url>
    <content><![CDATA[<p>本文主要记录ES6中新增的let和const。</p>
<h1 id="let和const简介"><a href="#let和const简介" class="headerlink" title="let和const简介"></a>let和const简介</h1><p>在ES6前定义一个变量只能使用var定义，在ES6中新增了let定义变量，const定义常量，在这里先知道的是，let定义的变量是能被修改，const定义的初值后是不能修改的即可。</p>
<h1 id="let块级作用域："><a href="#let块级作用域：" class="headerlink" title="let块级作用域："></a>let块级作用域：</h1><p>先实现一个案例，我们实现的这个案例是想点击按钮0输出0，点击按钮1输出1，点击按钮2输出2。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      * &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.center</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">310px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.center</span> <span class="selector-class">.btn</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.btn&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> info = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;info&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">        btns[i].addEventListener(</span></span><br><span class="line"><span class="javascript">          <span class="string">&#x27;click&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            info.innerText = i;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(i);</span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">          <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">        );</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>以上代码中每次点击的话输出其实都是3，为什么？首先我们明白两点，for里面的i是全局变量，函数只有调用才执行，弄清楚这两点后，我们思路已经很清晰了，for循环结束后i已经是3，我们点击的时候，函数触发，但是函数里面没有i，那怎么办，往外边寻找i，在全局是不是有个i啊，那在这个i是不是就是for循环结束的i，此时就是3。</li>
</ul>
<p>此时的作用域是这样的：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211117203404.png"></p>
<ul>
<li>在ES6前想解决这个问题的办法就是使用闭包，以下是修改代码部分：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.btn&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> info = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;info&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span><br><span class="line">    btns[index].addEventListener(</span><br><span class="line">      <span class="string">&#x27;click&#x27;</span>,</span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        info.innerText = index;</span><br><span class="line">        <span class="built_in">console</span>.log(index);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="literal">false</span></span><br><span class="line">    );</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用立即执行函数，我们这个函数是不是就被执行了，i是不是就被传入，此时我们在去点击，会寻找index，是不是就是刚才传入的那个值，就不会去寻找最外面的i。</li>
<li>此时作用域是这样的：</li>
</ul>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211117203809.png"></p>
<p>在拥有ES6后，可以使用let定义变量，修改var位let即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.btn&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> info = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;info&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span><br><span class="line">  btns[i].addEventListener(</span><br><span class="line">    <span class="string">&#x27;click&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      info.innerText = i;</span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用let定义变量会产生块级作用域。此时的作用域是这样的。</li>
</ul>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211117210949.png"></p>
<p>至此我们知道let是具有块级作用域的！</p>
<h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><p>const声明的常量必须赋初值，赋值后不允许再次修改，基本数据类型是不允许修改，引用数据类型是可以的，但是不是通过直接赋值另外的一个新的引用数据类型，如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line">a = <span class="number">1</span><span class="comment">//报错</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;<span class="comment">//报错</span></span><br><span class="line">obj.name = <span class="string">&#x27;李四&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.name)</span><br></pre></td></tr></table></figure>

<p>可以得出const不能修改的是指向内存的地址，而内存地址的值是可以修改的。</p>
<h1 id="重复声明"><a href="#重复声明" class="headerlink" title="重复声明"></a>重复声明</h1><p>let和const是不能重复声明的。比如以下代码是不允许的！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>以下也是不允许的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">fun()</span><br></pre></td></tr></table></figure>

<p>但是如果是不同作用域下，是允许的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">fun()</span><br></pre></td></tr></table></figure>

<h1 id="变量声明提升"><a href="#变量声明提升" class="headerlink" title="变量声明提升"></a>变量声明提升</h1><p>let和const是不存在变量声明提升的。下面代码是错误的。</p>
<p>其实就是让我们养成习惯：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h1 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h1><p>只要作用域存在let、const，它们所声明的变量或者常量就会绑定到这个区域，不再受到外部影响。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">fun()</span><br></pre></td></tr></table></figure>

<ul>
<li>如果仅用刚才的知识，let是不会被提升，所以fun没有let变量，那么js会去往外部找，那这里问题就来了，我们运行程序是报错的，原因就是暂时性死区，再输出语句后面有一个let，它会绑定当前作用域，导致不会往外面找这个变量，从而直接报错。</li>
</ul>
<h1 id="window对象的属性和方法"><a href="#window对象的属性和方法" class="headerlink" title="window对象的属性和方法"></a>window对象的属性和方法</h1><p>使用var定义的变量或者声明的函数，都成为window对象的属性，而let和const不会</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">11</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">50</span></span><br><span class="line"><span class="keyword">const</span> add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">window</span>.a<span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">window</span>.b<span class="comment">//50</span></span><br><span class="line"><span class="built_in">window</span>.add<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>

<h1 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h1><p>let、const是存在块级作用域的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> a = <span class="number">0</span>;a&lt;<span class="number">3</span>;a++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//报错，没有定义</span></span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>不存在作用域提升</li>
<li>存在块级作用域</li>
<li>存在暂时性死区</li>
<li>在<strong>同一作用域下</strong>不能重复声明</li>
<li>不能被全局window访问。</li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6的模板字符</title>
    <url>/article/bcee68e2.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>FlyBlog开源项目(一)</title>
    <url>/article/1301b218.html</url>
    <content><![CDATA[<p>本系列文章主要记录开源项目FlyBlog的开发过程以及遇到的问题。</p>
<p>在第一篇文章主要整理一下全局的思路与所使用的技术栈</p>
<h1 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h1><p>FlyBlog的模板样式都是基于LayUI的Fly社区去完成，使用Vue2.X实现逻辑交互，接口对接等，后端则使用Koa作为Web框架，数据库使用mongoDB和Redis。</p>
<h1 id="完成的模块"><a href="#完成的模块" class="headerlink" title="完成的模块"></a>完成的模块</h1><p>登录、注册、密码找回</p>
<ul>
<li>登录这块主要是前端去做做一层校验后，在往服务器去校验密码，成功返回用户信息和一个Token，失败返回一个状态码。</li>
<li>注册也同样做了表单校验，注册时把用户信息上传到服务器，成功返回状态码，并且延迟2s导航到登录页面，如果遇到同名的，那么返回状态码，并且提示</li>
<li>密码找回时通过发送验证码到邮箱，邮箱去点击该连接重置密码，连接后面是一个具有时效性的Token，用户只需要填写新密码就可以更改成功</li>
</ul>
<p>签到：</p>
<p>签到规则是连续签到的天数越多，得到积分就越多，实现主要在后端，每次登录后会往前端发送用户信息的时候携带今天有没有签到，如果签到了，那么签到的按钮为disbale，如果没有签到，那么签到按钮为可以点击的状态，当用户去点击签到后，后端会去对比该用户昨天有没有签到，那么给5积分，签到天数值为1，如果用户昨天签到了，那么给10积分，，签到天数值为+1，中断签到时一个道理，只是去查询昨天有没有签到，有就+1操作，没有就值为1</p>
<p>发表文章：</p>
<p>用户发表文章后会附带非常多的关系，比如评论信息、点赞信息、收藏信息，这如果在用户自己删除文章时，应该要去删除的数据，否则会引起错乱</p>
<p>评论、点赞、收藏、采纳</p>
<p>这一块主要时每个用户的权限看到的内容不一样，比如发帖作者能看到采纳的按钮，但是其他用户是看不到的，这涉及到用户的权限</p>
<p>个人的信息管理：</p>
<p>主要是对用户本身的数据进行CURD，对修改密码等较高级别会去往原来邮箱发送验证码</p>
<h1 id="鉴权"><a href="#鉴权" class="headerlink" title="鉴权"></a>鉴权</h1><p>前端的鉴权是我觉得特别重要的一个知识，大学里最常见的就是校验登录密码就算成功了，但是没有登录鉴权，那么登录功能就如同虚设，因为登录过后，前端发起的请求，后端都不知到谁在发送，而且也无法区分哪些是合法请求，这里采用的鉴权方式是JWT的方案，通过前端发起登录请求，后端返回一个认证Token，前端登录过后每次携带Token去请求数据，这就让后端知道谁在发送请求，用户有没有操作的权限。除了这一点，前端还要做一点就是导航守卫，有些页面在没有登录时不能去访问到的，这个时候就应该使用导航守卫，导航至登录页面</p>
<h1 id="前端数据缓存"><a href="#前端数据缓存" class="headerlink" title="前端数据缓存"></a>前端数据缓存</h1><p>后端返回来的数据除了放在VueX里面，还需要放在前端的数据缓存中，然后再从缓存信息存到Vuex中，不然就会出现刷新后状态量的丢失。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>目前先写到这里，后期慢慢开发并写下开发记录。</p>
]]></content>
      <categories>
        <category>开源项目</category>
      </categories>
  </entry>
  <entry>
    <title>HTML5的十大新特性</title>
    <url>/article/63b2262b.html</url>
    <content><![CDATA[<p>HTM5是HTML的第五个版本，本文主要介绍HTML5新增的十大特性。</p>
<h1 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h1><p>首先知道，HTML本身实现出来的不在于效果样式，而在于网页本身的语义，HTML5增加了大量语义化标签，虽然效果一样，但是理解起来却十分顺畅。</p>
<table>
<thead>
<tr>
<th align="center">标签</th>
<th align="center">语义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">header</td>
<td align="center">定义了文档的头部区域</td>
</tr>
<tr>
<td align="center">footer</td>
<td align="center">定义了文档的尾部区域</td>
</tr>
<tr>
<td align="center">nav</td>
<td align="center">定义文档的导航</td>
</tr>
<tr>
<td align="center">section</td>
<td align="center">定义文档中的节（文档、区段）</td>
</tr>
<tr>
<td align="center">article</td>
<td align="center">定义页面独立的内容区域(文档核心)</td>
</tr>
<tr>
<td align="center">aside</td>
<td align="center">定义页面的侧边栏内容(非核心，广告)</td>
</tr>
<tr>
<td align="center">details</td>
<td align="center">用于描述文档或文档某个部分的细节</td>
</tr>
<tr>
<td align="center">summary</td>
<td align="center">标签包含 details 元素的标题</td>
</tr>
<tr>
<td align="center">dialog</td>
<td align="center">定义对话框，比如提示框</td>
</tr>
<tr>
<td align="center">main</td>
<td align="center">定义网页核心部分</td>
</tr>
</tbody></table>
<h1 id="增强型表单控件"><a href="#增强型表单控件" class="headerlink" title="增强型表单控件"></a>增强型表单控件</h1><p>HTML5增加了许多表单控件可以供我们选择，当然也新增了表单属性。</p>
<p>新增的表单控件：</p>
<table>
<thead>
<tr>
<th align="center">控件</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">color</td>
<td align="center">主要用于选取颜色</td>
</tr>
<tr>
<td align="center">date</td>
<td align="center">日期</td>
</tr>
<tr>
<td align="center">time</td>
<td align="center">时间</td>
</tr>
<tr>
<td align="center">month</td>
<td align="center">月份</td>
</tr>
<tr>
<td align="center">week</td>
<td align="center">周</td>
</tr>
<tr>
<td align="center">number</td>
<td align="center">数值</td>
</tr>
<tr>
<td align="center">email</td>
<td align="center">包含 e-mail 地址的输入域</td>
</tr>
<tr>
<td align="center">file</td>
<td align="center">上传文件</td>
</tr>
<tr>
<td align="center">range</td>
<td align="center">滑块、拖拽条</td>
</tr>
<tr>
<td align="center">search</td>
<td align="center">搜索框</td>
</tr>
<tr>
<td align="center">url</td>
<td align="center">网址</td>
</tr>
</tbody></table>
<p>新增的智能感应：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  请输入您的乘车工具:</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">list</span>=<span class="string">&quot;buy&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;buy&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>轿车<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>单车<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>拖拉机<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="视频和音频"><a href="#视频和音频" class="headerlink" title="视频和音频"></a>视频和音频</h1><p>在HTML5之前实现网页的视频音频需要使用flash，而现在使用video和audio标签就能插入视频和音频。</p>
<p>video 视频：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;./assace/a.mp4&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">loop</span>&gt;</span>你的浏览器不支持<span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>video标签不支持，将会显示标签内文字</li>
<li>src属性后面是资源文件</li>
<li>controls属性是显示播放控件</li>
<li>autoplay属性是自动播放</li>
<li>loop属性循环播放</li>
<li>video支持的文件格式有mp4、ogv、webm格式</li>
</ul>
<p>audio音频：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;./assace/a.mp3&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">loop</span>&gt;</span>你的浏览器不支持<span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>audio标签支持mp3、ogg格式</li>
<li>属性功能与video 相同</li>
</ul>
<h1 id="Canvas绘图"><a href="#Canvas绘图" class="headerlink" title="Canvas绘图"></a>Canvas绘图</h1><p>Canvas标签只是图形容器，必须使用脚本来绘制图形。由于Canvas有很多知识点，这里简单概括，后面有专门的文章</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;myCanvas&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">&quot;200&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">height</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">&quot;border: 1px solid #c3c3c3&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> c = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;myCanvas&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ctx = c.getContext(<span class="string">&#x27;2d&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    ctx.fillStyle = <span class="string">&#x27;#FF0000&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">150</span>, <span class="number">75</span>);</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>canvas标签默认是没有任何视觉效果的，先给他创建宽和高，一个边框。</p>
<p>使用JavaScript脚本通过ID获取Dom</p>
<p>getContext(“2d”) 对象是内建的 HTML5 对象，拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。</p>
<p>fillStyle 属性可以是CSS颜色，渐变，或图案。fillStyle默认设置是#000000（黑色）。</p>
<p>fillRect(x,y,width,height) 方法定义了矩形当前的填充方式。意思是：在画布上绘制 150x75 的矩形，从左上角开始 (0,0)</p>
<h1 id="SVG绘画"><a href="#SVG绘画" class="headerlink" title="SVG绘画"></a>SVG绘画</h1><p>时用XML绘制的2D图像，可以随时被javascrip操作。</p>
<p>下面时对比：</p>
<table>
<thead>
<tr>
<th>Canvas</th>
<th>SVG</th>
</tr>
</thead>
<tbody><tr>
<td>与分辨率相关(可以理解为位图，图形放大会失真看到一个个像素点)</td>
<td>与分辨率无关(可以理解为矢量，图形放大不会失真)</td>
</tr>
<tr>
<td>不支持事件处理程序</td>
<td>支持事件处理程序</td>
</tr>
<tr>
<td>文字呈现功能比较简单</td>
<td>最适合具有大型渲染区域地应用程序(如Google地图)</td>
</tr>
<tr>
<td>可以将生成的图像保存为.png或.jpg</td>
<td>如果复杂地话渲染速度慢(其实任何使用DOM的东西都会很慢)</td>
</tr>
<tr>
<td>非常适合图形密集性游戏</td>
<td>不适合游戏应用程序</td>
</tr>
</tbody></table>
<h1 id="地理定位"><a href="#地理定位" class="headerlink" title="地理定位"></a>地理定位</h1><p>在HTML5的标准中新增了地理位置这一功能，由JavaScript进行实现，由于国内网络环境，如果使用以下这个例子，大概率是不成功。</p>
<p>而想使用地理信息，就需要用到国内的地图平台，这里设计内容较多，后面文章在详细分析</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="keyword">if</span> (navigator.geolocation) &#123;</span></span><br><span class="line"><span class="javascript">       navigator.geolocation.getCurrentPosition(onSuccess, onError);</span></span><br><span class="line"><span class="javascript">     &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">       alert(<span class="string">&#x27;您的浏览器不支持使用HTML 5来获取地理位置服务&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     &#125;</span></span><br><span class="line"><span class="javascript">     <span class="comment">//定位数据获取成功响应</span></span></span><br><span class="line"><span class="javascript">     <span class="function"><span class="keyword">function</span> <span class="title">onSuccess</span>(<span class="params">position</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>).innerHTML =</span></span><br><span class="line"><span class="javascript">         <span class="string">&#x27;纬度: &#x27;</span> +</span></span><br><span class="line"><span class="javascript">         position.coords.latitude +</span></span><br><span class="line"><span class="javascript">         <span class="string">&#x27;\n&#x27;</span> +</span></span><br><span class="line"><span class="javascript">         <span class="string">&#x27;经度: &#x27;</span> +</span></span><br><span class="line"><span class="javascript">         position.coords.longitude +</span></span><br><span class="line"><span class="javascript">         <span class="string">&#x27;\n&#x27;</span> +</span></span><br><span class="line"><span class="javascript">         <span class="string">&#x27;海拔: &#x27;</span> +</span></span><br><span class="line"><span class="javascript">         position.coords.altitude +</span></span><br><span class="line"><span class="javascript">         <span class="string">&#x27;\n&#x27;</span> +</span></span><br><span class="line"><span class="javascript">         <span class="string">&#x27;水平精度: &#x27;</span> +</span></span><br><span class="line"><span class="javascript">         position.coords.accuracy +</span></span><br><span class="line"><span class="javascript">         <span class="string">&#x27;\n&#x27;</span> +</span></span><br><span class="line"><span class="javascript">         <span class="string">&#x27;垂直精度: &#x27;</span> +</span></span><br><span class="line"><span class="javascript">         position.coords.altitudeAccura;</span></span><br><span class="line"><span class="javascript">     &#125;</span></span><br><span class="line"><span class="javascript">     <span class="comment">//定位数据获取失败响应</span></span></span><br><span class="line"><span class="javascript">     <span class="function"><span class="keyword">function</span> <span class="title">onError</span>(<span class="params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">switch</span> (error.code) &#123;</span></span><br><span class="line"><span class="javascript">         <span class="keyword">case</span> error.PERMISSION_DENIED:</span></span><br><span class="line"><span class="javascript">           alert(<span class="string">&#x27;您拒绝对获取地理位置的请求&#x27;</span>);</span></span><br><span class="line"><span class="javascript">           <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">         <span class="keyword">case</span> error.POSITION_UNAVAILABLE:</span></span><br><span class="line"><span class="javascript">           alert(<span class="string">&#x27;位置信息是不可用的&#x27;</span>);</span></span><br><span class="line"><span class="javascript">           <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">         <span class="keyword">case</span> error.TIMEOUT:</span></span><br><span class="line"><span class="javascript">           alert(<span class="string">&#x27;请求您的地理位置超时&#x27;</span>);</span></span><br><span class="line"><span class="javascript">           <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">         <span class="keyword">case</span> error.UNKNOWN_ERROR:</span></span><br><span class="line"><span class="javascript">           alert(<span class="string">&#x27;未知错误&#x27;</span>);</span></span><br><span class="line"><span class="javascript">           <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">       &#125;</span></span><br><span class="line"><span class="javascript">     &#125;</span></span><br></pre></td></tr></table></figure>



<h1 id="拖放式API"><a href="#拖放式API" class="headerlink" title="拖放式API"></a>拖放式API</h1><p>　拖放是一种常见的特性，即抓取对象以后拖到另一个位置。在 HTML5 中，拖放是标准的一部分，任何元素都能够拖放。</p>
<p>　拖放的过程分为源对象和目标对象。源对象是指你即将拖动元素，而目标对象则是指拖动之后要放置的目标位置。</p>
<h1 id="Web-Worker（多线程）"><a href="#Web-Worker（多线程）" class="headerlink" title="Web Worker（多线程）"></a>Web Worker（多线程）</h1><p>web worker 是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能。你可以继续做任何愿意做的事情：点击、选取内容等等，而此时 web worker 在后台运行。</p>
<h1 id="Web-Storage（数据存储）"><a href="#Web-Storage（数据存储）" class="headerlink" title="Web Storage（数据存储）"></a>Web Storage（数据存储）</h1><p>HTML5新增的数据存储有localstorage和sessionStorage，适合简单数据存储，WebSQL和IndexDB适合一些复杂的数据存储</p>
<h1 id="Web-Socket"><a href="#Web-Socket" class="headerlink" title="Web Socket"></a>Web Socket</h1><p>什么是webSocke？</p>
<ul>
<li>webSocke是网络传输协议，可在单个TCP连接上全双工通讯，位于OSI模型的应用层</li>
</ul>
<ul>
<li>webSocke是长连接的协议，实时的通讯，允许服务端推送消息到客户端，并且这种长连接并不会占用网络资源，这就好比一条流管道一样，不输送东西，当然不会造成资源的 流失。</li>
</ul>
<p>什么是全双功？</p>
<ul>
<li>在用一时刻，c端和S端能同时传输数据</li>
</ul>
<p>webSocke应用场景：</p>
<ul>
<li>大数据可视化，聊天、直播弹幕、游戏等需要实时数据的应用</li>
</ul>
<p>特点：</p>
<ul>
<li>TCP连接，与HTTP协议兼容</li>
<li>双向通信，主动推送</li>
<li>无同源限制，协议标识符是ws（加密wss）</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>HTML5新增许多特性和标准，大多是为适配当今互联网应用 复杂的需求，每个特性背后都有各自的应用场景和知识点。</p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
  </entry>
  <entry>
    <title>HTML5文档</title>
    <url>/article/a73ea136.html</url>
    <content><![CDATA[<p>HTML5是HTML最新的修订版本，2014年10月由万维网联盟（W3C）完成标准制定。本文主要为HTML5的标签以及语义化说明，使用标签+示例+解释的形式。作为平常可以快速浏览的文章。</p>
<h1 id="HTML5骨架"><a href="#HTML5骨架" class="headerlink" title="HTML5骨架"></a>HTML5骨架</h1><p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>DOCTYPE是文档类型声明，声明该网页以哪个HTML版本执行，不同版本有不同声明方式，不写会引发浏览器兼容问题</li>
<li>html是网页根节点，lang属性表示网页的语言描述</li>
<li>head是配置项，主要放一些配置</li>
<li>meta元素可提供有关页面的元信息，比如针对搜索引擎和更新频度的描述和关键词。</li>
<li>chartset属性是描述字符集。</li>
<li>name属性的属性值有KeyWords、Description，分别是关键词和描述，这些都是成为了给搜索引擎看的</li>
<li>name属性的属性值还有viewport，主要用在移动端设计，意思为视口</li>
<li>title是网站tag的标题</li>
<li>body是网页内容</li>
</ul>
<h1 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h1><p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>h3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>h4<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>h5<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>h6<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>标题标签有6个，默认加粗</li>
</ul>
<h1 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h1><p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>p标签表示段落，不能嵌套标题标签和段落标签</li>
</ul>
<h1 id="DIV标签"><a href="#DIV标签" class="headerlink" title="DIV标签"></a>DIV标签</h1><p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>div是一个容器，可以放入任何标签，用来分隔页面。</li>
</ul>
<h1 id="无序标签"><a href="#无序标签" class="headerlink" title="无序标签"></a>无序标签</h1><p>示例:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h3</span>&gt;</span>广东省<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span>&gt;</span>潮州<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span>&gt;</span>清远<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h3</span>&gt;</span>广东省<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span>&gt;</span>潮州<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span>&gt;</span>清远<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>无序标签需要搭配li标签使用,无序标签只能包含li,li能包含任何标签</li>
<li>ul的type属性值有:<code>square</code>(实心方块)、<code>disc</code>（实心圆）、<code>circle</code>（空心圆）</li>
</ul>
<h1 id="有序标签"><a href="#有序标签" class="headerlink" title="有序标签"></a>有序标签</h1><p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>listitem<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>listitem<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>listitem<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>默认是数字排列，type属性值有：a、A、i、I、1</li>
<li>有序列表有start属性，它的属性值只能阿拉伯数字，设置起始值</li>
<li>有序列表有revered属性，没有属性值，倒序，HTML5新增</li>
</ul>
<h1 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h1><p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dt</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dd</span>&gt;</span>我国首都<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dt</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dd</span>&gt;</span>国际金融中心<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>dl是定义列表，dt是数据项，dd是数据定义</li>
</ul>
<h1 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h1><p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/beijing/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片丢失了&quot;</span> <span class="attr">width</span>=<span class="string">&quot;2000&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>图片标签有src属性，用来引用资源文件，alt属性，当图片不存在时显示，width和height属性用来设置宽高</li>
<li>支持bmp、gif、jpeg、png、svg、webp格式</li>
</ul>
<h1 id="超级链接"><a href="#超级链接" class="headerlink" title="超级链接"></a>超级链接</h1><p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">title</span>=<span class="string">&quot;标题&quot;</span> &gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>跳转到网页百度。</li>
<li>在网址后面加入#id，就可以跳转到该网站的id标签处。</li>
<li>href支持相对路径和绝对路径。</li>
<li>title属性，设置悬停文本。</li>
<li>target属性设置链接打开窗口，blank属性表示新窗口打开</li>
</ul>
<h1 id="视频标签"><a href="#视频标签" class="headerlink" title="视频标签"></a>视频标签</h1><p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;./video//flower.mp4&quot;</span> <span class="attr">controls</span> <span class="attr">loop</span> <span class="attr">autoplay</span>&gt;</span>不支持该标签<span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>支持格式：mp4、ogb、avi、webm</li>
<li>controls属性显示控件，loop循环播放，autoplay自动播放</li>
<li>不支持该标签的时候显示标签内部文字</li>
</ul>
<h1 id="音频标签"><a href="#音频标签" class="headerlink" title="音频标签"></a>音频标签</h1><p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;./music/hangpaibgm(mp3).mp3&quot;</span> <span class="attr">controls</span> <span class="attr">loop</span> <span class="attr">autoplay</span>&gt;</span></span><br><span class="line">  不支持该标签</span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>支持格式：mp3、ogg、wav</li>
<li>属性与视频标签一样</li>
</ul>
<h1 id="区块标签"><a href="#区块标签" class="headerlink" title="区块标签"></a>区块标签</h1><p>区块标签与div一样，但是语义不同。</p>
<ul>
<li>section：文档区域，语义比div大</li>
<li>article：文档，文章核心内容</li>
<li>aside：非核心内容，比如广告</li>
<li>nav：导航条</li>
<li>header：页头</li>
<li>main：网页核心</li>
<li>footer：页脚</li>
</ul>
<h1 id="小语义标签"><a href="#小语义标签" class="headerlink" title="小语义标签"></a>小语义标签</h1><ul>
<li>span：行内标签</li>
<li>b：加粗（HTML5废弃）</li>
<li>u：下划线（HTML5废弃）</li>
<li>i：倾斜（HTML5废弃）</li>
<li>strong：特别重要文字（加粗）</li>
<li>em：强调文字（倾斜）</li>
<li>mark：高亮文字</li>
<li>figure代表独立内容，与说明figcaption配合使用</li>
</ul>
<h1 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h1><p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;text&quot;</span>&gt;</span>输入框<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>action属性时提交到后台数据的链接，method时请求的方法</li>
<li>表单控件有disabled、placeholder属性</li>
<li>基础控件有text、password、radio、checkbox、（select、option）、textarea、button、submit、reset</li>
<li>新增控件有datalist、color、date、time、email、range、search、url</li>
</ul>
<h1 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h1><p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>我是表格的标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>第一季度<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>第二季度<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>第三季度<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>第四季度<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>A<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>B<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>C<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>D<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>E<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>F<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>G<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>H<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>I<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>J<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>K<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>L<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>table时表格意思，table row时表格行，table data表格数据</li>
<li>rowspan时合并行，colspan时合并表格列</li>
</ul>
<h1 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h1><p><code>&amp;lt</code>：小于号</p>
<p><code>&amp;gt</code>：大于号</p>
<p><code>&amp;nbsp</code>：空格</p>
<p><code>&amp;copy</code>：版权符号</p>
]]></content>
      <categories>
        <category>文档(更新中)</category>
      </categories>
  </entry>
  <entry>
    <title>JS中new四步走</title>
    <url>/article/52d92bef.html</url>
    <content><![CDATA[<p>本文主要记录new一个函数后发生了什么</p>
<h1 id="关于自己的理解"><a href="#关于自己的理解" class="headerlink" title="关于自己的理解"></a>关于自己的理解</h1><p>在学到这里的时候，网上很多都会说JS去new一个对象，我总觉得不是很准确，new后面跟着的是一个函数，这个函数被new调用就是构造函数，它会默认返回一个对象。在JS中，类是一个类似类的类，换句话说就是类不是真正意义上的类，还是一个函数，包括ES6里面关键字新增的class也是语法糖，本质上就是一个构造函数，而函数是不是构造函数取决于它是不是通过new调用。</p>
<h1 id="new关键字的this指向"><a href="#new关键字的this指向" class="headerlink" title="new关键字的this指向"></a>new关键字的this指向</h1><p>先看一段代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.a = a;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> obj1 = <span class="keyword">new</span> fun(<span class="number">5</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(obj1);</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>这里的this会指向谁呢</li>
</ul>
<p>关于new操作符调用函数的四步走：</p>
<ol>
<li>函数 内自身自动创建空对象</li>
<li>函数上下文会指向这个对象</li>
<li>函数内语句执行</li>
<li>函数会自动返回上下文对象，即使函数没有return语句</li>
</ol>
<p>看完这4个步骤：</p>
<p>首先，函数内会创建一个空对象，就是这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    function fun(a) &#123;</span><br><span class="line">      &#123;&#125;;</span><br><span class="line">      this.a = a;</span><br><span class="line">    &#125;</span><br><span class="line">    var obj1 = new fun(5);</span><br><span class="line">    console.log(obj1);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>第二步，就是this里面指向的是这个对象，即此时this即使刚才的空对象</p>
<p>第三步，执行函数语句，new fun(5)是不是就执行了，this.a = a就相当于参数赋值给了这个对象，此时对象里面的内容就是{a:5}</p>
<p>第四步，返回上下文对象，是不是就是那个创建的空对象，我们使用了obj1去接受它，所以输出obj1就是一个对象，{a:5}。</p>
<h1 id="模拟私有变量"><a href="#模拟私有变量" class="headerlink" title="模拟私有变量"></a>模拟私有变量</h1><p>在<a href="https://www.frontblog.top/article/6341a1da.html">JS闭包</a>这篇文章中实现了模拟私有变量，下面是另外的一种形式的实现。结合闭包、IIFE立即执行函数、构造函数实现。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Fun = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> _a;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Fun</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">a</span>)</span> &#123;</span><br><span class="line">      _a = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">say</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;a是：&#x27;</span> + _a);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Fun;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">var</span> v = <span class="keyword">new</span> Fun(<span class="number">1</span>);</span><br><span class="line">v.say();</span><br></pre></td></tr></table></figure>

<ul>
<li>首先定义了常量const，立即执行了一个函数，这个函数返回了一个类，我们使用new Fun()调用函数，返回的其实是这个类的 示例，就是一个对象，现在这个对象上只有say这个方法。</li>
<li>我们需要知道一个：constructor是构造函数，say是原型上的方法。</li>
<li></li>
</ul>
<p>有个问题：</p>
<ul>
<li>如果我示例化两个对象，后面的会覆盖掉原先的私有变量。不信可以运行下面代码：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Fun = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> _a;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Fun</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">a</span>)</span> &#123;</span><br><span class="line">      _a = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">say</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;a是：&#x27;</span> + _a);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Fun;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">var</span> v = <span class="keyword">new</span> Fun(<span class="number">1</span>);</span><br><span class="line">v.say();<span class="comment">//1</span></span><br><span class="line"><span class="keyword">var</span> vv = <span class="keyword">new</span> Fun(<span class="number">50</span>);</span><br><span class="line">vv.say();<span class="comment">//50</span></span><br><span class="line">v.say();<span class="comment">//50，被覆盖</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
  </entry>
  <entry>
    <title>JS的Date对象和Math对象</title>
    <url>/article/69963f7a.html</url>
    <content><![CDATA[<p>本文主要记录Javascript中的Date对象和Math对象</p>
<h1 id="Date-日期对象"><a href="#Date-日期对象" class="headerlink" title="Date()日期对象"></a>Date()日期对象</h1><p>使用new Date()即可得到当前时间的日期对象，它式object类型值。使用new Date(2021,10,17)即可获得指定日期的对象，注意第二参数表示第二个月，从0开始，11表示12月，也可以使用new Date(‘2021-11-17’)获得指定日期，不过<strong>月份就不是从0开始计算</strong></p>
<p>需要注意的是：<code>new Date(&#39;2020-05-01&#39;);</code>这种写法最好是加0，因为不加虽然不会报错，但是就是没有时区。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//：Wed Nov 17 2021 16:06:24 GMT+0800</span></span><br><span class="line"><span class="keyword">var</span> d1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2020</span>, <span class="number">5</span>, <span class="number">1</span>);<span class="comment">//Mon Jun 01 2020 00:00:00 GMT+0800</span></span><br><span class="line"><span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2020-05-01&#x27;</span>);<span class="comment">//Fri May 01 2020 08:00:00 GMT+0800</span></span><br><span class="line"><span class="built_in">console</span>.log(d);</span><br><span class="line"><span class="built_in">console</span>.log(d1);</span><br><span class="line"><span class="built_in">console</span>.log(d2);</span><br></pre></td></tr></table></figure>

<h1 id="Date-常见方法"><a href="#Date-常见方法" class="headerlink" title="Date()常见方法"></a>Date()常见方法</h1><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">getDate()</td>
<td align="center">得到日期1~31</td>
</tr>
<tr>
<td align="center">getDay()</td>
<td align="center">得到星期0~6</td>
</tr>
<tr>
<td align="center">getMonth()</td>
<td align="center">得到月份0~11</td>
</tr>
<tr>
<td align="center">getFullYear()</td>
<td align="center">得到年份</td>
</tr>
<tr>
<td align="center">getHours()</td>
<td align="center">得到小时数0~23</td>
</tr>
<tr>
<td align="center">getMinutes()</td>
<td align="center">得到分钟数0~59</td>
</tr>
<tr>
<td align="center">getSeconds()</td>
<td align="center">得到秒数0~59</td>
</tr>
</tbody></table>
<h1 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h1><ul>
<li>时间戳表示1970年1月1日零点距离某时刻的毫秒数</li>
<li>通过getTime()方法或者Date.parse()函数可以将日期对象变为时间戳。</li>
<li>通过new Date(时间戳)的写法，可以将时间戳变为日期对象。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="keyword">var</span> timestamp1 = d.getTime();<span class="comment">//毫秒级</span></span><br><span class="line"><span class="keyword">var</span> timestamp2 = <span class="built_in">Date</span>.parse(d);<span class="comment">//秒，后面三位都是000</span></span><br><span class="line"><span class="keyword">var</span> dd = <span class="keyword">new</span> <span class="built_in">Date</span>(timestamp1)</span><br></pre></td></tr></table></figure>

<h1 id="实现倒计时"><a href="#实现倒计时" class="headerlink" title="实现倒计时"></a>实现倒计时</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span>2022年新年倒计时<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> info = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;info&#x27;</span>);</span></span><br><span class="line"><span class="javascript">     <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="comment">// 现在时间</span></span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> nd = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">       <span class="comment">//  目标时间</span></span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> td = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2022</span>, <span class="number">1</span>, <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">       <span class="comment">// 时间差，毫秒级</span></span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> diff = td - nd;</span></span><br><span class="line"><span class="javascript">       <span class="comment">// 换算</span></span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> day = <span class="built_in">parseInt</span>(diff / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>));</span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> hours = <span class="built_in">parseInt</span>((diff % (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>)) / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>));</span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> minutes = <span class="built_in">parseInt</span>((diff % (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>)) / (<span class="number">1000</span> * <span class="number">60</span>));</span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> seconds = <span class="built_in">parseInt</span>(</span></span><br><span class="line"><span class="javascript">         ((diff % (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>)) % (<span class="number">1000</span> * <span class="number">60</span>)) / <span class="number">1000</span></span></span><br><span class="line"><span class="javascript">       );</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">       info.innerText =</span></span><br><span class="line"><span class="javascript">         day + <span class="string">&#x27;天&#x27;</span> + hours + <span class="string">&#x27;小时&#x27;</span> + minutes + <span class="string">&#x27;分&#x27;</span> + seconds + <span class="string">&#x27;秒&#x27;</span>;</span></span><br><span class="line"><span class="javascript">     &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Math-数学对象"><a href="#Math-数学对象" class="headerlink" title="Math()数学对象"></a>Math()数学对象</h1><p>幂计算：Math.pow()、开方：Math.sqrt()</p>
<p>向上取整：Math.ceil()、向下取整：Math.floor()</p>
<p>四舍五入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.round(<span class="number">3.14</span>)<span class="comment">//3</span></span><br><span class="line"><span class="built_in">Math</span>.round(<span class="number">3.44</span>)<span class="comment">//3</span></span><br><span class="line"><span class="built_in">Math</span>.round(<span class="number">3.54</span>)<span class="comment">//4</span></span><br></pre></td></tr></table></figure>

<p>四舍五入到某个小数：</p>
<p>思路就是乘以倍数，再四舍五入，再除以倍数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3.52563</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(a*<span class="number">100</span>)/<span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<p>得到参数列表的最大值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.max(<span class="number">2</span>,<span class="number">36</span>,<span class="number">454</span>,<span class="number">5</span>,<span class="number">12</span>)<span class="comment">//454</span></span><br></pre></td></tr></table></figure>

<p>得到参数最小值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="built_in">Math</span>.min(<span class="number">2</span>,<span class="number">36</span>,<span class="number">454</span>,<span class="number">5</span>,<span class="number">12</span>)<span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<p>得到数组的最大值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">10</span>]</span><br><span class="line"><span class="keyword">var</span> max = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>,arr)</span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">var</span> max1 =  <span class="built_in">Math</span>.max(...arr)</span><br><span class="line"><span class="built_in">console</span>.log(max)<span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<p>apply会把数组的数值打散。上下文指向谁不重要。</p>
<p>这里需要注意数组里面有个join的方法也是打散数值的，不过那是字符串类型，所以会报错NaN。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">225</span>, <span class="number">454512</span>, <span class="number">15221</span>, <span class="number">11</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.join();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(a));<span class="comment">//NaN</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
  </entry>
  <entry>
    <title>JS的this指向</title>
    <url>/article/7be86ae8.html</url>
    <content><![CDATA[<p>本文主要记录JS的this的指针规则。</p>
<h1 id="什么是this指向"><a href="#什么是this指向" class="headerlink" title="什么是this指向"></a>什么是this指向</h1><p>先来看个生活中的例子。</p>
<p>这是非常好的习惯，值得表扬。</p>
<p>看到这句话时，可能不知道这里的这指的什么，如果我们换个说法：学会垃圾分类，这是非常好的习惯，值得表扬。我们就知道这里的这指的时垃圾分类，英文this翻译过来就是这，在JS中，也存在这种情况，this代表这，那它指向的是什么，是全局还是局部，又或者对象本身的的属性。</p>
<h1 id="函数上下文"><a href="#函数上下文" class="headerlink" title="函数上下文"></a>函数上下文</h1><p>函数也可以使用this关键字，表示函数的上下文，函数的this指向谁，是根据调用函数的所处环境来判断的，也就是定义一个函数，this的指针是不明确的，只有在调用时才知道。比如下面的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>，</span><br><span class="line">    <span class="attr">b</span>:<span class="number">2</span>，</span><br><span class="line">    <span class="attr">say</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;a:&#x27;</span>+<span class="built_in">this</span>.a+<span class="string">&#x27;b:&#x27;</span>+<span class="built_in">this</span>.b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.say()<span class="comment">//a:1b:2</span></span><br><span class="line"><span class="keyword">var</span> vsay = obj.say</span><br><span class="line">vsay()<span class="comment">//a:undefinedb:undefined</span></span><br></pre></td></tr></table></figure>

<p>当我们直接调用属性方法并执行的时候，this指向的是对象自己，当我们把方法赋值给变量的时候，this指向的是全局对象window，可以通过打印this观察到，这也就证明函数的 this跟执行时所处环境是有关系的。但是也因为这样，this的指针如果不知道规则，就不知道这个this是什么了。</p>
<h1 id="this规则一"><a href="#this规则一" class="headerlink" title="this规则一"></a>this规则一</h1><p>对象打点调用它的方法函数，则函数的上下文就是这个打点调用。构成对象.方法()形式</p>
<p>例子1：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.a+<span class="built_in">this</span>.b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">66</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">33</span>,</span><br><span class="line">    <span class="attr">fn</span>:fn</span><br><span class="line">&#125;</span><br><span class="line">obj.fn()<span class="comment">//99</span></span><br></pre></td></tr></table></figure>

<ul>
<li>函数的this在定义的时候是不明确的，在obj对象中使用，最后使用<code>obj.fn()</code>执行了函数，此时的this指向的正是obj对象。</li>
</ul>
<p>例子2：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">fn</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.a+<span class="built_in">this</span>.b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="attr">fn</span>:obj1.fn</span><br><span class="line">&#125;</span><br><span class="line">obj2.fn()<span class="comment">//5</span></span><br></pre></td></tr></table></figure>

<ul>
<li>记住一点函数执行的时候才知道this指向谁，这里是obj2在调用，所以this指向的是obj2</li>
</ul>
<p>例子3：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">22</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">a</span>:<span class="number">33</span>,</span><br><span class="line">        <span class="attr">b</span>:<span class="number">44</span>,</span><br><span class="line">        <span class="attr">fn</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.a+<span class="built_in">this</span>.b)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">outher().fn();<span class="comment">//77</span></span><br></pre></td></tr></table></figure>

<ul>
<li>这题目返回的是一个对象，对象打点调用属性方法，this指向的就是这个对象，所以是77</li>
</ul>
<p>例子4：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.a+<span class="built_in">this</span>.b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">c</span>:[&#123;</span><br><span class="line">        <span class="attr">a</span>:<span class="number">3</span></span><br><span class="line">        <span class="attr">b</span>:<span class="number">4</span>,</span><br><span class="line">        <span class="attr">c</span>:fun</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line">obj.c[<span class="number">0</span>].c();<span class="comment">//7</span></span><br></pre></td></tr></table></figure>

<ul>
<li>这里可能会困惑的是this指向哪个对象，是obj还是c数组里里面的对象，其实只要熟悉上面的，<strong>对象打点调用它的方法函数，则函数的上下文就是这个打点调用</strong>，那么此时谁在调用它，显然是c里面的对象，所以输出7</li>
</ul>
<p>这里截取网上一片文章的总结</p>
<blockquote>
<p>情况1：如果一个函数中有this，但是它没有被上一级的对象所调用，那么this指向的就是window，这里需要说明的是在js的严格版中this指向的不是window，但是我们这里不探讨严格版的问题，你想了解可以自行上网查找。</p>
<p>情况2：如果一个函数中有this，这个函数有被上一级的对象所调用，那么this指向的就是上一级的对象。</p>
<p>情况3：如果一个函数中有this，<strong>这个函数中包含多个对象，尽管这个函数是被最外层的对象所调用，this指向的也只是它上一级的对象</strong>                                                                         —-截取至 : <a href="https://www.cnblogs.com/pssp/p/5216085.html">https://www.cnblogs.com/pssp/p/5216085.html</a></p>
</blockquote>
<h1 id="this规则二"><a href="#this规则二" class="headerlink" title="this规则二"></a>this规则二</h1><p>圆括号直接调用函数，则函数的上下文是window对象。函数()</p>
<p>例子1：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">fn</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="built_in">this</span>.a+<span class="built_in">this</span>.b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">var</span> fn = obj1.fn;</span><br><span class="line">fn();<span class="comment">//7</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>obj1.fn</code>赋值给了全局变量，fn这个函数属于直接提取到外面执行，所以指向全局的a和b</li>
</ul>
<p>例子2：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.a+<span class="built_in">this</span>.b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="attr">b</span>:fun(),</span><br><span class="line">    <span class="attr">fun</span>:fun</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> result = obj.fun()</span><br><span class="line"><span class="built_in">console</span>.log(result)<span class="comment">//6</span></span><br></pre></td></tr></table></figure>

<ul>
<li> b:fun()和fun:fun一个是执行后一个是没执行，这是我们重点要关注的，b:fun()执行的时候，fun函数this执行是不是就是全局，全局的a和b是不是就是1和2，相加是不是就是3，所以obj的b属性值就是3，再来看obj.fun()，是执行了fun函数，此时是obj在调用，所以这里的this指向的是obj对象，obj对象的a和b就是3和3，相加就是6。</li>
</ul>
<h1 id="this规则三"><a href="#this规则三" class="headerlink" title="this规则三"></a>this规则三</h1><p>数组（类数组对象）枚举出函数进行 调用，上下文是这个数组（类数组对象），<code>数组[下标]()</code></p>
<p>例子1：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr =  [<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="number">5</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="built_in">this</span>[<span class="number">0</span>])&#125;];</span><br><span class="line">arr[<span class="number">3</span>]()<span class="comment">//A</span></span><br></pre></td></tr></table></figure>

<ul>
<li>这里的this指向的是arr这个数组，如果<code>arr[3]</code>赋值给一个变量，在执行变量，那么this就是全局，适合规则二</li>
</ul>
<p>例子2：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">3</span>]()<span class="comment">//A</span></span><br><span class="line">&#125;</span><br><span class="line">fun(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="number">5</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="built_in">this</span>[<span class="number">0</span>])&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>类数组对象也适合规则三。</li>
</ul>
<h1 id="this规则四"><a href="#this规则四" class="headerlink" title="this规则四"></a>this规则四</h1><p>IIFE中的函数，上下文是window对象。<code>(function()&#123;&#125;)()</code></p>
<p>例子1：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">fun</span>:(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="built_in">this</span>.a;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(a+<span class="built_in">this</span>.a)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">obj.fun();<span class="comment">//3</span></span><br></pre></td></tr></table></figure>

<ul>
<li>首先<code>obj.fun();</code>说明这个返回的是函数，再看fun这个属性，它是一个立即执行函数，返回一个函数，立即执行函数是window， <code>var a = this.a;</code>这一句是全局是变量的a赋值给a，执行函数返回的函数是在最后一行执行，所以这个函数里面的a是指向obj的，所以这里的this.a是2，刚才的a是1，所以相加是3</li>
</ul>
<h1 id="this规则五"><a href="#this规则五" class="headerlink" title="this规则五"></a>this规则五</h1><p>定时器、延时器调用函数，上下文是window对象。格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setInterval(函数,时间)</span><br><span class="line">setTimeout(函数,时间)</span><br></pre></td></tr></table></figure>

<p>例子1：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">fun</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.a+<span class="built_in">this</span>.b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(obj.fun,<span class="number">2000</span>)<span class="comment">//7</span></span><br></pre></td></tr></table></figure>

<ul>
<li>这里的<code>obj.fun</code>会让人觉得是调用obj里面，其实这是错误的想法，这里这是调用，执行setTimeout这个函数</li>
</ul>
<p>改造一下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">fun</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.a + <span class="built_in">this</span>.b); <span class="comment">//3</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(obj.fun, <span class="number">2000</span>); <span class="comment">//7</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">4</span>;</span><br><span class="line">obj.fun();</span><br></pre></td></tr></table></figure>

<ul>
<li>这里会输出3，2秒后输出7，所以说明setTimeout里面的this指向是window。</li>
</ul>
<p>再改造一下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">fun</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.a+<span class="built_in">this</span>.b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    obj.fun()<span class="comment">//3</span></span><br><span class="line">&#125;,<span class="number">2000</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>这里就不是setTimeout在调用，这里是obj在调用，所以this指向的是obj，所以是3</li>
</ul>
<h1 id="this规则六"><a href="#this规则六" class="headerlink" title="this规则六"></a>this规则六</h1><p>事件处理函数的上下文是绑定事件的DOM元素。格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DOM元素.onclick = function()&#123; &#125;</span><br></pre></td></tr></table></figure>

<p>例子1：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#box</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#box1</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#box2</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> box2 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box2&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    box.onclick = fun;</span></span><br><span class="line"><span class="javascript">    box1.onclick = fun;</span></span><br><span class="line"><span class="javascript">    box2.onclick = fun;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> that = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        that.style.backgroundColor = <span class="string">&#x27;red&#x27;</span>;</span></span><br><span class="line"><span class="javascript">      &#125;, <span class="number">2000</span>);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>这里使用  <code>that.style.backgroundColor = &#39;red&#39;;</code>是因为延时器this指向的window，我们需要这个this指向的DOM对象，所以有了上面的赋值语句<code>var that = this;</code></li>
</ul>
<h1 id="this规则七call和apply"><a href="#this规则七call和apply" class="headerlink" title="this规则七call和apply"></a>this规则七call和apply</h1><p>可以任意指定上下文，格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">函数.call(上下文)</span><br><span class="line">函数.apply(上下文)</span><br></pre></td></tr></table></figure>

<p>例子1：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.a)</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="built_in">console</span>.log(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">5</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">fun.call(obj,<span class="number">1</span>,<span class="number">2</span>)<span class="comment">//5、1、2</span></span><br><span class="line">fun.apply(obj,[<span class="number">1</span>,<span class="number">2</span>])<span class="comment">//5、1、2</span></span><br></pre></td></tr></table></figure>

<ul>
<li>这个例子中使用call和apply指定了上下文的关系，把这个this指向了对象，所以<code>this.a</code>访问的是obj的a，a是参数，所以是1</li>
<li>两者的区别在于参数的不同，一个需要逗号隔开，一个需要数组</li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>this</tag>
      </tags>
  </entry>
  <entry>
    <title>JS的包装类</title>
    <url>/article/aae27dc2.html</url>
    <content><![CDATA[<p>本文主要记录JS的包装类对象</p>
<h1 id="什么是包装类"><a href="#什么是包装类" class="headerlink" title="什么是包装类"></a>什么是包装类</h1><p>Number()、String()、和Boolean()分别是数字、字符串、布尔值的“包装类”。包装类的目的就是为了让基本类型值可以从它们的构造函数的prototype上获得方法。</p>
<h1 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h1><p>下面例子来说明包装类：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">var</span> b=  <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;字符串&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>)</span><br><span class="line"> <span class="keyword">var</span> d = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a) <span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(b)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b)<span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(c)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> c)<span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(a.__proto__ === <span class="built_in">Number</span>.prototype)<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>下面是运行的结果，可以看到，typeof的结果是一个对象，输出的是类型的原型链上有toFixed、toString等等方法，这也是我们为什么能调用方法的原因。</p>
<p>PrimitiveValue是原始值。</p>
<p>new出来的值是可以参与计算的。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211117131123.png"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>Number()、String()和Boolean()的实例都是Object类型，它们的primitiveValue属性存储它们的本身值</li>
<li>new出来的基本数据类型值能参与计算</li>
<li>包装类的目的就是为了让基本数据类型可以从它们的构造函数的prototype(原型)上获得方法。</li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>包装类</tag>
      </tags>
  </entry>
  <entry>
    <title>JS的原型</title>
    <url>/article/6f0dd71.html</url>
    <content><![CDATA[<p>本文主要记录Javascript中原型、原型链和继承等相关知识。</p>
<h1 id="什么是原型"><a href="#什么是原型" class="headerlink" title="什么是原型"></a>什么是原型</h1><p>任何函数都有prototype属性，这个属性就是原型。prototype属性值是一个对象，默认拥有constructor属性，指回函数本身。</p>
<p>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Fun.prototype);</span><br><span class="line"><span class="built_in">console</span>.log(Fun.prototype.constructor === Fun); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211116205125.png"></p>
<p>普通调用函数的原型没有作用，但是对于构造函数却大有作用。</p>
<h1 id="构造函数的原型是实例的原型"><a href="#构造函数的原型是实例的原型" class="headerlink" title="构造函数的原型是实例的原型"></a>构造函数的原型是实例的原型</h1><p>构造函数的原型是实例的原型。</p>
<p>怎么理解这话？来看下面例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">Fun.prototype.getAge = <span class="string">&#x27;1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f - <span class="keyword">new</span> Fun(<span class="number">12</span>)</span><br><span class="line">f.getAge()<span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<p>我们并没有在构造函数添加getName方法，但是我们的实例却可以调用并输出，所以说明实例的原型是指向构造函数的原型的。</p>
<p>实例打点调用原型的属性和方法就是“原型链查找”</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211116210729.png"></p>
<h1 id="hasOwnProperty方法"><a href="#hasOwnProperty方法" class="headerlink" title="hasOwnProperty方法"></a>hasOwnProperty方法</h1><p>hasOwnProperty方法可以检测对象是否”真正自己拥有”某属性或者方法，也就是检测是不是原型上的</p>
<h1 id="in方法"><a href="#in方法" class="headerlink" title="in方法"></a>in方法</h1><p>in方法检测某个属性或者方法是否可以被对象方法。</p>
<h1 id="构造函数原型绑定方法"><a href="#构造函数原型绑定方法" class="headerlink" title="构造函数原型绑定方法"></a>构造函数原型绑定方法</h1><p>能在原型上绑定属性，当然也能绑定方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">Fun.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f - <span class="keyword">new</span> Fun(<span class="number">12</span>)</span><br><span class="line">f.getName()<span class="comment">//12</span></span><br><span class="line"><span class="keyword">var</span> f1 = <span class="keyword">new</span> Fun(<span class="number">1</span>)</span><br><span class="line">f1.getName()<span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>这里的prototype里面的this指向的是Fun这个函数的空对象。</li>
</ul>
<p>这样写的好处在于，不会每new一个对象 ，都会去绑定方法，而是直接使用构造函数的原型里面的方法，这样就提高了性能。当然如果想去定义一个同名的，但是具有个人特色的方法，可以在实例上直接添加方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">Fun.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f - <span class="keyword">new</span> Fun(<span class="number">12</span>)</span><br><span class="line">f.getName()<span class="comment">//12</span></span><br><span class="line"><span class="keyword">var</span> f1 - <span class="keyword">new</span> Fun(<span class="number">1</span>)</span><br><span class="line">f1.getName=&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;this is age&#x27;</span>+age)</span><br><span class="line">&#125;</span><br><span class="line">f1.getName()<span class="comment">//this is age 1</span></span><br></pre></td></tr></table></figure>

<h1 id="原型链的终点"><a href="#原型链的终点" class="headerlink" title="原型链的终点"></a>原型链的终点</h1><p>我们函数的原型并不是原型的终点，原型的终点是Object。这也是为什么我们能调用hasOwnProperty和in方法，因为在Object这个对象的原型上绑定了这些方法。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211117104528.png"></p>
<p>数组的原型：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211117105327.png"></p>
<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>实现继承的本质就是通过继承原型链来实现</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.name = name;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    User.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;Hello：&#x27;</span> + <span class="built_in">this</span>.name);</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">User1</span>(<span class="params">name</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.name = name;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//实现继承的关键代码，把一个类的prototype指向另外的类</span></span></span><br><span class="line"><span class="javascript">    User1.prototype = <span class="keyword">new</span> User();</span></span><br><span class="line"><span class="javascript">      </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> u = <span class="keyword">new</span> User(<span class="string">&#x27;张三&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> u1 = <span class="keyword">new</span> User1(<span class="string">&#x27;测试&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    u.say();</span></span><br><span class="line"><span class="javascript">    u1.say();</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211117105825.png"></p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>原型</tag>
        <tag>继承</tag>
      </tags>
  </entry>
  <entry>
    <title>JS的构造函数</title>
    <url>/article/6c46e40.html</url>
    <content><![CDATA[<p>本文记录JS的构造函数。</p>
<p>构造函数时通过new一个函数，那么这个函数就是构造函数，下面这段代码说明构造函数和普通函数的区别</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name, age</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.name = name;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.age = age;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">User1</span>(<span class="params">name, age</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: name,</span></span><br><span class="line"><span class="javascript">        <span class="attr">age</span>: age,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> u = <span class="keyword">new</span> User(<span class="string">&#x27;张三&#x27;</span>, <span class="number">23</span>); <span class="comment">//构造函数</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> u1 = <span class="keyword">new</span> User(<span class="string">&#x27;李四&#x27;</span>, <span class="number">13</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(u);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(u1);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(User1(<span class="string">&#x27;王五&#x27;</span>, <span class="number">13</span>)); <span class="comment">// 普通函数</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(User1(<span class="string">&#x27;法外狂徒&#x27;</span>, <span class="number">23</span>));</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>构造函数会自动返回一个对象，而普通调用函数就需要手写返回对象。</li>
</ul>
<p>接下来我们分析构造函数返回的值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.a = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> obj = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&#x27;ZS&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> obj;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> u = <span class="keyword">new</span> User();</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(u);<span class="comment">//&#123;name:&#x27;ZS&#x27;&#125;</span></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>return的是对象，那么返回就是这个对象</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.a = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> b = <span class="number">3</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> obj = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&#x27;ZS&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> b;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> u = <span class="keyword">new</span> User();</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(u);<span class="comment">//&#123;a:1&#125;</span></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> b = <span class="number">3</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> obj = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&#x27;ZS&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> b;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> u = <span class="keyword">new</span> User();</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(u);<span class="comment">//&#123;&#125;</span></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> b = -<span class="number">3</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> obj = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&#x27;ZS&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> b;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> u = <span class="keyword">new</span> User();</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(u);<span class="comment">//&#123;&#125;</span></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>return的是数值，那么返回就是this这个对象，</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> arr = [<span class="number">12</span>, <span class="number">34</span>];</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> obj = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&#x27;ZS&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> arr;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> u = <span class="keyword">new</span> User();</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(u);<span class="comment">//[12,34]</span></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>return的是数值，那么返回就是这个数组。</li>
</ul>
<p>总结：如果return的是引用类型值，那么返回的就是引用类型，如果return基础类型的，那就是返回this对象</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>构造函数</tag>
      </tags>
  </entry>
  <entry>
    <title>JS的正则表达式</title>
    <url>/article/d7136757.html</url>
    <content><![CDATA[<p>本文主要记录JavaScript的正则表达式。</p>
<h1 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h1><p>描述了字符串的“构成模式”，经常被用于检查字符串是否符合预定的格式要求。</p>
<p>检测某个字符串是否是6位数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;456123&#x27;</span></span><br><span class="line"><span class="keyword">var</span> regexp = <span class="regexp">/^\d&#123;6&#125;$/</span>;</span><br><span class="line"><span class="keyword">if</span>(regexp.tets(str))&#123;</span><br><span class="line">    alert(<span class="string">&#x27;符合&#x27;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;不符合&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>前后的 / 表示正则表达式</li>
<li>^匹配开头，$匹配结尾</li>
<li>\d表示数字</li>
<li>{6}表示6位数</li>
</ul>
<p>正则表达式是按位描述，也就是一个一个描述字符串，比如描述一个m开头，n结尾，中间3个数字。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/^m\d\d\dn$/;</span><br><span class="line"><span class="regexp">/^m\d&#123;3&#125;n$/</span></span><br></pre></td></tr></table></figure>

<h1 id="正则表达是的基本使用"><a href="#正则表达是的基本使用" class="headerlink" title="正则表达是的基本使用"></a>正则表达是的基本使用</h1><p>创建表达式：</p>
<p>使用<code>/内容/</code>的语法形式，可以快速创建，也可以使用 new RegExp(‘内容’)的形式。typeof检测结果式object。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var regexp = /^m\d\d\dn$/;</span><br><span class="line">var regexp1 = new RegExp(&#x27;^m\\d\\d\\dn$&#x27;);</span><br></pre></td></tr></table></figure>



<h1 id="正则表达式和字符串"><a href="#正则表达式和字符串" class="headerlink" title="正则表达式和字符串"></a>正则表达式和字符串</h1><h1 id="正则表达式的应用"><a href="#正则表达式的应用" class="headerlink" title="正则表达式的应用"></a>正则表达式的应用</h1>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>JS面向对象</title>
    <url>/article/a58353f0.html</url>
    <content><![CDATA[<p>本文主要记录学习面向对象的基础知识。</p>
<h1 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h1><p>对象是一种K:V值的存在，键值对的集合，使用大括号包裹。</p>
<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;LSF&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">12</span>,</span><br><span class="line">  <span class="attr">var</span>: <span class="string">&#x27;舒克&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;va-r&#x27;</span>: <span class="string">&#x27;贝塔&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>不符合命名规范的属性需要引号包裹。</p>
</blockquote>
<p>属性值访问：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;LSF&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">12</span>,</span><br><span class="line">  <span class="attr">var</span>: <span class="string">&#x27;舒克&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;va-r&#x27;</span>: <span class="string">&#x27;贝塔&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> name1 = <span class="string">&#x27;name&#x27;</span></span><br><span class="line">obj.name<span class="comment">//LSF</span></span><br><span class="line">obj[<span class="string">&#x27;var&#x27;</span>]<span class="comment">//舒克</span></span><br><span class="line">obj[<span class="string">&#x27;va-r&#x27;</span>]<span class="comment">//贝塔</span></span><br><span class="line">obj.name1 <span class="comment">//undefined</span></span><br><span class="line">obj[name1]<span class="comment">//LSF</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>不符合命名规范的属性想要调用，需要使用[‘’]访问。变量存储的也需要使用[‘’]访问</p>
</blockquote>
<p>属性的更改：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">obj.a++</span><br><span class="line">obj.a = <span class="number">30</span></span><br></pre></td></tr></table></figure>

<p>属性的创建：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">obj.b = <span class="number">30</span></span><br></pre></td></tr></table></figure>

<p>属性的 删除：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">10</span></span><br><span class="line">    <span class="attr">b</span>:<span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>.obj.b</span><br></pre></td></tr></table></figure>

<h1 id="对象的方法"><a href="#对象的方法" class="headerlink" title="对象的方法"></a>对象的方法</h1><p>如果对象的某个属性值是函数，则称为对象“方法”</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stu=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;LSF&#x27;</span></span><br><span class="line">    <span class="attr">age</span>: <span class="number">22</span></span><br><span class="line">    <span class="attr">sayhello</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">stu.sayhello()</span><br></pre></td></tr></table></figure>

<h1 id="对象的遍历"><a href="#对象的遍历" class="headerlink" title="对象的遍历"></a>对象的遍历</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">11</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">15</span>,</span><br><span class="line">    <span class="attr">c</span>:<span class="number">46</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;属性:&#x27;</span>+k+<span class="string">&#x27;属性值:&#x27;</span>+obj[k])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="对象的深浅克隆"><a href="#对象的深浅克隆" class="headerlink" title="对象的深浅克隆"></a>对象的深浅克隆</h1><p>对象是引用类型，直接赋值其实还是相同地址</p>
<p>浅克隆：(for k in obj)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj =&#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">c</span>:<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj)&#123;</span><br><span class="line">     obj1[k] = obj[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>深克隆：（递归）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> obj = &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">a</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">b</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">c</span>: [</span></span><br><span class="line"><span class="javascript">        <span class="number">3</span>,</span></span><br><span class="line"><span class="javascript">        <span class="number">4</span>,</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">d</span>: <span class="number">5</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">e</span>: <span class="number">66</span>,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">      ],</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">o</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(o)) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> result = [];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; o.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">          result.push(deepClone(o[i]));</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> o == <span class="string">&#x27;object&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> result = &#123;&#125;;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> o) &#123;</span></span><br><span class="line"><span class="javascript">          result[k] = deepClone(o[k]);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> result = o;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> result;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> obj2 = deepClone(obj);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(obj2);</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript全局作用和局部作用闭包相关面试题</title>
    <url>/article/634c77b2.html</url>
    <content><![CDATA[<p>近段时间看了许多JS基础的面试题，特此记录一下，本文主要通过例子和分析的形式记录。</p>
<h1 id="第一个例子："><a href="#第一个例子：" class="headerlink" title="第一个例子："></a>第一个例子：</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br></pre></td></tr></table></figure>

<ul>
<li>这可以说面试中基本会遇到的，稍微查过的都知道这里输出6个5。</li>
<li>首先for 循环里的 <code>setTimeout</code> 执行了 5 次，每次都会将这个函数的执行推迟 <code>1000ms</code> ：</li>
<li>接下来就是这个函数被执行，那么此时函数的输出语句i就会往外找，而此时i已经是最终的5（最后的i++变成5），所以输出的都是5，for循环和<code>setTimeout</code>是不相互影响，可以理解为for循环把<code>setTimeout</code>平放了5次，那么5次之后，这些函数就会同时输出5。</li>
<li>最终结果就是：先输出最外层的5,<code>1000ms</code>后同时输出5个5</li>
</ul>
<h1 id="第二个例子："><a href="#第二个例子：" class="headerlink" title="第二个例子："></a>第二个例子：</h1><p>个人觉得也很套路的题目。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = []</span><br><span class="line">    <span class="keyword">var</span> i</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        num[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num[<span class="number">9</span>]</span><br><span class="line">&#125;</span><br><span class="line">test()()</span><br></pre></td></tr></table></figure>

<ul>
<li>先看看这段代码在干嘛：test()()是调用了该函数后立即执行掉，也就是test函数返回一个函数，再看test函数，里面定义了一个空数组和变量i，一个for循环了10次，数组的每一项推入一个函数，这个函数输出i，最后test函数返回数组的第9项。</li>
<li>可能会这样想：<code>num[i]</code>对象的函数就是  <code>console.log(i)</code>，换句话就是，<code>num[5]</code>输出的就是5，其实这样想就已经掉坑了，<strong>函数只有被调用的时候才执行</strong>，你这里的函数在for循环里面执行了吗，显然没有，我们是在test()()这里才执行的，所以，这里函数的i是不是要往外找，而这个i已经是最终的10，所以你无论下标是多少都是输出10</li>
<li>最终结果就是：输出10</li>
</ul>
<h1 id="第三个例子："><a href="#第三个例子：" class="headerlink" title="第三个例子："></a>第三个例子：</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">test()();</span><br></pre></td></tr></table></figure>

<ul>
<li>依旧看代码代码在干嘛：全局定义了变量a，定义函数，函数调用后执行返回的函数，再看test函数，变量a属于全局，返回函数，这个函数输出的是a，最后又定义了a等于3。</li>
<li>这题目主要是要看全，注意变量提升，JS的执行阶段都会把变量提升到当前作用域前面，所以函数里面的a初看是全局，但是变量提升后，使得它变成了局部变量，注意，变量只提升定义，所以a在执行阶段就赋值了a等于2，返回的函数里卖弄没有i，往外找就是找到外层函数i，正是刚才的2.</li>
<li>最终结果就是：输出2</li>
</ul>
<h1 id="第四个例子："><a href="#第四个例子：" class="headerlink" title="第四个例子："></a>第四个例子：</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">foo</span>:<span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> foo(c,a);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> func1=foo(<span class="number">0</span>);<span class="comment">//undefined</span></span><br><span class="line">func1.foo(<span class="number">1</span>);<span class="comment">//0</span></span><br><span class="line">func1.foo(<span class="number">2</span>);<span class="comment">//0</span></span><br><span class="line">func1.foo(<span class="number">3</span>);<span class="comment">//0</span></span><br><span class="line"><span class="keyword">var</span> func2=foo(<span class="number">0</span>).foo(<span class="number">1</span>).foo(<span class="number">2</span>).foo(<span class="number">3</span>);<span class="comment">//undefined、0、0、0</span></span><br><span class="line"><span class="keyword">var</span> func3=foo(<span class="number">0</span>).foo(<span class="number">1</span>);<span class="comment">//undefined、0</span></span><br><span class="line">func3.foo(<span class="number">2</span>);<span class="comment">//1</span></span><br><span class="line">func3.foo(<span class="number">3</span>);<span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>当初看这题目瞬间就懵了，这写的什么，foo连续调用什么东西，什么abc的，其实这些都是为了混淆，只要仔细分析，基础扎实，这题还是容易的</li>
<li>我把上面的题目简化成了一下这种，当然就是输出了a和b的值：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&#x27;a——&gt;&#x27;</span> + a);</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&#x27;b——&gt;&#x27;</span> + b);</span><br><span class="line">       <span class="keyword">return</span> &#123;</span><br><span class="line">         <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> foo(c, a);</span><br><span class="line">         &#125;,</span><br><span class="line">       &#125;;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">var</span> func1 = foo(<span class="number">0</span>); <span class="comment">//0,undefined</span></span><br><span class="line">     func1.foo(<span class="number">1</span>); <span class="comment">//1,0</span></span><br><span class="line">     func1.foo(<span class="number">2</span>); <span class="comment">//2,0</span></span><br><span class="line">     func1.foo(<span class="number">3</span>); <span class="comment">//3,0</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">var</span> func2 = foo(<span class="number">0</span>).foo(<span class="number">1</span>).foo(<span class="number">2</span>).foo(<span class="number">3</span>); <span class="comment">//0,undefine,1,0,2,1,3,2 写法更上面一样</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">var</span> func3 = foo(<span class="number">0</span>).foo(<span class="number">1</span>); <span class="comment">//0，undefine,1,0  </span></span><br><span class="line">     func3.foo(<span class="number">2</span>); <span class="comment">//2，1</span></span><br><span class="line">     func3.foo(<span class="number">3</span>); <span class="comment">//3，1</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211111151132.png"></p>
<ul>
<li><p>这题目可以分为三种写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;a——&gt;&#x27;</span> + a);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;b——&gt;&#x27;</span> + b);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> foo(c, a);</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func1 = foo(<span class="number">0</span>); <span class="comment">//0,undefined</span></span><br><span class="line">func1.foo(<span class="number">1</span>); <span class="comment">//1,0</span></span><br><span class="line">func1.foo(<span class="number">2</span>); <span class="comment">//2,0</span></span><br><span class="line">func1.foo(<span class="number">3</span>); <span class="comment">//3,0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//等同于：</span></span><br><span class="line"><span class="comment">//foo(0).foo(1)</span></span><br><span class="line"><span class="comment">//foo(0).foo(2)</span></span><br><span class="line"><span class="comment">//foo(0).foo(3)</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><code>var func1 = foo(0)</code>：这段代码传入了一个参数为0，那么这里a就是0，b为undefined，输出0，undefined，这一点不难理解。</p>
<p><code>func1.foo(1)</code>foo函数返回了一个对象，这个对象的属性又是一个函数，这个函数返回foo函数，这里千万不能被绕晕了，这段代码给了一个1的数字，其实就是传给了变量c，调用foo函数，传入的c就是给了a，这里a就输出了1，再回来看foo对象里面的函数里面的a，它会往外找，这是JS的作用域链，我们闭包的变量是存放在内存中不会被回收的，所以这里的a就是上面的0</p>
<p><code>func1.foo(2)</code>和<code>func1.foo(3)</code>同样的，都是调用了对象传入参数，c对应a，a对应b，c是我们传入的2、3，那么a就是闭包记住的0。</p>
<p>回到最初的题目，看下是不是一样的</p>
<ul>
<li>第二种写法初看会觉得很懵，但是仔细推敲，其实不难。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;a——&gt;&#x27;</span> + a);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;b——&gt;&#x27;</span> + b);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> foo(c, a);</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="keyword">var</span> func2 = foo(<span class="number">0</span>).foo(<span class="number">1</span>).foo(<span class="number">2</span>).foo(<span class="number">3</span>); <span class="comment">//0,undefined,1,0,2,1,3,2</span></span><br></pre></td></tr></table></figure>

<p>首先<code>foo(0)</code>是在调用函数，之后则是调用对象里面的方法，调用函数，最先输出0和undefined，记住此时a是0</p>
<p>接下来<code>foo(1)</code>是在调用对象的属性函数，c是传入给a，输出a等于1，那么a往外找就是0，输出1和0，记住此时a是1</p>
<p><code>foo(2)</code>也在调用对象的属性函数，c传给a，输出a等于2，a往外找是1，输出的是2和1，记住此时a是2</p>
<p><code>foo(3)</code>同理，输出3和2，因为2是刚才的a。</p>
<p>看到这里，不免有些困惑，那刚才的a怎么就没记住，其实记住了，那就是0如果没懂，第三种写法你就会看出什么了。</p>
<ul>
<li>第三种则是前两种的结合。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">undefined</span>，<span class="number">1</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;a——&gt;&#x27;</span> + a);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;b——&gt;&#x27;</span> + b);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> foo(c, a);</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="keyword">var</span> func3 = foo(<span class="number">0</span>).foo(<span class="number">1</span>); <span class="comment">//0，undefined、1、0</span></span><br><span class="line">func3.foo(<span class="number">2</span>); <span class="comment">//2，1</span></span><br><span class="line">func3.foo(<span class="number">3</span>); <span class="comment">//3，1</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>var func3 = foo(0).foo(1)</code>输出的确实是0，undefined、1、0，调用函数时：undefined，1，这里a = 0、b=undefined、调用对象时：a=1，b=0，记住这里的a时被记住的，也就是后面的a输出为啥是1；</li>
<li><code>func3.foo(2)</code>输出的是2、1，c等于a输出2，这个没问题，那这个a会往外找，而此时a是1，所以是2和1。</li>
<li><code>func3.foo(3)</code>是一样的，a记住的是1，输出3和1</li>
</ul>
<p>至此回头看原题，答案一目了然！</p>
]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基础知识总结</title>
    <url>/article/f32bf739.html</url>
    <content><![CDATA[<p>本文主要总结近段时间以来的JavaScript的基础知识。</p>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>JS在ES5中使用var定义变量，在ES6中新增了let和const。</p>
<p>var的变量可以是任何数据类型，这点是区别Java或者C等强类型语言的。</p>
<p>使用var变量会存在变量声明提升问题，变量的提升会提升到当前的作用域，只提升变量不会提升值。</p>
<p>需要注意的是，除了函数和函数参数属于局部变量，使用var定义的变量都属于全局变量。</p>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p><strong>Number类型：</strong></p>
<p>在JS中，所有的数字都属于Number类型，科学计数法也属于，<strong>数字类型中一个特别的值：NaN，它是一个不自等的值</strong></p>
<p><strong>String类型：</strong></p>
<p>字符串是使用引号包裹的一串字符。</p>
<p>常用的7个方法：</p>
<ul>
<li>charAt(a)：返回指定位置的字符，位置从0开始</li>
<li>substring(a,b)：返回<strong>a开始到b结束，不包括b</strong>的子串 ，<strong>b不写则会一直截取到结束，不接受负的参数</strong>，自动调换位置。从小到大的形式</li>
<li>substr(a,b)：返回<strong>从a开始，b作为长度的子串，如果b省略，则会一直选择到字符串结尾</strong>，a还可以是负数，表示倒数，<strong>b不可以是负数</strong>，<strong>倒数后是往后边选的</strong></li>
<li>slice(a,b)：返回<strong>从a开始，b结束（不包括b）的子串，a，b可以是负数，表示倒数第几位，a必须小于b</strong>，<strong>不会自动调换位置</strong></li>
<li>toUpperCase()：返回字符串的小写形式</li>
<li>toLowerCase()：返回字符串大写形式</li>
<li>indexOf()：返回字符串首次出现位置，没有返回-1</li>
</ul>
<p><strong>Boolean类型:</strong></p>
<p>表示真假的数据类型，布尔类型值只有<code>true</code>和<code>false</code>，在判断条件中，除了以下六种情况都为真</p>
<p>1、undefined（未定义，找不到值时出现）</p>
<p>2、null（代表空值）</p>
<p>3、false（布尔值的false，字符串”false”布尔值为true）</p>
<p>4、0（数字0，字符串”0”布尔值为true）</p>
<p>5、<code>NaN</code>（无法计算结果时出现，表示”非数值”；但是typeof NaN===”number”）</p>
<p>6、””（双引号）或’’（单引号） （<strong>空字符串，中间有空格时也是true</strong>）</p>
<p><strong>Undefine类型：</strong></p>
<p>变量的默认值，它既是类型也是值，它的类型只有一个值，就是它本身，在变量声明中，提升的默认就是undefined</p>
<p><strong>Null类型:</strong></p>
<p>null表示’空‘，它是空对象</p>
<p><strong>数据类型检测：</strong></p>
<p>使用typeof可以对数据类型检测。</p>
<p><strong>如何判断变量值为NaN?</strong></p>
<p>使用isNaN传入变量值，会返回布尔值，但是因为其原理还是使用Number函数</p>
<p><strong>类型转换：</strong></p>
<ul>
<li><p>其他数-&gt;数字：使用Number函数，除了使用Number函数，还可以使用<code>parseInt</code>函数，将字符串转为整数，还可以使用<code>parseFloat</code>函数，<code>parseFloat</code>函数是将字符串转为浮点数，<code>parseInt</code>和<code>parseFloat</code>去**对布尔、null和undefined类型转换会变成<code>NaN</code>**，因为会被隐式转换为字符串，字符串转数字得到结果就是<code>NaN</code></p>
</li>
<li><p>其他数-&gt;字符串：使用String函数，还可以使用使用toString()方法</p>
</li>
<li><p>其他数-&gt;布尔值：使用Boolean函数</p>
</li>
</ul>
<p><strong>包装对象：</strong></p>
<p><strong>存取</strong>字符串、数字或布尔值的属性时，<strong>创建的临时对象</strong>称为包装对象，null和undefined没有包装对象，尝试使用“.”访问它们的属性会报错。</p>
<h1 id="表达式和运算符"><a href="#表达式和运算符" class="headerlink" title="表达式和运算符"></a>表达式和运算符</h1><p><strong>运算符</strong>：也叫操作符，是一种符号。通过运算符可以对一个或多个值进行运算，并获取运算结果。</p>
<p><strong>表达式</strong>：由数字、运算符、变量的组合（组成的式子）。</p>
<p>运算符主要分为：</p>
<p>算术运算符:+、-、*、/、%</p>
<p>关系运算符:&gt;、&lt;、&gt;=、&lt;=、==、!=、===、!==</p>
<p>逻辑运算符：！、&amp;&amp;、||</p>
<p>赋值运算符：=、+=、-=、*=、/=、%=、++、–</p>
<p>优先级：非运算-&gt;数学运算-&gt;关系运算-&gt;逻辑运算</p>
<p>隐式转换：如果参与数学运算符的某操作数不是数字类型，那么JavaScript会自动将操作数转换为数字型，本质是内部调用Number函数。如果是加号，其中有字符串，那么就不是进行计算而是进行拼接</p>
<p>IEEE754：小数结算可能会出现不准，使用tofix()保留小数点后几位</p>
<h1 id="逻辑判断和循环语句"><a href="#逻辑判断和循环语句" class="headerlink" title="逻辑判断和循环语句"></a>逻辑判断和循环语句</h1><p>if语句：if语句是最简单的条件语句，也称选择语句，它通常结合else一起使用，表示如果..就…否则…，if…else…一定会选择一条语句执行</p>
<p>if…elseif…语句：else if()条件分支“暗含”了不符合之前所有条件。</p>
<p>switch语句:在switch中圆括号中一般是一个变量命，这个变量被分类讨论，case表示“情况”，它后面没有圆括号，直接跟一个值，程序会依次将case后面的值与switch中圆括号的值<strong>全等比对</strong></p>
<p>三元运算符：条件表达式？表达式1：表达式2，表达式为真则执行表达式1，否则执行表达式2</p>
<p>for语句：适合一些规定范围</p>
<p>while语句：适合不定范围</p>
<p>do…while语句:至少会执行一次</p>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>定义数组的三种方式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ary = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)<span class="comment">//这样写有个缺点,既我想输入一个数字，其实只是去定义长度</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">4</span>)<span class="comment">//定义数组长度为4，值为undefined</span></span><br></pre></td></tr></table></figure>

<p>数组方法：</p>
<p>push()方法：在数组尾部插入新项：参数就是要插入的项，如果要插入多项，可以用逗号隔开，使用push()方法后，数组会立即改变</p>
<p>pop()方法：在数组尾部删除一项：没有参数，只能删除一项,返回的值是被删除的项。</p>
<p>unshift()方法:在数组头部插入新项：参数就是要插入的项，如果要插入多项，可以用逗号隔开，使用unshift()方法后，数组会立即改变</p>
<p>shift()方法:在数组头部删除一项：没有参数，只能删除一项</p>
<p><strong>splice()方法</strong>：可以对数组的<strong>增删改</strong>，它的本质就是去改变数组，参数第一和第二位必须是整数。</p>
<p>slice()方法:用来得到子数组，类似于字符串的slice方法，会返回<strong>从a下标开始，b下标结束（不包括b下标）的子串，a,b可以是负数，a，b必须是同时都是负数，否则得到空数组，表示倒数第几位数组项，a必须小于b，不会改变数组</strong></p>
<p>join()方法：使数组转为字符串，<strong>参数表示以什么字符作为连接符，如果留空则默认以逗号分隔</strong></p>
<p>split()方法:使字符串转为数组，参数表示以什么字符拆分字符串，一般不留空，只留空字符</p>
<p>concat()方法：合并多个数组。不会改变原数组</p>
<p>reverse()方法：将数组的全部项顺序置反，立即更改原来数组</p>
<p>indexof()方法:搜索数组中的元素，并返回该元素首次出现的下标，如果元素不存在，返回-1，参数是和数组的项是全等关系</p>
<p>includes()方法：判断数组中是否存在一个指定的值，返回的是布尔值，参数也是和数组项时全等关系。</p>
<p>二维数组：数组中的数组。</p>
<h1 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h1><p>这里需要知道基本数据类型和引用数据类型：</p>
<p>基本数据类型:会存放在一个内存地址中，我们把变量赋值给另外一个，则相当于开辟了新空间，这两个变量是不会影响的</p>
<p>引用数据类型：会存放在一块内存地址中，我们把一个对象或者数组赋值给另外一个变量，指向的内存地址是一样的，这就好比两个人住一个房间，其中一个对其修改，那么另外一个也受其影响。</p>
<p>浅拷贝：浅克隆是指只克隆数组第一层，如果是多为数组，或者数组中的项是其他引用数据类型，则不克隆其他层</p>
<p>深拷贝：通过递归方式进行深克隆：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [[1,2,3],[3,4,5]];</span><br><span class="line">function deepclone(arr)&#123;</span><br><span class="line">    var result = [];</span><br><span class="line">    for(var i = 0;i&lt;arr.lenght;i++)&#123;</span><br><span class="line">        if(Array.isArray(arr[i]))&#123;</span><br><span class="line">            //递归</span><br><span class="line">            result.push(deepclone(arr[i]))</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            result.push(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line">var arr2 = deepclone(arr)</span><br><span class="line">console.log(arr2)</span><br></pre></td></tr></table></figure>

<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数就像一个工厂，通过传入参数，最终计算过后的结果。</p>
<p>函数也存在声明提升现象，并且优先于变量提升，函数提升可以调用一个后声明的函数，而不会引发错误，但是如果赋值给一个变量，则是变量声明提升规则，函数不会被提升。</p>
<p>立即执行函数：定义函数后立即被执行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;立即执行函数&#x27;</span>)</span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure>

<p>闭包：函数和函数自身能访问到的变量;记忆性、私有变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">1</span>;</span><br><span class="line">    add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; n++ &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(n)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = fun()</span><br><span class="line">f()<span class="comment">//1</span></span><br><span class="line">add()</span><br><span class="line">f()<span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>JS的基础部分知识和其他语言基本相似，但是需要特别注意变量的声明提升，作用域链，JS中比较难的知识点：闭包、递归；比较杂多的知识点：数组方法。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript数组相关算法</title>
    <url>/article/d514bee5.html</url>
    <content><![CDATA[<p>本文主要介绍数组相关的算法题目。</p>
<h1 id="问题：遍历数组，求数组总和、平均数"><a href="#问题：遍历数组，求数组总和、平均数" class="headerlink" title="问题：遍历数组，求数组总和、平均数"></a>问题：遍历数组，求数组总和、平均数</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">22</span>,<span class="number">56</span>,<span class="number">45</span>,<span class="number">34</span>]</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr.lenght;i++)&#123;</span><br><span class="line">    sum = sum + arr[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum)</span><br><span class="line"><span class="built_in">console</span>.log(sum/arr.lenght)</span><br></pre></td></tr></table></figure>

<h1 id="问题：求数组的最大、最小值"><a href="#问题：求数组的最大、最小值" class="headerlink" title="问题：求数组的最大、最小值"></a>问题：求数组的最大、最小值</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> scoreArr = [<span class="number">56</span>,<span class="number">8</span>,<span class="number">98</span>,<span class="number">25</span>,<span class="number">31</span>,<span class="number">555</span>,<span class="number">26</span>]</span><br><span class="line"><span class="keyword">var</span> max = scoreArr[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">var</span> min = scoreArr[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i&lt;scoreArr.lenght;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(scoreArr[i]&gt;max)&#123;</span><br><span class="line">        max = scoreArr[i]</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(scoreArr[i]&lt;min)&#123;</span><br><span class="line">        min = scoreArr[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(max,min)</span><br></pre></td></tr></table></figure>

<h1 id="问题：数组去重"><a href="#问题：数组去重" class="headerlink" title="问题：数组去重"></a>问题：数组去重</h1><p>思路：准备空数组，遍历原数组，如果遍历到的项不在结果数组中，则推入结果数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = []</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">56</span>,<span class="number">8</span>,<span class="number">98</span>,<span class="number">25</span>,<span class="number">31</span>,<span class="number">555</span>,<span class="number">26</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr.lenght;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(result.includes(arr[i]) === <span class="literal">false</span> )&#123;</span><br><span class="line">        result.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br></pre></td></tr></table></figure>

<h1 id="问题：随机从原数组中取3项"><a href="#问题：随机从原数组中取3项" class="headerlink" title="问题：随机从原数组中取3项"></a>问题：随机从原数组中取3项</h1><p>思路：准备一个空结果数组，遍历原数组，随机选择一项，推入结果数组，为了不重复推入同一个项，可以将其删除，但是会改变原来数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = []</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">56</span>,<span class="number">8</span>,<span class="number">98</span>,<span class="number">25</span>,<span class="number">31</span>,<span class="number">555</span>,<span class="number">26</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random * arr.lenght);</span><br><span class="line">    result.push(arr[n]);</span><br><span class="line">    arr.splice(n,<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript的arguments</title>
    <url>/article/a9f31fe4.html</url>
    <content><![CDATA[<p>本文主要介绍javascript中的arguments类数组对象</p>
<p><strong><code>arguments</code></strong> 是一个对应于传递给函数的参数的类数组对象。 —MDN</p>
<p><code>arguments</code>对象不是一个 <code>Array</code>。它类似于<code>Array</code>，但除了length属性和索引元素之外没有任何<code>Array</code>属性。</p>
<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">arguments</span>.lenght<span class="comment">//5</span></span><br><span class="line">&#125;</span><br><span class="line">fun(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p>关于arguments类数组还有许多可以研究的，比如arguments是对象，而对象是没有长度属性，arguments在ES6中的箭头函数是无法使用的等等，这里只做记录，以后更新。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript的二维数组</title>
    <url>/article/7f0bfd33.html</url>
    <content><![CDATA[<p>本文主要介绍JavaScript的二维数组。</p>
<h1 id="什么是二维数组？"><a href="#什么是二维数组？" class="headerlink" title="什么是二维数组？"></a>什么是二维数组？</h1><p>以数组作为数组元素的数组，即“数组中的数组”，eg: <code>var arr = [[12,,15,36],[56,98,45]]</code></p>
<h1 id="如何遍历数组？"><a href="#如何遍历数组？" class="headerlink" title="如何遍历数组？"></a>如何遍历数组？</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">    		[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">    		[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line">          	[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],</span><br><span class="line">    		[<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]</span><br><span class="line">          ]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr.lenght;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(arr[i][j])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript的全局变量和局部变量</title>
    <url>/article/998c8364.html</url>
    <content><![CDATA[<p>本文意在通过例子的方式总结全局变量和局部变量的区别。</p>
<h1 id="例子一"><a href="#例子一" class="headerlink" title="例子一"></a>例子一</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)<span class="comment">//1，2，3，4，5，6，7，8，9</span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">window</span>.i)<span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<p>实际上JS编译时这样的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)<span class="comment">//1，2，3，4，5，6，7，8，9</span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">window</span>.i)<span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<ul>
<li>能通过window调用，说明时全局的变量，这里的i在js预解析阶段被提升到前面，在执行的时候再为其赋值，如果使用let，则不会被提升。</li>
</ul>
<h1 id="例子二"><a href="#例子二" class="headerlink" title="例子二"></a>例子二</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)<span class="comment">//15</span></span><br><span class="line">&#125;</span><br><span class="line">fun(<span class="number">15</span>)</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">window</span>.a)<span class="comment">//undefine</span></span><br></pre></td></tr></table></figure>

<ul>
<li>函数的参数属于局部变量，不能通过window调用</li>
</ul>
<h1 id="例子三-重点"><a href="#例子三-重点" class="headerlink" title="例子三(重点)"></a>例子三(重点)</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">    arr.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">2</span>]()<span class="comment">//5</span></span><br></pre></td></tr></table></figure>

<ul>
<li>这个例子中无论哪个下标执行都会输出5，因为，i属于全局变量，函数输出的值是全局的，如果先要输出不同值，就需要设置成局部的变量，有两种方法，一种使用立即执行函数，另外一种就是使用let,</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [];</span><br><span class="line">for(var i = 0;i&lt;5;i++)&#123;</span><br><span class="line">    arr.push((function(i)&#123;//形参i属于局部变量</span><br><span class="line">        console.log(i)</span><br><span class="line">    &#125;)(i))//实参</span><br><span class="line">&#125;</span><br><span class="line">arr[2]()//2</span><br></pre></td></tr></table></figure>

<ul>
<li>使用了IIFE的方式</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [];</span><br><span class="line">for(let i = 0;i&lt;5;i++)&#123;</span><br><span class="line">    arr.push(function()&#123;</span><br><span class="line">        console.log(i)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">arr[2]()//2</span><br></pre></td></tr></table></figure>

<ul>
<li>let不会被提升，所以也就完整的保留再函数里面</li>
</ul>
<h1 id="例子三-一"><a href="#例子三-一" class="headerlink" title="例子三.一"></a>例子三.一</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = []</span><br><span class="line">    <span class="keyword">var</span> i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        num[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> num[<span class="number">9</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test()()</span><br></pre></td></tr></table></figure>

<ul>
<li>这题目和前面的差不多，num[9]输出都是10，因为匿名函数输出这个i是上层的i，而这个i是不断变化的，我们输出的i的最终值。</li>
<li>在循环中将函数赋给数组，却并没有执行，也就是程序并不知道函数内部是个啥。等执行的时候，i已经变成了10，数组每一项的运行结果都是10</li>
<li>很套路的题目。。</li>
</ul>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211110224238.png"></p>
<h1 id="例子四"><a href="#例子四" class="headerlink" title="例子四"></a>例子四</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a)<span class="comment">//5</span></span><br><span class="line">&#125;</span><br><span class="line">fun()</span><br><span class="line"> <span class="built_in">console</span>.log(a)<span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<ul>
<li>这里第一眼可能就会觉得a++属于全局变量，其实不然，a++属于局部变量，因为后面的var a被提升了，所以js的理解时这样的：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    a++;<span class="comment">//NaN</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a)<span class="comment">//5</span></span><br><span class="line">&#125;</span><br><span class="line">fun()</span><br><span class="line"> <span class="built_in">console</span>.log(a)<span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果把函数的var a变成let a,那么就不会被提升，函数里面的a++就是全局变量</li>
</ul>
<h1 id="例子五"><a href="#例子五" class="headerlink" title="例子五"></a>例子五</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">&quot;global&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> name=<span class="string">&quot;local&quot;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br></pre></td></tr></table></figure>

<ul>
<li>  第一眼看感觉是local和global,因为会就近的找变量，其实不然，输出语句都是local，因为判断里面的var name被提升了，到执行阶段name赋值了local，而我们说过，除了函数内部和函数参数属于局部变量，其他都属于全局变量，所以local把global覆盖掉了，两次都是local</li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript的冒泡排序</title>
    <url>/article/9e8798c2.html</url>
    <content><![CDATA[<p>本文主要介绍算法排序之一的冒泡排序</p>
<p>冒泡排序的核心思路是一趟一趟地进行多次项的两两比较，每次都会把最小的元素拍好位置，如同水中的气泡上浮一样</p>
<p>下面是一个例子：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211105084801.png"></p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211105084946.png"></p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211105085051.png"></p>
<h1 id="公式："><a href="#公式：" class="headerlink" title="公式："></a>公式：</h1><p>n个数字，排序的趟数是n-1趟，比较次数是n(n-1)/2</p>
<h1 id="基本算法"><a href="#基本算法" class="headerlink" title="基本算法"></a>基本算法</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 倒数开始，最后一个跟前一个比，如果小于，那么互换位置</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>];</span><br><span class="line"><span class="comment">//比较趟数-&gt;4</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">//j=4;</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = arr.length - <span class="number">1</span>; j &gt;= i; j--) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;arr[j]-&gt;&#x27;</span> + arr[j]);</span><br><span class="line">    <span class="built_in">console</span>.log(arr[j - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (arr[j] &lt; arr[j - <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">      arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">      arr[j - <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;----------------&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript的函数优先提升</title>
    <url>/article/c7b5ade2.html</url>
    <content><![CDATA[<p>本文主要记录JavaScript的函数优先提升特性</p>
<p>我们知道在JS中，有一个预先解析阶段，在这个阶段内会去先看所有的变量，然后提升到前面，但是只是提升变量，并没有提升值，例如以下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//undefine</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p>而在函数中，也存在提升的现象，我们可以调用一个等会声明的函数，这里不会报错</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fun();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  onsole.log(<span class="string">&#x27;this is function&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是如果我们使用匿名函数，即赋值给变量 ，则使用的是变量声明提升的规则，后面的函数是不会被提升的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fun(); <span class="comment">//this is not function</span></span><br><span class="line"><span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  onsole.log(<span class="string">&#x27;this is function&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再看以下例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fun(); <span class="comment">//2</span></span><br><span class="line"><span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">fun();<span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在预解析阶段：根据函数提升和变量提升，<code>function fun()</code>和<code>var fun</code>都会被提升到前面，<strong>函数会优先被提升</strong>，变量则后提升，虽然这里同名，但是<strong>变量的提升不会覆盖函数的声明提升</strong></li>
<li>在执行阶段，第一个<code>fun()</code>是去执行一个函数，前面有函数的当然是<code>function fun()</code>,所以这里输出2。在预解析阶段提升了<code>var fun</code>,执行到第二条语句的时候，则给它赋值，这样<code>var fun</code>就是一个函数了，而在第二个函数体被提升后就不会再覆盖回来，相反，现在是被var fun覆盖，所以最后调用的输出结果是1</li>
</ul>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211108104444.png"></p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript的判断和循环语句</title>
    <url>/article/8bd1ac6e.html</url>
    <content><![CDATA[<p>本文主要介绍JavaScript的判断语句和循环语句。</p>
<h1 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h1><p>if语句是最简单的条件语句，也称选择语句，它通常结合else一起使用，表示如果..就…否则…</p>
<p>if…else…一定会选择一条语句执行</p>
<p>if语句的执行块只有一条语句时，可以省略大括号，分号结尾</p>
<p>示例：判断闰年</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> year = <span class="built_in">Number</span>(prompt(<span class="string">&#x27;请输入年份&#x27;</span>));</span><br><span class="line"><span class="comment">//能被4整除且不能被100整除</span></span><br><span class="line"><span class="comment">//能被100整除也能被400整除</span></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) ||</span><br><span class="line">  (year % <span class="number">100</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">400</span> != <span class="number">0</span>)</span><br><span class="line">) &#123;</span><br><span class="line">  alert(<span class="string">&#x27;是闰年&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  alert(<span class="string">&#x27;不是闰年&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="if多条件判断语句"><a href="#if多条件判断语句" class="headerlink" title="if多条件判断语句"></a>if多条件判断语句</h1><p>else if()条件分支“暗含”了不符合之前所有条件。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211031201209.png"></p>
<h1 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h1><p>除if语句之外，JS还提供了另外一种选择语句：switch语句。</p>
<p>用途：当一个变量被分类讨论的情况。</p>
<p>在switch中圆括号中一般是一个变量命，这个变量被分类讨论</p>
<p>case表示“情况”，它后面没有圆括号，直接跟一个值，程序会依次将case后面的值与switch中圆括号的值<strong>全等比对</strong>，如果相同，则执行case后面的语句，default为默认情况。需要注意的是，case后面要书写<strong>break</strong>，否则会造成语句的贯穿，后面的也会被执行。</p>
<p>示例：要求用户输入一个1~12中的任意一个数字，显示这个月份的天数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="built_in">Number</span>(prompt(<span class="string">&#x27;输入1~12月份&#x27;</span>));</span><br><span class="line">      <span class="keyword">switch</span> (n) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">          alert(<span class="string">&#x27;这个月有31天&#x27;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">          alert(<span class="string">&#x27;这个月有30天&#x27;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">          alert(<span class="string">&#x27;这个月有28或29天&#x27;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          alert(<span class="string">&#x27;输入正确数字&#x27;</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>



<h1 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h1><p>JavaScript中提供了一种叫做“三元运算”的语法形式，让我们可以方便地实现选择：条件表达式？表达式1：表达式2，表达式为真则执行表达式1，否则执行表达式2</p>
<p>用途：根据条件是否成立，在两个不同值中选择变量的值</p>
<h1 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>for循环有三个表达式，第三个表达式不能有分号。</p>
<ul>
<li><code>var i = 1;</code>表示定义一个“循环变量” i,并赋值为1</li>
<li>i<code>&lt;=10;</code>，表示继续执行循环的条件，只要条件为真，则会一直执行</li>
<li><code>i++</code>，用来更新循环变量，使循环的值越来越趋向终点</li>
</ul>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211031202912.png"></p>
<p>需要注意的是，var和let的区别:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i);<span class="comment">//ReferenceError: i is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i);<span class="comment">//10 </span></span><br></pre></td></tr></table></figure>

<p>有一个公式：</p>
<ul>
<li>如果有序递增，最后的语句写法是 i+=递增的数差值</li>
<li>如果有序递减，最后的语句写法是 i-=递减的数差值</li>
</ul>
<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 18、14、10、...、-6</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">18</span>; i &gt;= -<span class="number">6</span>; i -= -<span class="number">4</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//0、0.2、0.4、0.6、0.8、1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; i += <span class="number">0.2</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Number</span>(i.toFixed(<span class="number">1</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h1><p>while语句也是一种循环结构，是一种不定范围的循环，和for各有各的用处</p>
<p>while循环没有显示定义循环变量，必须自己在while循环外先定义号循环变量，有时甚至可以没有循环变量</p>
<p>循环体内的语句，必须使循环测试条件趋向不成立，否则会死循环</p>
<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> n = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">while</span> (n &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(n);</span><br><span class="line">   n++;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//1+2+3...+100</span></span><br><span class="line"> <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">   sum += i;</span><br><span class="line">   i++;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure>

<p>寻找满足n的平方大于456789的最大整数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">while</span> (<span class="built_in">Math</span>.pow(n, <span class="number">2</span>) &lt;= <span class="number">456789</span>) &#123;</span><br><span class="line">   n++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(n);</span><br></pre></td></tr></table></figure>



<h1 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h1><p>do…while循环将循环执行条件写到了循环体的后面，这样一来，循环体一定会至少执行一次，然后再检测循环执行条件是否为true，再来决定是否再执行一次，即，无论是否对错都会执行一次</p>
<p>示例：</p>
<p>编写程序，随机生成两个变量，在[-4,4]区间，但是要求不能同时为0</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">9</span>) - <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">9</span>) - <span class="number">4</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (a == <span class="number">0</span> &amp;&amp; b == <span class="number">0</span>); <span class="comment">//只要是0就再次执行，不是0就退出</span></span><br><span class="line"><span class="built_in">console</span>.log(a, b);</span><br></pre></td></tr></table></figure>



<h1 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h1><p>共同点： break和continue都是用来控制循环结构的，主要作用是停止循环。</p>
<p>break主要是<strong>终止</strong>整个或者这一层的循环，continue是<strong>跳过这次</strong>循环，开始下一次的循环</p>
<p>continue <strong>只能在循环语句中使用</strong>，即只能在 for、while 和 do…while 语句中使用。</p>
<p>break<strong>只能在循环体内和switch语句体内使用</strong></p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript的基本数据类型和引用数据类型</title>
    <url>/article/a509b562.html</url>
    <content><![CDATA[<p>本文主要记录JavaScript的基本数据类型和引用数据类型的不同</p>
<p>先看个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">a++;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//6</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr;</span><br><span class="line">arr.push(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[1, 2, 3,4]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">//[1, 2, 3,4]</span></span><br></pre></td></tr></table></figure>

<p>可以看出这是变量赋值给另外一个变量，自身的改变不会影响到其他，这是因为变量存放在内存地址中，赋值给另外变量，即申请了另外的内存空间，所以一个变量改变并不会影响另外一个，而数组是引用类型，申明一个数组相当于在内存申请了一块空间，也就是堆内存，当我们把这个数组赋值给另外一个数组变量，其实只是把这个变量的指针指向了同一个内存空间，即两个变量数组公用一个空间，所以，一个改变即同时改变。</p>
<p>在看个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numarr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> numarr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(numarr == numarr1); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(numarr === numarr1); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log([] == []); <span class="comment">//false</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num == num1); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>可以看出数组相同，即使两两比对也是false，这是因为引用类型对比的是内存地址</p>
<p>如果像比较两个数组是否相同，可以先转字符串比较。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numarr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> numarr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(numarr.toString() == numarr1.toString()); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(numarr.toString());<span class="comment">//1,2,3</span></span><br><span class="line"><span class="built_in">console</span>.log(numarr1.toString());<span class="comment">//1,2,3</span></span><br></pre></td></tr></table></figure>

<p>顺序不一样的对比：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numarr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> numarr1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(numarr.sort().toString() == numarr1.sort().toString()); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(numarr.sort().toString());</span><br><span class="line"><span class="built_in">console</span>.log(numarr.sort().toString());</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript的循环判断算法</title>
    <url>/article/badcd860.html</url>
    <content><![CDATA[<p>算法算是在编程语言中较为独立出来的知识，一个问题可能有好几种解法，本文主要是循环语句的算法。通过问题-&gt;分析-&gt;代码的方式书写。</p>
<h1 id="问题：判断用户输入的数字是否为水仙花数？"><a href="#问题：判断用户输入的数字是否为水仙花数？" class="headerlink" title="问题：判断用户输入的数字是否为水仙花数？"></a>问题：判断用户输入的数字是否为水仙花数？</h1><p>水仙花数：是指一个 3 位数，它的每个位上的数字的立方之和等于它本身。例如：1^3 + 5^3+ 3^3 = 153</p>
<p><strong>分析</strong>：</p>
<p>既然是每个数位的立方和相加等于本身，那么重点是怎么得到这3位数的每一位数，然后让每个数的立方相加起来，那么就能判断它是否等于本身，是的话那他就是水仙花数，否则不是。</p>
<p><strong>解法一：</strong>既然是拆位，我们可以使用字符串的方法去获取每个数值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = prompt(<span class="string">&#x27;请输入一个3位数&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> a = n.charAt(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> b = n.charAt(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">var</span> c = n.charAt(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>prompt输入的是字符串，所以可以直接使用<code>charAt()</code>方法获取值</li>
<li>接下来，就是去将每个数乘以3，然后相加，然后判断是否等于本身</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">Math</span>.pow(a,<span class="number">3</span>)+<span class="built_in">Math</span>.pow(b,<span class="number">3</span>)+<span class="built_in">Math</span>.pow(c,<span class="number">3</span>) == n)&#123;</span><br><span class="line">    alert(<span class="string">&#x27;是水仙花数&#x27;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     alert(<span class="string">&#x27;不是水仙花数&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>程序到这里已经基本完成，但是有一点需要注意和改进的地方，需要注意的是：<code>Math.pow(a,3)</code>这个语句中，a是去做了隐式的转换，也就是它的类型是Number，而此时n是String，两个是弱对比，使用全等那么这个程序将永远为false，改进的是对用户输入的数字进行非法的数字进行拦截，因为我们规定是3位数，用户可不一定输入3位数，综合以上，下面是改进代码。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = prompt(<span class="string">&#x27;请输入一个3位数&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isNaN</span>(n) &amp;&amp; n&gt;=<span class="number">100</span> &amp;&amp; n&lt;= <span class="number">999</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a = n.charAt(<span class="number">0</span>)</span><br><span class="line">	<span class="keyword">var</span> b = n.charAt(<span class="number">1</span>)</span><br><span class="line">	<span class="keyword">var</span> c = n.charAt(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">var</span> d = <span class="built_in">Number</span>(n)</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Math</span>.pow(a,<span class="number">3</span>)+<span class="built_in">Math</span>.pow(b,<span class="number">3</span>)+<span class="built_in">Math</span>.pow(c,<span class="number">3</span>) === d)&#123;</span><br><span class="line">    alert(<span class="string">&#x27;是水仙花数&#x27;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     alert(<span class="string">&#x27;不是水仙花数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;请输入合法数字&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>上面的代码嵌套了一层判断，主要是去拦截用户的非法请求，减少程序的出错率，但是还有继续优化的地方，比如：用户输入错误后应该可以让它继续输入其他，输入正确则退出程序，下面是优化后的代码。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> n = prompt(<span class="string">&#x27;请输入一个3位数&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isNaN</span>(n) &amp;&amp; n&gt;=<span class="number">100</span> &amp;&amp; n&lt;= <span class="number">999</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a = n.charAt(<span class="number">0</span>)</span><br><span class="line">	<span class="keyword">var</span> b = n.charAt(<span class="number">1</span>)</span><br><span class="line">	<span class="keyword">var</span> c = n.charAt(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">var</span> d = <span class="built_in">Number</span>(n)</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Math</span>.pow(a,<span class="number">3</span>)+<span class="built_in">Math</span>.pow(b,<span class="number">3</span>)+<span class="built_in">Math</span>.pow(c,<span class="number">3</span>) === d)&#123;</span><br><span class="line">    alert(<span class="string">&#x27;是水仙花数&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     alert(<span class="string">&#x27;不是水仙花数&#x27;</span>)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;请输入合法数字&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>这样一来，当用户输入非法数值时候可以重新输入，而输入正确，则显示结果并且结束程序。</li>
</ul>
<p><strong>解法二：</strong>我们可以使用数学的方式得到这三位数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">parseInt</span>(n / <span class="number">100</span>); <span class="comment">//得到百位数</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">parseInt</span>((n / <span class="number">10</span>) % <span class="number">10</span>); <span class="comment">//得到十位数</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="built_in">parseInt</span>(n % <span class="number">10</span>); <span class="comment">//得到个位数</span></span><br></pre></td></tr></table></figure>

<ul>
<li>这个是结合了取余的方法，在结合解法一，最终代码如下：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> n = <span class="built_in">Number</span>(prompt(<span class="string">&#x27;请输入一个3位数&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isNaN</span>(n) &amp;&amp; n&gt;=<span class="number">100</span> &amp;&amp; n&lt;= <span class="number">999</span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> a = <span class="built_in">parseInt</span>(n / <span class="number">100</span>); <span class="comment">//得到百位数</span></span><br><span class="line">	<span class="keyword">var</span> b = <span class="built_in">parseInt</span>((n / <span class="number">10</span>) % <span class="number">10</span>); <span class="comment">//得到十位数</span></span><br><span class="line">	<span class="keyword">var</span> c = <span class="built_in">parseInt</span>(n % <span class="number">10</span>); <span class="comment">//得到个位数</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Math</span>.pow(a,<span class="number">3</span>)+<span class="built_in">Math</span>.pow(b,<span class="number">3</span>)+<span class="built_in">Math</span>.pow(c,<span class="number">3</span>) === n)&#123;</span><br><span class="line">    alert(<span class="string">&#x27;是水仙花数&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     alert(<span class="string">&#x27;不是水仙花数&#x27;</span>)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;请输入合法数字&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="问题：计算1-2-3-……-99-100的和"><a href="#问题：计算1-2-3-……-99-100的和" class="headerlink" title="问题：计算1+2+3+……+99+100的和"></a>问题：计算1+2+3+……+99+100的和</h1><p>分析：每次相加都是在原来基础上加1，这个时候我们需要一个变量来存储他们的和。思路是：第一个是1，那么把1存起来，然后第二个数是2，再和之前的存起来，这就达到一个不断累加的效果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">    sum = sum +i;<span class="comment">//0+1、1+2、3+3...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum)<span class="comment">//5050</span></span><br></pre></td></tr></table></figure>

<ul>
<li>以上涉及到的是一个累加的变量，我们去定义了一个变量，把和不断的累加起来，得到最终的结果，除了使用for，我们还可以使用while循环</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">	sum = sum+i;</span><br><span class="line">	i++</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum)<span class="comment">//5050</span></span><br></pre></td></tr></table></figure>



<h1 id="问题：1-100中哪个数字除以3余1、除以4余2，除以5余3？"><a href="#问题：1-100中哪个数字除以3余1、除以4余2，除以5余3？" class="headerlink" title="问题：1~100中哪个数字除以3余1、除以4余2，除以5余3？"></a>问题：1~100中哪个数字除以3余1、除以4余2，除以5余3？</h1><p>分析：这个题目应该想到的是穷举法，我把每个数去判断一下，不就找出来了吗</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">1</span> &amp;&amp; i % <span class="number">4</span> == <span class="number">2</span> &amp;&amp; i % <span class="number">5</span> == <span class="number">3</span>)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="问题：寻找最小的满足n²-gt-456789的整数n"><a href="#问题：寻找最小的满足n²-gt-456789的整数n" class="headerlink" title="问题：寻找最小的满足n²&gt;456789的整数n"></a>问题：寻找最小的满足n²&gt;456789的整数n</h1><p>分析：这里需要注意的是最小满足，即找到n²大于456789的最小数，比如：1²是否大于456789，2²是否大于456789，以此类推。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span>(n*n&lt;=<span class="number">456789</span>)&#123;</span><br><span class="line">    n++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(n)<span class="comment">//676</span></span><br></pre></td></tr></table></figure>

<h1 id="问题：小兔子拔萝卜，第一天拔一个，第二天拔两个，第几天可以拔完500个"><a href="#问题：小兔子拔萝卜，第一天拔一个，第二天拔两个，第几天可以拔完500个" class="headerlink" title="问题：小兔子拔萝卜，第一天拔一个，第二天拔两个，第几天可以拔完500个"></a>问题：小兔子拔萝卜，第一天拔一个，第二天拔两个，第几天可以拔完500个</h1><p>分析:这其实还是一个自增问题，什么时候拔完500个，也就是<strong>累计超过500</strong>，那么判断条件就出来了，接下来这个天数是自增一，而且天数对应着当天拔萝卜的数量，所以自增一，思路是这样：第一天拔一个，好，现在存起来，第二天拔两个，存起来，直到这个存起来的数大于等于500的时候，我们就知道是第几天了，也就得到这个问题的解，另外，这题目<strong>和上面的1加到100有类似地方</strong>，只不过判断的条件换了，换成了<strong>对比累加的变量</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;<span class="comment">//这里的i有连层代表，一个是天数，一个是当天拔萝卜大的数量</span></span><br><span class="line"><span class="keyword">while</span>(sum &lt;=<span class="number">500</span>)&#123;</span><br><span class="line">    sum = sum +i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i)<span class="comment">//33</span></span><br></pre></td></tr></table></figure>

<ul>
<li>但是以上代码是存在问题的，我们i++是先使用后加一，所以导致后面输出的会再次加一，导致多了一次的天数解决办法就是去减一，这种出一情况往往就是要输出那个自增的值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;<span class="comment">//这里的i有连层代表，一个是天数，一个是当天拔萝卜大的数量</span></span><br><span class="line"><span class="keyword">while</span>(sum &lt;=<span class="number">500</span>)&#123;</span><br><span class="line">    sum = sum +i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i - <span class="number">1</span>)<span class="comment">//32</span></span><br></pre></td></tr></table></figure>

<h1 id="问题：有由用户输入数字n，求算术的值"><a href="#问题：有由用户输入数字n，求算术的值" class="headerlink" title="问题：有由用户输入数字n，求算术的值"></a>问题：有由用户输入数字n，求算术的值</h1><p>这个算式如下：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211101133126.png"></p>
<p>分析：我们需要知道这题目是要干什么，这题目其实是把这些分数相加在一起，规律就是，分母是从2开始，每次自增1，直到n结束，分子则是比分母+1,</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> zi = <span class="number">2</span>;<span class="comment">//定义分子的初值</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;<span class="comment">//定义累加数值</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">5</span></span><br><span class="line"><span class="comment">//只要用户输入的数字大于分子，那么就循环累加</span></span><br><span class="line"><span class="keyword">while</span>(zi &lt;= n)&#123;</span><br><span class="line">    sum = sum + (zi+<span class="number">1</span>)/ zi;</span><br><span class="line">    zi++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>题目写到这里算是基本完成，但是我们需要注意一点，分数得到的数值往往会是小数，而JavaScript采用了IEEE754二进制浮点数算术标准,存在精度丢失情况，我们使用toFix()解决，保留小数点几位。除了使用while的方式，其实还可以使用for循环</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> zi = <span class="number">2</span>;<span class="comment">//定义分子的初值</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;<span class="comment">//定义累加数值</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">5</span></span><br><span class="line"><span class="comment">//只要用户输入的数字大于分子，那么就循环累加</span></span><br><span class="line"><span class="keyword">while</span>(zi &lt;= n)&#123;</span><br><span class="line">    sum = sum + (zi+<span class="number">1</span>)/ zi;</span><br><span class="line">    zi++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum.toFix(<span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<p>for循环解法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> n = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">	sum = (i + <span class="number">1</span>) / i;</span><br><span class="line">	i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum.toFixed(<span class="number">2</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li>for这种解法看着更加清爽一些和易于理解。</li>
</ul>
<h1 id="问题：求n的阶乘"><a href="#问题：求n的阶乘" class="headerlink" title="问题：求n的阶乘"></a>问题：求n的阶乘</h1><p>分析：阶乘是什么？3的阶乘是<code>1*2*3</code>，那么就是每次递增1，只要是小于等于就去循环累乘。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> n = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = n;i&lt;=n;i++)&#123;</span><br><span class="line">    result = result *i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>

<h1 id="问题：圆周率可以由下面的莱布尼次级数公式计算出来，请由用户输入参数n计算圆周率"><a href="#问题：圆周率可以由下面的莱布尼次级数公式计算出来，请由用户输入参数n计算圆周率" class="headerlink" title="问题：圆周率可以由下面的莱布尼次级数公式计算出来，请由用户输入参数n计算圆周率"></a>问题：圆周率可以由下面的莱布尼次级数公式计算出来，请由用户输入参数n计算圆周率</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">var</span> item = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">var</span> n = <span class="built_in">Number</span>(prompt(<span class="string">&#x27;请输入数字&#x27;</span>));</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">     item *= i / (<span class="number">2</span> * i + <span class="number">1</span>);</span><br><span class="line">     sum += item;</span><br><span class="line">   &#125;</span><br><span class="line">   alert((<span class="number">1</span> + sum) * <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h1 id="问题：寻找1-100的所有质数"><a href="#问题：寻找1-100的所有质数" class="headerlink" title="问题：寻找1~100的所有质数"></a>问题：寻找1~100的所有质数</h1><p>分析：只能够被1和它本身整除，最小质数2，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">outer:<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">2</span>;j&lt;i;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i%j == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span> outer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>outer是for的别名，continue是跳到指定的for循环。</li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript的深克隆和浅克隆</title>
    <url>/article/b9182662.html</url>
    <content><![CDATA[<p>本文主要介绍引用数据类型的浅克隆和深克隆</p>
<p>我们知道如果把数组赋值给另外数组的话，如果其中一个改变另外一个也受其影响，所以我们就需要克隆或者说拷贝一份相同的引用类型数据，不让它们相互之间影响。</p>
<h1 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h1><p>浅克隆是指只克隆数组第一层，如果是多为数组，或者数组中的项是其他引用数据类型，则不克隆其他层</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> result = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i  = <span class="number">0</span>; i &lt;arr.lenght;i++)&#123;</span><br><span class="line">    result.push(arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a>深克隆</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepclone</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr.lenght;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(arr[i]))&#123;</span><br><span class="line">            <span class="comment">//递归</span></span><br><span class="line">            result.push(deepclone(arr[i]))</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            result.push(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr2 = deepclone(arr)</span><br><span class="line"><span class="built_in">console</span>.log(arr2)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>深克隆和浅克隆</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript的数组</title>
    <url>/article/ae208be1.html</url>
    <content><![CDATA[<p>本文主要介绍JavaScript的数组及数组的各种方法</p>
<h1 id="数组的简介与定义"><a href="#数组的简介与定义" class="headerlink" title="数组的简介与定义"></a>数组的简介与定义</h1><p><strong>什么是数组：</strong></p>
<p>数组（Array），用来<strong>存储一组相关的值</strong>，从而方便进行求和、计算平均数、逐项遍历等操作</p>
<p><strong>怎么定义数组：</strong></p>
<ul>
<li><p>使用数组字面量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ary = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>使用Array构造函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)<span class="comment">//这样写有个缺点,既我想输入一个数字，其实只是去定义长度</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用构造函数定义长度</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">4</span>)<span class="comment">//定义数组长度为4，值为undefined</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>访问数组项：</strong></p>
<p>通过下标访问，下标从0开始</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>])<span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<p>下标越界的时候，不会报错，会返回undefined，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">5</span>])<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>

<p><strong>数组长度：</strong></p>
<p>数组也有长度，调用lenght属性，返回该数组的长度</p>
<p><strong>数组类型检测：</strong></p>
<p>数组用typeof检测结果是object，Array.isArray()方法可以用来检测数组</p>
<p><strong>更改数组项：</strong></p>
<p>数组并不是只读，我们可以修改其中任何项的值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [1,2,3,4,5]</span><br><span class="line">arr[2] = 6</span><br><span class="line">console.log(arr)//1,2,6,4,5</span><br></pre></td></tr></table></figure>

<p>但是如果创建一个超过数组下标，则中间的值为empty</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">arr[<span class="number">7</span>] = <span class="number">6</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//1,2,3,4,5,empty*2,6</span></span><br></pre></td></tr></table></figure>

<p><strong>数组遍历：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr.lenght;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="数组的常用方法"><a href="#数组的常用方法" class="headerlink" title="数组的常用方法"></a>数组的常用方法</h1><h2 id="push-方法"><a href="#push-方法" class="headerlink" title="push()方法"></a>push()方法</h2><p>在数组尾部插入新项：参数就是要插入的项，如果要插入多项，可以用逗号隔开，使用push()方法后，数组会立即改变</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">arr.push(<span class="string">&#x27;50&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//1, 2, 3, 4, 5, &#x27;50&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>需要注意的是arr.push()返回的值不是新数组，而是新数组的长度。</li>
</ul>
<h2 id="pop-方法"><a href="#pop-方法" class="headerlink" title="pop()方法"></a>pop()方法</h2><p>在数组尾部删除一项：没有参数，只能删除一项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> a = arr.pop()</span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//1，2，3，4</span></span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//5</span></span><br></pre></td></tr></table></figure>

<ul>
<li>返回的值是被删除的项。</li>
</ul>
<h2 id="unshift-方法"><a href="#unshift-方法" class="headerlink" title="unshift()方法"></a>unshift()方法</h2><p>在数组头部插入新项：参数就是要插入的项，如果要插入多项，可以用逗号隔开，使用unshift()方法后，数组会立即改变</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">arr.unshift(<span class="string">&#x27;50&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//&#x27;50&#x27;,1, 2, 3, 4, 5</span></span><br></pre></td></tr></table></figure>

<ul>
<li>需要注意的是arr.unshift()返回的值不是新数组，而是新数组的长度。</li>
</ul>
<h2 id="shift-方法"><a href="#shift-方法" class="headerlink" title="shift()方法"></a>shift()方法</h2><p>在数组头部删除一项：没有参数，只能删除一项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> a = arr.shift()</span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//2，3，4</span></span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>返回的值是被删除的项。</li>
</ul>
<h2 id="splice-方法"><a href="#splice-方法" class="headerlink" title="splice()方法"></a>splice()方法</h2><p>可以对数组的<strong>增删改</strong>，它的本质就是去改变数组，参数第一和第二位必须是整数。</p>
<blockquote>
<p><strong><code>splice()</code></strong> 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组。——MDN</p>
</blockquote>
<p><strong>替换数组：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.splice(<span class="number">3</span>, <span class="number">3</span>, <span class="string">&#x27;new&#x27;</span>, <span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[1, 2, 3, &#x27;new&#x27;, 6,7]</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//[4,5]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>参数第一个代表：下标3；参数第二个参数代表：连续替换3个项；即：在<strong>下标3开始（包含下标3）</strong>，连续选择三个替换，可以看到，替换的超出原有的数组，即增加数组长度</li>
<li>返回值是被替换的值</li>
</ul>
<p><strong>插入指定位置项：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.splice(<span class="number">3</span>, <span class="number">0</span>, <span class="string">&#x27;new&#x27;</span>, <span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[1, 2, 3, &#x27;new&#x27;, 6, 7, 4, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//[]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>把第二个参数改为0，即在<strong>下标的前面</strong>插入数据</li>
<li>因为是插入数据，返回值为空数组</li>
</ul>
<p><strong>删除指定位置项：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.splice(<span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//[4,5]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>不写替换的值，则从下标3开始（包括下标3），连续2位删除</li>
<li>返回值是删除的值</li>
</ul>
<p>以下情况都不建议刻意书写，很容易掉坑，js是弱控制语言，所以并不会报错：</p>
<p>只有一个参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.splice(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[1, 2]</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//[3, 4, 5]</span></span><br></pre></td></tr></table></figure>

<p>另外这种第二参数是非整数，会被值为0，变成添加，不过不建议这样写，<strong>第二参数是会被忽略的</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.splice(<span class="number">2</span>, <span class="string">&#x27;new&#x27;</span>, <span class="string">&#x27;old&#x27;</span>, <span class="string">&#x27;lsf&#x27;</span>, <span class="string">&#x27;cxz&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[1, 2, &#x27;old&#x27;, &#x27;lsf&#x27;, &#x27;cxz&#x27;, 3, 4, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//[]</span></span><br></pre></td></tr></table></figure>

<p>再看错误例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.splice(<span class="string">&#x27;new&#x27;</span>, <span class="string">&#x27;old&#x27;</span>);<span class="comment">//开始参数不是整数</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//1, 2, 3, 4, 5</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//[]</span></span><br></pre></td></tr></table></figure>

<h2 id="slice-方法"><a href="#slice-方法" class="headerlink" title="slice()方法"></a>slice()方法</h2><p>用来得到子数组，类似于字符串的slice方法，会返回<strong>从a下标开始，b下标结束（不包括b下标）的子串，a,b可以是负数，a，b必须是同时都是负数，否则得到空数组，表示倒数第几位数组项，a必须小于b，不会改变数组</strong></p>
<p><strong>正确规范的写法：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.slice(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//[3,4,5]</span></span><br></pre></td></tr></table></figure>

<p>倒数获取：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.slice(<span class="number">2</span>,-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//[3,4]</span></span><br></pre></td></tr></table></figure>

<p><strong>下面是错误示范：</strong></p>
<p>很明显，下面例子中，获取的下标越界了，但是不会报错，也不会出现undefine，只会截取到数组结尾</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.slice(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//[3,4,5]</span></span><br></pre></td></tr></table></figure>
<p>不允许去写a&gt;b，否则获取不到，返回空数组，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.slice(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//[]</span></span><br></pre></td></tr></table></figure>

<p>第一参数如果是负数，第二参数就必须是负数，否则返回空数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.slice(-<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//[]</span></span><br></pre></td></tr></table></figure>

<h2 id="join-方法"><a href="#join-方法" class="headerlink" title="join()方法"></a>join()方法</h2><p>使数组转为字符串，<strong>参数表示以什么字符作为连接符，如果留空则默认以逗号分隔</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">22</span>,<span class="number">33</span>,<span class="number">555</span>]</span><br><span class="line">arr.join()<span class="comment">//&quot;22,33,555&quot;</span></span><br><span class="line">arr.join(<span class="string">&#x27;&#x27;</span>)<span class="comment">//&#x27;2233555&#x27;</span></span><br><span class="line">arr.join(<span class="string">&#x27;-&#x27;</span>)<span class="comment">//&quot;22-33-555&quot;</span></span><br><span class="line">arr.toString()<span class="comment">//&quot;22,33,555&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="split-方法"><a href="#split-方法" class="headerlink" title="split()方法"></a>split()方法</h2><p>使字符串转为数组，参数表示以什么字符拆分字符串，一般不留空，只留空字符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abcdefg&#x27;</span></span><br><span class="line">str.split()<span class="comment">//[&#x27;abcdefg&#x27;]</span></span><br><span class="line">str.split(<span class="string">&#x27;&#x27;</span>)<span class="comment">//[&#x27;a&#x27; ,&#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;,&#x27;g&#x27;]</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&#x27;a-b-c-d-e-f-g&#x27;</span></span><br><span class="line">str.split(<span class="string">&#x27;-&#x27;</span>)<span class="comment">//[&#x27;a&#x27; ,&#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;,&#x27;g&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2 id="concat-方法"><a href="#concat-方法" class="headerlink" title="concat()方法"></a>concat()方法</h2><p>合并多个数组。不会改变原数组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr1 = [1,2,3,4,5];</span><br><span class="line">var arr2 = [6,7,8,9];</span><br><span class="line">var arr3 = [10,11,12];</span><br><span class="line">var arr = arr1.concat(arr2,arr3);</span><br><span class="line">console.log(arr)//[1,2,3,4,5,6,7,8,9,10,11,12]</span><br></pre></td></tr></table></figure>

<h2 id="reverse-方法"><a href="#reverse-方法" class="headerlink" title="reverse()方法"></a>reverse()方法</h2><p>将数组的全部项顺序置反，立即更改原来数组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [1,2,3]</span><br><span class="line">arr.reverse()//[3,2,1]</span><br></pre></td></tr></table></figure>

<h2 id="indexof-方法"><a href="#indexof-方法" class="headerlink" title="indexof()方法"></a>indexof()方法</h2><p>搜索数组中的元素，并返回该元素首次出现的下标，如果元素不存在，返回-1，参数是和数组的项是全等关系，也就是数组中有数字类型2，使用indexof查找字符串类型2，得到结果是-1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>]</span><br><span class="line">arr.indexof(<span class="number">3</span>)<span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<h2 id="includes-方法"><a href="#includes-方法" class="headerlink" title="includes()方法"></a>includes()方法</h2><p>判断数组中是否存在一个指定的值，返回的是布尔值，参数也是和数组项时全等关系。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>]</span><br><span class="line">arr.includes(<span class="number">3</span>)<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript的递归算法</title>
    <url>/article/d5117ec1.html</url>
    <content><![CDATA[<p>本文主要记录JavaScript的递归算法</p>
<h1 id="什么是递归？"><a href="#什么是递归？" class="headerlink" title="什么是递归？"></a>什么是递归？</h1><p>函数的内部语句<strong>可以调用这个函数自身</strong>，从而<strong>发起对函数的一次迭代</strong>，在新的迭代中，又会执行调用函数自身的语句，从而又产生一次迭代，当函数执行到某一次时，不再执行新的迭代，函数被一层一层返回，函数被递归</p>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>下面是1+2+3+4和是多少的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> num + fun(num-<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">fun(<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p>分析：</p>
<p>首先我们来分析数据的走向：</p>
<ul>
<li>参数是4，判断条件不成立，即执行 <code>return num + fun(num-1)</code>语句，这里就调用了函数自身，num是4，<code>fun(num-1)</code>传入的参数是3，完成了第一次调用。</li>
<li>这个3不等于1，再次执行<code>return num + fun(num-1)</code>语句，num是3，<code>fun(num-1)</code>传入的参数是2，完成了第二次调用。</li>
<li>这个2不等于1，再次执行<code>return num + fun(num-1)</code>语句，num是2，<code>fun(num-1)</code>传入的参数是1,完成了第三次调用</li>
<li>参数为1，判断条件成立，返回1。</li>
</ul>
<p>然后分析函数递归走向：</p>
<ul>
<li>第三次调用<code>fun(num-1</code>)返回的是1，num是2，相加就是3，返回的就是3</li>
<li>第二次调用<code>fun(num-1</code>)返回的是3，也就是刚才返回过来的数值，num是3，相加就是6，返回的就是6</li>
<li>第一次调用<code>fun(num-1</code>)返回的是6，也就是刚才返回过来的数值，num是4，相加就是10，返回的就是10</li>
</ul>
<p>这就是递归的思路，一层一层的调用，然后再一层一层返回，递归不能无消止的调用，其中是有一个条件不断趋向于等于这个判断，这个判断成立之后返回一个东西，然后函数就会一层一层递归出去。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/digui.jpg"></p>
<h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>递归非常简单的几句代码就可以实现，但是缺点也不同小视，那就是损耗内存，函数调用会使用栈来保存临时变量。每调用一个函数，都会将临时变量封装为栈帧压入内存栈，等函数执行完成返回时，才出栈。</p>
<h1 id="规避递归堆栈溢出"><a href="#规避递归堆栈溢出" class="headerlink" title="规避递归堆栈溢出"></a>规避递归堆栈溢出</h1><p>规避递归堆栈溢出就是设置最大的递归次数，超过这个次数，我们就手动报错，当然这个数字事先无法估算，只适合一些最大深度比较低的递归调用，并非最佳实践。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params">num</span>)</span>&#123;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">2</span>) &#123;</span><br><span class="line">       <span class="built_in">console</span>.error(<span class="string">&#x27;超过最大递归&#x27;</span>);</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> num + fun(num-<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">fun(<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript的表达式和运算符</title>
    <url>/article/f5797da9.html</url>
    <content><![CDATA[<p>本文主要介绍JavaScript的表达式和运算符。</p>
<h1 id="什么是表达式和运算符"><a href="#什么是表达式和运算符" class="headerlink" title="什么是表达式和运算符"></a>什么是表达式和运算符</h1><p>运算符：也叫操作符，是一种符号。通过运算符可以对一个或多个值进行运算，并获取运算结果。</p>
<p>表达式：由数字、运算符、变量的组合（组成的式子）。</p>
<p>表达式最终都会有一个运算结果，我们将这个结果称为表达式的返回值。</p>
<p>比如：<code>+</code>、<code>*</code>、<code>/</code>、<code>-</code> 都是运算符，而<code>（3+5）/2</code>则是表达式。</p>
<p>比如：typeof 就是运算符，可以来获得一个值的类型。它会将该值的类型以字符串的形式返回，返回值可以是 number string boolean undefined object。</p>
<h1 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h1><table>
<thead>
<tr>
<th align="center">意义</th>
<th align="center">运算符</th>
</tr>
</thead>
<tbody><tr>
<td align="center">加</td>
<td align="center">+</td>
</tr>
<tr>
<td align="center">减</td>
<td align="center">-</td>
</tr>
<tr>
<td align="center">乘</td>
<td align="center">*</td>
</tr>
<tr>
<td align="center">除</td>
<td align="center">/</td>
</tr>
<tr>
<td align="center">取余</td>
<td align="center">%</td>
</tr>
</tbody></table>
<p><strong>这里主要介绍取余：</strong></p>
<p>示例：如何取到375里面的3、7、5这三个数字呢</p>
<ul>
<li>得到3的方法：375除以100，得到3.75然后取整，得到3。即：parseInt(375/100)</li>
<li>得到7的方法：375除以100，余数是75，除以10，得到7.5，取整。即：parseInt((375% 100) / 10)</li>
<li>得到5的方法：375除以10，余数就是5。即：375% 10</li>
</ul>
<p><strong>隐式类型转换：</strong></p>
<p>如果参与数学运算符的某操作数不是数字类型，那么JavaScript会自动将操作数转换为数字型其中有字符串，那么就不是进行计算而是进行拼接</p>
<p>本质是内部调用Number函数。</p>
<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span>*<span class="string">&#x27;4&#x27;</span> <span class="comment">// 12</span></span><br><span class="line"><span class="literal">true</span> + <span class="literal">true</span><span class="comment">//2</span></span><br><span class="line"><span class="number">3</span>* <span class="string">&#x27;2天&#x27;</span><span class="comment">//NaN</span></span><br></pre></td></tr></table></figure>

<p><strong>IEEE754原则</strong></p>
<p>在JavaScript中，有些小数的数学运算不是很精准，这是因为JavaScript采用了IEEE754二进制浮点数算术标准，它是计算机底层编译的标准。有时候会产生误差</p>
<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> <span class="comment">//0.30000000000000004</span></span><br></pre></td></tr></table></figure>

<p>解决办法：</p>
<p><strong>调用数字的toFixed方法</strong>保留指定的小数位数</p>
<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="number">0.1</span> + <span class="number">0.2</span>).toFixed(<span class="number">2</span>)<span class="comment">//0.30</span></span><br></pre></td></tr></table></figure>

<p><strong>幂和开根号</strong></p>
<p>JavaScript中没有提供幂计算、开根号的运算符。需要使用Math对象的相关方法进行计算</p>
<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//幂</span></span><br><span class="line"><span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">3</span>)<span class="comment">//8 </span></span><br><span class="line"><span class="built_in">Math</span>.pow(<span class="number">3</span>,<span class="number">2</span>)<span class="comment">//9</span></span><br><span class="line"><span class="comment">//开根号</span></span><br><span class="line"><span class="built_in">Math</span>.sqrt(<span class="number">81</span>)<span class="comment">//9</span></span><br><span class="line"><span class="built_in">Math</span>.sqry(-<span class="number">81</span>)<span class="comment">//NaN</span></span><br><span class="line"><span class="comment">//向上(大)取整</span></span><br><span class="line"><span class="built_in">Math</span>.ceil(<span class="number">2.4</span>)<span class="comment">//3</span></span><br><span class="line"><span class="comment">//向下(小)取整</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="number">2.4</span>)<span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<p><strong>算数运算符的运算规则</strong></p>
<ol>
<li>先算乘除、后算加减。</li>
<li>小括号<code>( )</code>：能够影响计算顺序，且可以嵌套。没有中括号、没有大括号，只有小括号。</li>
<li>百分号：取余。只关心余数。</li>
</ol>
<h1 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h1><table>
<thead>
<tr>
<th align="center">意义</th>
<th align="center">运算符</th>
</tr>
</thead>
<tbody><tr>
<td align="center">大于</td>
<td align="center">&gt;</td>
</tr>
<tr>
<td align="center">小于</td>
<td align="center">&lt;</td>
</tr>
<tr>
<td align="center">大于等于</td>
<td align="center">&gt;=</td>
</tr>
<tr>
<td align="center">小于等于</td>
<td align="center">&lt;=</td>
</tr>
<tr>
<td align="center">等于</td>
<td align="center">==</td>
</tr>
<tr>
<td align="center">不等于</td>
<td align="center">!=</td>
</tr>
<tr>
<td align="center">全等于</td>
<td align="center">===</td>
</tr>
<tr>
<td align="center">不全等于</td>
<td align="center">!==</td>
</tr>
</tbody></table>
<p>关系运算符的结果是布尔值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">8</span>&gt;<span class="number">5</span> <span class="comment">//true</span></span><br><span class="line"><span class="number">8</span>&gt;=<span class="number">8</span><span class="comment">//true</span></span><br><span class="line"><span class="number">8</span>&lt;=<span class="number">11</span><span class="comment">//true</span></span><br><span class="line"><span class="number">7</span>&lt;<span class="number">4</span><span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p>判断一个数字是否等于使用<code>==</code>，判断数字和数字类型是否相等则使用<code>===</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span> == <span class="string">&#x27;3&#x27;</span><span class="comment">//true</span></span><br><span class="line"><span class="number">3</span> === <span class="string">&#x27;3&#x27;</span><span class="comment">//false</span></span><br><span class="line"><span class="number">0</span> == <span class="literal">undefined</span> <span class="comment">//false</span></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">null</span> <span class="comment">//true</span></span><br><span class="line"><span class="literal">undefined</span> === <span class="literal">null</span> <span class="comment">//false</span></span><br><span class="line"><span class="literal">NaN</span> == <span class="literal">NaN</span> <span class="comment">//false</span></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span><span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p><strong>如何判断变量值为NaN?</strong></p>
<p>使用isNaN传入变量值，会返回布尔值，但是因为其原理还是使用Number函数，所以就会出现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(<span class="literal">undefined</span>)<span class="comment">//true</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>)<span class="comment">//0</span></span><br></pre></td></tr></table></figure>

<p>undefined是一个类型，<strong>它的值只有一个</strong>，就是undefined，undefined不是NaN。</p>
<p><strong>不相等和不全等</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span> != <span class="number">6</span> <span class="comment">//true</span></span><br><span class="line"><span class="number">5</span> !== <span class="number">6</span> <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span> != <span class="string">&#x27;5&#x27;</span> <span class="comment">//false</span></span><br><span class="line"><span class="number">5</span> !==<span class="string">&#x27;5&#x27;</span> <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>Javascript没有连比的，需要实现连比需要借助逻辑运算符</p>
<h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><table>
<thead>
<tr>
<th align="center">意义</th>
<th align="center">运算符</th>
</tr>
</thead>
<tbody><tr>
<td align="center">非</td>
<td align="center">！</td>
</tr>
<tr>
<td align="center">与</td>
<td align="center">&amp;&amp;</td>
</tr>
<tr>
<td align="center">或</td>
<td align="center">||</td>
</tr>
</tbody></table>
<p>非运算也可以称为置反运算，它是一个单目运算符，只需要一个操作数，运算结果一定是布尔值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!<span class="literal">true</span> <span class="comment">//false</span></span><br><span class="line">!<span class="literal">false</span>  <span class="comment">//true</span></span><br><span class="line">!<span class="number">0</span> <span class="comment">//true</span></span><br><span class="line">!<span class="literal">undefined</span> <span class="comment">//true</span></span><br><span class="line">!<span class="string">&#x27;&#x27;</span> <span class="comment">//true</span></span><br><span class="line">!<span class="string">&#x27;123&#x27;</span><span class="comment">//false</span></span><br><span class="line">!!<span class="literal">true</span> <span class="comment">//true</span></span><br><span class="line">!!<span class="number">0</span> <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p>与运算是双目运算符，<strong>只有两边真才是真，否则为假</strong></p>
<p>或运算时双目运算符，<strong>只要有一个真就为真，都假就为假</strong></p>
<p><strong>短路计算</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span> &amp;&amp; <span class="number">6</span> <span class="comment">//6</span></span><br><span class="line"><span class="literal">undefined</span> &amp;&amp; <span class="number">15</span> <span class="comment">//undefined</span></span><br><span class="line"><span class="literal">null</span> &amp;&amp; <span class="number">2</span> <span class="comment">//null</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>&amp;&amp; <span class="number">16</span> <span class="comment">//&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27; &#x27;</span>&amp;&amp; <span class="number">16</span> <span class="comment">//16</span></span><br><span class="line"><span class="literal">NaN</span> &amp;&amp;  <span class="literal">undefined</span><span class="comment">//NaN</span></span><br></pre></td></tr></table></figure>

<p>与运算会去看第一个数值，如果为假，那么后面就不会再去看，直接返回第一个数值，如果第一个数值为true，那么会去看第二个数值并且输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 || 6 //5</span><br><span class="line">undefined || 15 //15</span><br><span class="line">null || 2 //2</span><br><span class="line">&#x27;&#x27; || 16 //16</span><br><span class="line">&#x27; &#x27; || 16 //&#x27; &#x27;</span><br><span class="line">NaN ||  undefined //undefined</span><br></pre></td></tr></table></figure>

<p>或运算会去整体看，如果有一个真，那么就直接输出排在前面的真，如果都为假，那么就输出后面那个假的值</p>
<p>小结：</p>
<table>
<thead>
<tr>
<th align="center">表达式</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">a&amp;&amp;b(真，真)</td>
<td align="center">b</td>
</tr>
<tr>
<td align="center">a&amp;&amp;b(真，假)</td>
<td align="center">b</td>
</tr>
<tr>
<td align="center">a&amp;&amp;b(假，真)</td>
<td align="center">a</td>
</tr>
<tr>
<td align="center">a&amp;&amp;b(假，假)</td>
<td align="center">a</td>
</tr>
<tr>
<td align="center">a||b（真，真）</td>
<td align="center">a</td>
</tr>
<tr>
<td align="center">a||b（真，假）</td>
<td align="center">a</td>
</tr>
<tr>
<td align="center">a||b(假，真)</td>
<td align="center">b</td>
</tr>
<tr>
<td align="center">a||b(假，假)</td>
<td align="center">b</td>
</tr>
</tbody></table>
<p><strong>逻辑运算的顺序:  非-&gt;与-&gt;或</strong></p>
<h1 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h1><table>
<thead>
<tr>
<th align="center">意义</th>
<th align="center">运算符</th>
</tr>
</thead>
<tbody><tr>
<td align="center">赋值</td>
<td align="center">=</td>
</tr>
<tr>
<td align="center">加等于（a += 5  等价于a = a +5）</td>
<td align="center">+=</td>
</tr>
<tr>
<td align="center">减等于（a -= 5  等价于a = a -5）</td>
<td align="center">-=</td>
</tr>
<tr>
<td align="center">乘等于（a *= 5  等价于a = a *5）</td>
<td align="center">*=</td>
</tr>
<tr>
<td align="center">除等于（a /= 5  等价于a = a /5）</td>
<td align="center">/=</td>
</tr>
<tr>
<td align="center">取余等于（a %= 5  等价于a = a %5）</td>
<td align="center">%=</td>
</tr>
<tr>
<td align="center">自增（在自身加1）</td>
<td align="center">++</td>
</tr>
<tr>
<td align="center">自减（在自身减1）</td>
<td align="center">–</td>
</tr>
</tbody></table>
<p>赋值运算也会产生值，也就是会返回值，这就意味着，可以连续使用赋值运算符，比如：<code>var a = b= c = 15</code></p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211030170358.png"></p>
<h1 id="综合表达式"><a href="#综合表达式" class="headerlink" title="综合表达式"></a>综合表达式</h1><p>综合运算即把所有的运算加在一起，这就需要一个运算顺序了：非运算-&gt;数学运算-&gt;关系运算-&gt;逻辑运算</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span> &lt; <span class="number">3</span> + <span class="number">3</span>; <span class="comment">//true</span></span><br><span class="line"><span class="number">3</span> &gt; <span class="number">2</span> &amp;&amp; <span class="number">8</span> &gt; <span class="number">3</span> + <span class="number">4</span>; <span class="comment">//true</span></span><br><span class="line"><span class="number">3</span> &gt; <span class="number">2</span> &amp;&amp; <span class="number">8</span> &gt; <span class="number">3</span> + <span class="number">5</span>; <span class="comment">//false</span></span><br><span class="line">!<span class="number">13</span> &lt; <span class="number">5</span> - <span class="number">3</span>; <span class="comment">//true</span></span><br><span class="line">!<span class="number">13</span> &lt; <span class="number">5</span> - <span class="number">5</span>; <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p><strong>变量范围表示</strong></p>
<p>验证a是介于5到12之间：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt;=5 &amp;&amp; a&lt;=12</span><br></pre></td></tr></table></figure>

<h1 id="润年判断"><a href="#润年判断" class="headerlink" title="润年判断"></a>润年判断</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> year = <span class="built_in">Number</span>(prompt(<span class="string">&#x27;请输入年份&#x27;</span>));</span><br><span class="line">     <span class="comment">//能被4整除且不能被100整除</span></span><br><span class="line">     <span class="comment">//能被100整除也能被400整除</span></span><br><span class="line">     <span class="keyword">if</span> (</span><br><span class="line">       (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) ||</span><br><span class="line">       (year % <span class="number">100</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">400</span> != <span class="number">0</span>)</span><br><span class="line">     ) &#123;</span><br><span class="line">       alert(<span class="string">&#x27;是闰年&#x27;</span>);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       alert(<span class="string">&#x27;不是闰年&#x27;</span>);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript随机函数的公式</title>
    <url>/article/6556cfc2.html</url>
    <content><![CDATA[<p>本文主要介绍JavaScript的随机函数的公式。</p>
<p>再JavaScript中，想获取随机函数需要使用<code>Math.random()</code>，该函数会返回0~1之间的小数，但是这不符合我们一般的使用，我们一般会给出一个区间，然后在该区间随机一个数：</p>
<p>得到[a,b]区间的整数：公式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span> (<span class="built_in">Math</span>.random() * (b-a+<span class="number">1</span>) ) + a</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript的闭包</title>
    <url>/article/6341a1da.html</url>
    <content><![CDATA[<p>本文主要记录闭包的基本概念</p>
<h1 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h1><p>关于闭包网上文章有许多说法，这里我的理解是这样：闭包是<strong>「函数」和「函数内部能访问到的变量」的总和，就是一个闭包。</strong>当我们写一个函数，那么函数里面的变量，作用域相关就已经确定了，你也可以这样理解：创建的函数都会创建闭包，因为这时候，它的环境是确定的，封闭的。但是我们写法通常是函数套函数，里面的函数返回外层函数的变量。</p>
<h1 id="闭包的记忆性"><a href="#闭包的记忆性" class="headerlink" title="闭包的记忆性"></a>闭包的记忆性</h1><p>当闭包产生时，函数所处环境的状态会始终保持在内存中，不会再外层函数调用后被自动清除，这就是闭包的记忆性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCheckTemp</span>(<span class="params">standardTemp</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkTemp</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= standardTemp) &#123;</span><br><span class="line">            alert(<span class="string">&#x27;你的体温正常&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            alert(<span class="string">&#x27;你的体温偏高&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> checkTemp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个checkTemp函数，它以37.1度为标准线</span></span><br><span class="line"><span class="keyword">var</span> checkTemp_A = createCheckTemp(<span class="number">37.1</span>);</span><br><span class="line"><span class="comment">// 再创建一个checkTemp函数，它以37.3度为标准线</span></span><br><span class="line"><span class="keyword">var</span> checkTemp_B = createCheckTemp(<span class="number">37.3</span>);</span><br><span class="line"></span><br><span class="line">checkTemp_A(<span class="number">37.2</span>);</span><br><span class="line">checkTemp_A(<span class="number">37.0</span>);</span><br><span class="line">checkTemp_B(<span class="number">37.2</span>);</span><br><span class="line">checkTemp_B(<span class="number">37.0</span>);</span><br></pre></td></tr></table></figure>

<h1 id="闭包模拟私有变量"><a href="#闭包模拟私有变量" class="headerlink" title="闭包模拟私有变量"></a>闭包模拟私有变量</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 封装一个函数，这个函数的功能就是私有化变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个局部变量a</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">getA</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">add</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            a++;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">pow</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            a *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = fun();</span><br><span class="line"><span class="comment">// 如果想在fun函数外面使用变量a，唯一的方法就是调用getA()方法</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.getA());</span><br><span class="line"><span class="comment">// 想让变量a进行加1操作</span></span><br><span class="line">obj.add();</span><br><span class="line">obj.add();</span><br><span class="line">obj.add();</span><br><span class="line"><span class="built_in">console</span>.log(obj.getA());</span><br><span class="line">obj.pow();</span><br><span class="line"><span class="built_in">console</span>.log(obj.getA());</span><br></pre></td></tr></table></figure>



<h1 id="一些例子"><a href="#一些例子" class="headerlink" title="一些例子"></a>一些例子</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    add = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        a++;</span><br><span class="line">    &#125;</span><br><span class="line">    f2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fun()())</span><br><span class="line">add()</span><br><span class="line"><span class="built_in">console</span>.log(fun()())</span><br></pre></td></tr></table></figure>

<ul>
<li>以上代码可能会觉得输出1和2，因为中间自增1，闭包具有记忆性，其实这是错误的，正确的是输出都是1，原因在于fun返回的函数被执行掉了，也就销毁了，add虽然自增了，但是重新调用就被覆盖了，所以两次都是1。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    add = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        a++;</span><br><span class="line">    &#125;</span><br><span class="line">    f2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> funa = fun()</span><br><span class="line"><span class="built_in">console</span>.log(funa())</span><br><span class="line">add()</span><br><span class="line"><span class="built_in">console</span>.log(funa())</span><br></pre></td></tr></table></figure>

<ul>
<li>这段代码才是输出1和2，原因是fun函数里面的函数被赋值给了一个全局变量，这个变量不知道什么时候被引用，所以就一直存在于内存中。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;xiuyan&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&#x27;BigBear&#x27;</span>;</span><br><span class="line">    showName();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changeName();</span><br></pre></td></tr></table></figure>

<ul>
<li>在 showName 函数的函数作用域内查找是否有局部变量 name</li>
<li>发现没找到，于是根据<strong>书写的位置</strong>，查找上层作用域（全局作用域），找到了 name 的值是 xiuyan，所以结果会打印 xiuyan。</li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>闭包</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript的数据类型和包装对象</title>
    <url>/article/a7f01692.html</url>
    <content><![CDATA[<p>本文主要介绍<code>javaScript</code>的数据类型、数据类型如何转换以及包装对象。</p>
<h1 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h1><p>在<code>JS</code>中，所有数字不分大小，不分整浮，不分正负，都是数字类型，在数字类型中，小数0是可以省略的。</p>
<p>数字类型还可以使用科学计数法、二进制、八进制、十六进制</p>
<p>数字类型中还有一个特别的值：<code>NaN</code>，使用<code>typeof</code>检测是Number，它是一个不自等的值，往往在数学当中算不出来的值就是<code>NaN</code>,比如：0/0就是<code>NaN</code>，<code>&#39;Str&#39; * 5</code>也是<code>NaN</code></p>
<h1 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h1><p>使用引号包裹的字符就是字符串，字符串就是“人类的自然语言”，即可以在里面书写任何东西</p>
<p>字符串的拼接使用+号进行拼接，字符串也可以和变量连接</p>
<p>字符串拥有<code>lenght</code>属性，空格也算是一个长度。</p>
<p><strong>常用方法：</strong></p>
<ul>
<li><code>charAt(a)</code></li>
</ul>
<p>会返回一个<strong>指定位置的字符</strong>，参数是字符的位置，位置从0开始。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">1</span>));<span class="comment">//e</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>substring(a,b)</code></li>
</ul>
<p>会返回<strong>从a开始到b结束（不包括b）</strong>的子串，如果省略后面参数，则会一直选择到字符串结尾，<strong>不接受负的参数</strong>，如果书写了a大于b，则会<strong>自动调换位置</strong>，所以都会从位置小的开始</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">0</span>, <span class="number">3</span>)); <span class="comment">//Hel</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">3</span>, <span class="number">0</span>)); <span class="comment">//Hel</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>substr(a,b)</code></li>
</ul>
<p>会返回<strong>从a开始，b作为长度的子串，如果b省略，则会一直选择到字符串结尾</strong>，a还可以是负数，表示倒数，<strong>b不可以是负数</strong>，<strong>倒数后是往后边选的</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">3</span>, <span class="number">1</span>)); <span class="comment">//l</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">3</span>)); <span class="comment">//lo</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(-<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">//o,倒数后往右边数</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>slice(a,b)</code></li>
</ul>
<p>会返回<strong>从a开始，b结束（不包括b）的子串，a，b可以是负数，表示倒数第几位，a必须小于b</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">//e</span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(-<span class="number">2</span>, -<span class="number">1</span>)); <span class="comment">//l</span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(-<span class="number">1</span>)); <span class="comment">//o</span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(-<span class="number">1</span>, -<span class="number">2</span>)); <span class="comment">//空，a必须小于b</span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">4</span>, <span class="number">1</span>)); <span class="comment">//空，a必须小于b</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>touppercase()</code></li>
</ul>
<p>返回字符串的小写形式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.toLowerCase());<span class="comment">//hello</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>toLowercase()</code></li>
</ul>
<p>返回字符串大写形式，这在验证码忽略大小写有用到</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.toUpperCase());<span class="comment">//HELLO</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>indexOf()</code></li>
</ul>
<p>返回字符串首次出现位置，没有返回-1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&#x27;e&#x27;</span>));<span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<p>小结：</p>
<p>substring(a,b)和slice(a,b)功能基本一样，都是得到从a开始到b结束，不包括b的子串，区别有两个：</p>
<ul>
<li>substring可以自动交换位置，slice不行</li>
<li>slice的参数可以是负数，substring不行</li>
</ul>
<p><code>substr(a,b</code>)中b是长度而不是编号</p>
<h1 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a>Boolean类型</h1><p>表示真假的数据类型，布尔类型值只有<code>true</code>和<code>false</code>，在判断条件中，除了以下六种情况都为真</p>
<p>1、undefined（未定义，找不到值时出现）</p>
<p>2、null（代表空值）</p>
<p>3、false（布尔值的false，字符串”false”布尔值为true）</p>
<p>4、0（数字0，字符串”0”布尔值为true）</p>
<p>5、<code>NaN</code>（无法计算结果时出现，表示”非数值”；但是typeof NaN===”number”）</p>
<p>6、””（双引号）或’’（单引号） （<strong>空字符串，中间有空格时也是true</strong>）</p>
<p>小错误：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&#x27;true&#x27;</span>);</span><br><span class="line">       <span class="keyword">return</span>; <span class="comment">//SyntaxError: Illegal return statement</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;false&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>这是写测试的时候报的错误，原因如下：</li>
<li>在js中return 语句只能放在function中，如果不是在一个function中弹出如上错误。，解决方法只要把这个if语句放到一个函数中即可</li>
</ul>
<h1 id="undefined类型"><a href="#undefined类型" class="headerlink" title="undefined类型"></a>undefined类型</h1><p>变量的默认值，它既是类型也是值，它的类型只有一个值，就是它本身，在变量声明中，提升的默认就是undefined</p>
<h1 id="Null类型"><a href="#Null类型" class="headerlink" title="Null类型"></a>Null类型</h1><p>null表示’空‘，它是空对象</p>
<p>当我们需要将对象销毁，数组销毁或者删除时间监听，通常将它们设置为null</p>
<p>使用typeof检测null是object</p>
<h1 id="数据类型检测"><a href="#数据类型检测" class="headerlink" title="数据类型检测"></a>数据类型检测</h1><p>数据类型分为基本数据类型、复杂数据类型，想要检测数据类型，就需要使用<code>typeof</code>进行数据类型检测，会返回一个数据类型</p>
<p>下面是5种数据类型的typeof检测结果</p>
<table>
<thead>
<tr>
<th align="center">类型名</th>
<th align="center">typeof检测结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">数字类型</td>
<td align="center">number</td>
</tr>
<tr>
<td align="center">字符串类型</td>
<td align="center">string</td>
</tr>
<tr>
<td align="center">布尔类型</td>
<td align="center">boolean</td>
</tr>
<tr>
<td align="center">undefined类型</td>
<td align="center">undefined</td>
</tr>
<tr>
<td align="center">null类型</td>
<td align="center">null</td>
</tr>
</tbody></table>
<h1 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h1><p><strong>其他数-&gt;数字：</strong></p>
<p>使用Number函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">&#x27;123&#x27;</span>)); <span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">&#x27;123.4&#x27;</span>)); <span class="comment">//123.4</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">&#x27;123年&#x27;</span>)); <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">&#x27;2e3&#x27;</span>)); <span class="comment">//2000</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">&#x27; &#x27;</span>)); <span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">true</span>)); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">false</span>)); <span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">undefined</span>)); <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">null</span>)); <span class="comment">//0</span></span><br></pre></td></tr></table></figure>

<p>除了使用Number函数，还可以使用<code>parseInt</code>函数，将字符串转为整数，需要注意的是，这<strong>不是 四舍五入的函数</strong>，它会截取到小数点位置的数字</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;3.14159&#x27;</span>)); <span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;3.14是圆周率&#x27;</span>)); <span class="comment">//3，这是区别Number函数的</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;圆周率是3.14&#x27;</span>)); <span class="comment">//NaN,不是数字开头</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;3.9999&#x27;</span>)); <span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="literal">true</span>)); <span class="comment">//NaN,true-&gt;&#x27;true&#x27;-&gt;NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="literal">true</span>)); <span class="comment">//NaN,true-&gt;&#x27;true&#x27;-&gt;NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="literal">null</span>)); <span class="comment">//NaN,null-&gt;&#x27;null&#x27;-&gt;NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="literal">undefined</span>)); <span class="comment">//NaN,undefined-&gt;&#x27;undefined&#x27;-&gt;NaN</span></span><br></pre></td></tr></table></figure>

<p>还可以使用<code>parseFloat</code>函数，<code>parseFloat</code>函数是将字符串转为浮点数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">&#x27;3.14159&#x27;</span>)); <span class="comment">//3.14159</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">&#x27;3.14是圆周率&#x27;</span>)); <span class="comment">//3.14</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">&#x27;圆周率是3.14&#x27;</span>)); <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">&#x27;3.9999&#x27;</span>)); <span class="comment">//3.9999</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="literal">true</span>)); <span class="comment">//NaN,true-&gt;&#x27;true&#x27;-&gt;NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="literal">null</span>)); <span class="comment">//NaN,null-&gt;&#x27;null&#x27;-&gt;NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="literal">undefined</span>)); <span class="comment">//NaN,undefined-&gt;&#x27;undefined&#x27;-&gt;NaN</span></span><br></pre></td></tr></table></figure>

<p>需要注意：<code>parseInt</code>和<code>parseFloat</code>去**对布尔、null和undefined类型转换会变成<code>NaN</code>**，因为会被隐式转换为字符串，字符串转数字得到结果就是<code>NaN</code></p>
<p><strong>其他数-&gt;字符串：</strong></p>
<p>使用String函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="string">&#x27;3.14159&#x27;</span>)); <span class="comment">//3.14159</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="string">&#x27;3.14是圆周率&#x27;</span>)); <span class="comment">//3.14是圆周率</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="string">&#x27;圆周率是3.14&#x27;</span>)); <span class="comment">//圆周率是3.14</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="string">&#x27;3.9999&#x27;</span>)); <span class="comment">//3.9999</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="literal">true</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="literal">null</span>)); <span class="comment">//null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="literal">undefined</span>)); <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="number">0xf</span>)); <span class="comment">//15 //转为10进制-&gt;字符串</span></span><br></pre></td></tr></table></figure>

<p>使用toString()方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">7</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.toString()); <span class="comment">//7</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="number">6</span>).toString()); <span class="comment">//6</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span>.toString()); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p><strong>其他数-&gt;布尔值：</strong></p>
<p>使用Boolean函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">123</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">0</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">NaN</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">Infinity</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(-<span class="literal">Infinity</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">&#x27;&#x27;</span>)); <span class="comment">//false,单引号为false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">&#x27; &#x27;</span>)); <span class="comment">//true,空字符串也是true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">&#x27;abc&#x27;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">&#x27;false&#x27;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">undefined</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">null</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h1 id="包装对象"><a href="#包装对象" class="headerlink" title="包装对象"></a>包装对象</h1><p>我们都知道在js中普通类型的变量是没有属性和方法的，然后有时却并不是这样。</p>
<p>有时候我们可能会这样去写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> len = str.length;</span><br><span class="line"><span class="built_in">console</span>.log(len);</span><br></pre></td></tr></table></figure>

<p>思考一个问题，为什么变量可以去调用lenght属性呢?</p>
<ul>
<li><p>这是因为我们去调用lenght属性时，js会去创建包装对象，这个对象会有一个lenght属性。其他基本数据类型也是这样，换句话说，一旦我们在普通类型的变量中使用了属性或者方法，js就会自动new一个对应的对象</p>
<p>什么是包装对象？</p>
</li>
<li><p><strong>存取</strong>字符串、数字或布尔值的属性时，<strong>创建的临时对象</strong>称为包装对象</p>
</li>
</ul>
<p>怎么论证上面的两个回答？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;努力，奋斗&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.length);<span class="comment">//5</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;努力，奋斗&#x27;</span>).length));<span class="comment">//5</span></span><br></pre></td></tr></table></figure>

<p>这就说明了字符串在去调用lenght属性时候，是会去创建一个临时对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.length);</span><br><span class="line"><span class="comment">//  转换为：</span></span><br><span class="line"><span class="comment">// var str1 = new String(&#x27;Hello&#x27;);</span></span><br><span class="line"><span class="comment">// console.log(str1.length);</span></span><br><span class="line"><span class="comment">// str1.len = 10</span></span><br><span class="line"><span class="comment">//这里的str是手动创建，所以可以去往里面添加新的属性</span></span><br><span class="line"><span class="comment">//console.log(str1.len);//10</span></span><br><span class="line"><span class="comment">//console.log(str1.length);//5</span></span><br><span class="line">str.len = <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 一旦属性的引用和操作执行完毕后便会被回收，也就是说在 str.len = 5;执行完毕后，str便被回收，不可再次访问,结果就是undefine</span></span><br><span class="line"><span class="built_in">console</span>.log(str.len); <span class="comment">//undefine</span></span><br><span class="line"><span class="built_in">console</span>.log(str.lenght); <span class="comment">//5</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是：</p>
<ul>
<li>null和undefined没有包装对象，尝试使用“.”访问它们的属性会报错。</li>
<li>包装对象和基础类型使用双等号<code>==</code>判断返回true，但是恒等号<code>===</code>返回false。这是因为包装对象已经是一个object了，可以使用typeof检测，开发过程中需要注意。</li>
</ul>
<p>参考文章：</p>
<ul>
<li><a href="https://www.cnblogs.com/ihardcoder/p/4936179.html">https://www.cnblogs.com/ihardcoder/p/4936179.html</a></li>
<li><a href="https://www.cnblogs.com/f6056/p/10874954.html">https://www.cnblogs.com/f6056/p/10874954.html</a></li>
<li><a href="https://www.cnblogs.com/pssp/p/5229320.html">https://www.cnblogs.com/pssp/p/5229320.html</a></li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>数据类型</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建属于自己的UI组件库一</title>
    <url>/article/e3dabf31.html</url>
    <content><![CDATA[<p>最近使用主流的UI框架，忽然心血来潮，何不自己搭建属于自己的UI组件库呢，类似Mint-UI、Element-UI、Vant等组件框架，好在大多UI框架都是开源，所以经过学习实践，搭建了属于自己UI组件库——LInView。</p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要在于如何搭建和开发，不着重于某一点。</p>
<p>在开发自定义组件库前先来看下思维导图，文章将主要分为六大步骤。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211002133138.png"></p>
<h1 id="工程化目录"><a href="#工程化目录" class="headerlink" title="工程化目录"></a>工程化目录</h1><p>一个好的工程目录能较好的体现项目的健壮性和可维护性。这里使用Vue/Cli形成目录。</p>
<p>首先电脑需要下载安装好Node，我的Node版本为v14.17.6</p>
<p>下载Vue/CLi：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli-service-global</span><br></pre></td></tr></table></figure>

<p>创建项目：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vue create linview</span><br></pre></td></tr></table></figure>

<p>配置文件直接默认Vue2：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211002153430.png"></p>
<p>修改工程化目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|-- linview</span><br><span class="line">    |-- .gitignore</span><br><span class="line">    |-- babel.config.js</span><br><span class="line">    |-- package-lock.json</span><br><span class="line">    |-- package.json</span><br><span class="line">    |-- README.md</span><br><span class="line">    |-- vue.config.js //Vue配置文件</span><br><span class="line">    |-- components //组件代码</span><br><span class="line">    |   |-- css    //组件样式</span><br><span class="line">    |   |   |-- demo.scss</span><br><span class="line">    |   |-- lib    //组件核心</span><br><span class="line">    |       |-- card</span><br><span class="line">    |       |-- demo</span><br><span class="line">    |           |-- index.js</span><br><span class="line">    |           |-- src</span><br><span class="line">    |               |-- Index.vue</span><br><span class="line">    |-- docs       //文档API</span><br><span class="line">    |-- examples   //业务代码</span><br><span class="line">    |   |-- App.vue</span><br><span class="line">    |   |-- main.js</span><br><span class="line">    |   |-- assets</span><br><span class="line">    |       |-- logo.png</span><br><span class="line">    |-- public</span><br><span class="line">        |-- favicon.ico</span><br><span class="line">        |-- index.html</span><br></pre></td></tr></table></figure>

<p>src被修改后需要配置vue的入口文件，新建vue.config.js：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">pages</span>: &#123;</span><br><span class="line">    <span class="attr">index</span>: &#123;</span><br><span class="line">      <span class="attr">entry</span>: <span class="string">&#x27;examples/main.js&#x27;</span>,</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;public/index.html&#x27;</span>,</span><br><span class="line">      <span class="attr">filename</span>:<span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>如果按照先前的步骤，到这里会提示sass-loader没有安装。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i sass-loader -D</span><br></pre></td></tr></table></figure>

<p>如果按照上面命令，又会出现如下错误：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211002182221.png"></p>
<p>原因是版本过高，我们需要换下版本：</p>
<p>卸载：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm uninstall sass-loader -D</span><br></pre></td></tr></table></figure>

<p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i sass-loader@5 -D</span><br></pre></td></tr></table></figure>

<p>如果此时运行，可能又会提示如下错误</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211002184021.png"></p>
<p>原因是没有安装node-sass。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i node-sass@4 -D</span><br></pre></td></tr></table></figure>

<p>运行项目，没有报错，至此，工程化目录已经基本完成。</p>
<h1 id="代码样式编写"><a href="#代码样式编写" class="headerlink" title="代码样式编写"></a>代码样式编写</h1><p>在正式组件开发之前，我们应该写一个Demo组件测试一下项目是否能跑起来。</p>
<p><code>linview/components/lib/demo/src/Index.vue</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;l-demo&quot;&gt;</span><br><span class="line">    Demo</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#x27;Demo&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>linview/components/css/demo.scss</code>：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.l-demo</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: aqua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>linview/examplesma/main.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;../components/css/demo.scss&#x27;</span><span class="comment">//引入样式</span></span><br><span class="line"><span class="keyword">import</span> Demo <span class="keyword">from</span> <span class="string">&#x27;../components/lib/demo/src/Index.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line">Vue.use(Demo)</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>linview/examplesma/App.vue</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;Demo&gt;&lt;/Demo&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>如果按照上面的代码书写会发现，组件不起作用，可以我们在使用第三方UI组件库的时候确实是Use这个组件就可以使用了，我们打开控制台，会发现报以下错误：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211002203418.png"></p>
<p>大概意思是组件没有注册，那么接下来对组件的全局注册：</p>
<p>修改<code>linview/examplesma/main.js</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;../components/css/demo.scss&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Demo <span class="keyword">from</span> <span class="string">&#x27;../components/lib/demo/index.js&#x27;</span></span><br><span class="line"><span class="comment">//Vue.component(&#x27;name&#x27;,Demo)</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line">Vue.use(Demo)<span class="comment">//Demo.install -&gt; vue.component</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>增加<code>linview/components/lib/demo/index.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Demo <span class="keyword">from</span> <span class="string">&#x27;./src/Index.vue&#x27;</span>;</span><br><span class="line">Demo.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  Vue.component(Demo.name, Demo)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo</span><br></pre></td></tr></table></figure>

<p>运行项目，没有报错，则Demo组件完成。</p>
<p>写到这里会发现，其实就是一个全局的组件，但是在开发过程中，首先要考虑的组件的通用性，再而是组件的可维护，组件库的意义个人觉得是在于便于开发，想想我只要npm install一个包，然后我在main引入，在组件传递几个数值，一个非常好看的页面就形成，何乐而不为呢</p>
<p>接下来编写正式的第一个卡片组件：</p>
<p><code>Index.vue</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;l-card&quot; :style=&quot;width?&#123;width:width+&#x27;px&#x27;&#125;:&#123;&#125;&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;l-card-img&quot; :style=&quot;imgHeight?&#123;height:imgHeight+&#x27;px&#x27;&#125;:&#123;&#125;&quot;&gt;</span><br><span class="line">      &lt;img :src=&quot;imgSrc&quot; alt=&quot;img&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div v-if=&quot;summary&quot; class=&quot;l-card-summary&quot;&gt;</span><br><span class="line">      &#123;&#123;summary&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div v-else class=&quot;l-card-summary&quot;&gt;</span><br><span class="line">      &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#x27;Card&#x27;,</span><br><span class="line">    props:&#123;</span><br><span class="line">      //卡片宽度</span><br><span class="line">      width:&#123;</span><br><span class="line">        type:Number,</span><br><span class="line">        default:0</span><br><span class="line">      &#125;,</span><br><span class="line">      //卡片图片资源</span><br><span class="line">      imgSrc:&#123;</span><br><span class="line">        type:String,</span><br><span class="line">        default:&#x27;&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      //卡片图片高度</span><br><span class="line">      imgHeight:&#123;</span><br><span class="line">        type:Number,</span><br><span class="line">        default:0</span><br><span class="line">      &#125;,</span><br><span class="line">      //卡片概要</span><br><span class="line">      summary:&#123;</span><br><span class="line">        type:String,</span><br><span class="line">        default:&#x27;&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p><code>card.scss</code></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.l-card</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">270px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">6px</span> <span class="number">10px</span> <span class="number">0</span> rgba(<span class="number">95</span>,<span class="number">101</span>,<span class="number">105</span>,<span class="number">0.15</span>);</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">8px</span>;</span><br><span class="line">  &amp;-<span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">152px</span>;</span><br><span class="line">    <span class="selector-tag">img</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;-<span class="selector-tag">summary</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>index.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Card <span class="keyword">from</span> <span class="string">&#x27;./src/Index.vue&#x27;</span>;</span><br><span class="line">Card.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  Vue.component(Card.name, Card)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Card</span><br></pre></td></tr></table></figure>

<h1 id="组件测试"><a href="#组件测试" class="headerlink" title="组件测试"></a>组件测试</h1><p>编写好的组件需要在本地进行测试才能发布，这里的测试不是非常正规的单元测试，而是直接使用examples目录下的App文件测试框架。</p>
<p><code>App.vue</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;Card imgSrc=&quot;./img/card.png&quot; summary=&quot;Vue.js 源码全方位深入解析 全面深入理解Vue实现原理，掌握源码分析技巧&quot;&gt;&lt;/Card&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;Card imgSrc=&quot;./img/card.png&quot; summary=&quot;Vue.js 源码全方位深入解析 全面深入理解Vue实现原理，掌握源码分析技巧&quot;&gt;</span><br><span class="line">      &lt;template v-slot:footer&gt;</span><br><span class="line">        &lt;div class=&quot;footer&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;level&quot;&gt;高级 · 4256人报名 &lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;price&quot;&gt;￥488.00&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/Card&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  width: 270px;</span><br><span class="line">&#125;</span><br><span class="line">.footer &#123;</span><br><span class="line">  padding: 0 8px;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">  text-align: left;</span><br><span class="line">&#125;</span><br><span class="line">.level &#123;</span><br><span class="line">  color: #9199a1;</span><br><span class="line">  margin-bottom: 8px;</span><br><span class="line">&#125;</span><br><span class="line">.price &#123;</span><br><span class="line">  color: #f01414;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>预览效果：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211002231029.png"></p>
<h1 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h1><p>完成以上的步骤，其实已经可以发布到NPM上，但是有两个问题，</p>
<ul>
<li>现在使用该组件的时候，只能一个一个组件引用，不能全局引入，这需要两个入口文件，一个SCSS，一个JS。</li>
<li>项目没有打包优化，包体积大</li>
</ul>
<p>对于以上问题，我使用WebPack来打包JS，Gulp打包CSS</p>
<p>安装依赖：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i gulp@4 gulp-minify-css gulp-sass@4 webpack-cli@4 -D</span><br></pre></td></tr></table></figure>

<p><code>build/webpack.component.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;VueLoaderPlugin&#125; = <span class="built_in">require</span>(<span class="string">&#x27;vue-loader&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> glob = <span class="built_in">require</span>(<span class="string">&#x27;glob&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> utlis =<span class="built_in">require</span>(<span class="string">&#x27;./utlis&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> list = &#123;&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">makeList</span> (<span class="params">dirPath, list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> files = glob.sync(<span class="string">`<span class="subst">$&#123;dirPath&#125;</span>/**/index.js`</span>)</span><br><span class="line">  <span class="comment">//[ &#x27;components/lib/card/index.js&#x27;, &#x27;components/lib/demo/index.js&#x27; ]</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;files&#x27;</span>, files);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> file <span class="keyword">of</span> files) &#123;</span><br><span class="line">    <span class="comment">//component card  component demo</span></span><br><span class="line">    <span class="keyword">const</span> component = file.split(<span class="regexp">/[/.]/</span>)[<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;component&#x27;</span>, component);</span><br><span class="line">    list[component] = <span class="string">`./<span class="subst">$&#123;file&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(list);</span><br><span class="line">&#125;</span><br><span class="line">makeList(<span class="string">&#x27;components/lib&#x27;</span>,list)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: list,<span class="comment">//入口文件</span></span><br><span class="line">  <span class="attr">mode</span>:<span class="string">&#x27;production&#x27;</span>,<span class="comment">//生产模式</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;[name].umd.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: utlis.DIST_PATH,</span><br><span class="line">    <span class="attr">library</span>: <span class="string">&#x27;lview&#x27;</span>,</span><br><span class="line">    <span class="attr">libraryTarget</span>:<span class="string">&#x27;umd&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin()</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>:<span class="string">&#x27;vue-loader&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>build/utlis.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.resolve = <span class="function"><span class="keyword">function</span> <span class="title">resolve</span> (<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> path.join(__dirname, <span class="string">&#x27;..&#x27;</span>, dir)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exports</span>.APP_PATH = <span class="built_in">exports</span>.resolve(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line"><span class="built_in">exports</span>.DIST_PATH = <span class="built_in">exports</span>.resolve(<span class="string">&#x27;dist&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><code>bulid/gulpfile.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> utlis =<span class="built_in">require</span>(<span class="string">&#x27;./utlis&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> sass = <span class="built_in">require</span>(<span class="string">&#x27;gulp-sass&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> minifyCSS = <span class="built_in">require</span>(<span class="string">&#x27;gulp-minify-css&#x27;</span>)</span><br><span class="line">gulp.task(<span class="string">&#x27;sass&#x27;</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">&#x27;../components/css/**/*.scss&#x27;</span>)</span><br><span class="line">    .pipe(sass())</span><br><span class="line">    .pipe(minifyCSS())</span><br><span class="line">  .pipe(gulp.dest(utlis.DIST_PATH+<span class="string">&#x27;/css&#x27;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>Script</code>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;build&quot;</span>: <span class="string">&quot;npm run build:js &amp;&amp; npm run build:css&quot;</span>,</span><br><span class="line"><span class="string">&quot;build:js&quot;</span>: <span class="string">&quot;webpack --config ./build/webpack.component.js&quot;</span>,</span><br><span class="line"><span class="string">&quot;build:css&quot;</span>: <span class="string">&quot;npx gulp sass --gulpfile build/gulpfile.js&quot;</span>,</span><br></pre></td></tr></table></figure>

<p>打包完成后会在项目根目录形成dist文件夹，这是等会我们要NPM上传的。</p>
<h1 id="NPM发布"><a href="#NPM发布" class="headerlink" title="NPM发布"></a>NPM发布</h1><p>本地编写测试好的组件就要发布到NPM上，方便别人的下载使用，在使用之前，需要个人先注册好NPM账号。</p>
<ul>
<li>首先需要配置package.json文件：</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;linview&quot;</span>,</span><br><span class="line"><span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.1.2&quot;</span>,</span><br><span class="line"><span class="string">&quot;description&quot;</span>: <span class="string">&quot;个人开发者UI组件库&quot;</span>,</span><br><span class="line"><span class="string">&quot;main&quot;</span>: <span class="string">&quot;dist/index.umd.js&quot;</span>,</span><br><span class="line"><span class="string">&quot;keywords&quot;</span>: [</span><br><span class="line">  <span class="string">&quot;linview&quot;</span>,</span><br><span class="line">  <span class="string">&quot;UI&quot;</span>,</span><br><span class="line">  <span class="string">&quot;vue&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;author&quot;</span>: <span class="string">&quot;bamboo_lsf&quot;</span>,</span><br><span class="line"><span class="string">&quot;files&quot;</span>: [</span><br><span class="line">  <span class="string">&quot;dist&quot;</span>,</span><br><span class="line">  <span class="string">&quot;components&quot;</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<p>name：包的名字</p>
<p>version：版本，低版本不能覆盖高版本</p>
<p>description：描述，在你搜索这个包的时候会出现的描述</p>
<p>main：入口主文件，当别人引用包的名字时候，其实就是用的这个文件</p>
<p>keywords：搜索的关键词</p>
<p>author：作者</p>
<p>files：要上传的文件</p>
<ul>
<li><p>书写好根目录的RedeMe文件，它是npm包上的RedeMe文件。</p>
</li>
<li><p>把本地的下载源切换会官方，否则无法登录。</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set registry http://www.npmjs.org</span><br></pre></td></tr></table></figure>

<p>window上如果登录失败可以在要登录的窗口上在次执行，因为我在切回官方源后，登录报错。</p>
<p>登录命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm login</span><br></pre></td></tr></table></figure>

<p>正常情况输入用户名，密码，邮箱即可登录完成。</p>
<p>接下来使用<code>npm publish</code>上传，随后我们就可以在Npm看到自己发布的包了</p>
<h1 id="文档站点"><a href="#文档站点" class="headerlink" title="文档站点"></a>文档站点</h1><p>一个好的UI框架，当然是需要一个文档展示，这样才方便以后的开发与维护。接下来使用VuePress来形成文档的站点。</p>
<p>首先我们需要明白一个概念，文档和项目代码是在一起的，那么我们应该把文档的静态文件和仓库代码放一起，怎么做到呢，其实，我们只需要把文档形成的静态文件和项目代码放在仓库的不同分支即可。这样两者就不会冲突</p>
<p>安装VuePress：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i VuePress -D</span><br></pre></td></tr></table></figure>

<p>生成以下文件和文件夹：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211003183852.png"></p>
<p>config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;LinView&#x27;</span>,</span><br><span class="line">  <span class="attr">base</span>:<span class="string">&#x27;/linview/&#x27;</span>,</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&#x27;Just playing around&#x27;</span>,</span><br><span class="line">  <span class="attr">themeConfig</span>: &#123;</span><br><span class="line">    <span class="comment">//导航</span></span><br><span class="line">    <span class="attr">nav</span>: [</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;首页&#x27;</span>, <span class="attr">link</span>: <span class="string">&#x27;/&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;指南&#x27;</span>, <span class="attr">link</span>: <span class="string">&#x27;/componentDocs/&#x27;</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">text</span>:<span class="string">&#x27;更新日志&#x27;</span>,<span class="attr">link</span>:<span class="string">&#x27;/update/index&#x27;</span>&#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;GitHub&#x27;</span>, <span class="attr">link</span>: <span class="string">&#x27;https://github.com/LSFCXZ/linview&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;NPM&#x27;</span>, <span class="attr">link</span>: <span class="string">&#x27;https://www.npmjs.com/package/linview&#x27;</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">sidebar</span>: &#123;</span><br><span class="line">     <span class="string">&#x27;/componentDocs/&#x27;</span>: [</span><br><span class="line">         &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;简介&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/componentDocs/&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;快速开始&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/componentDocs/start&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;卡片&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/componentDocs/card&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：base是你仓库的名字，如果你的站点没有后缀，那么可以不填</p>
<p>根目录index.md</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">home: true</span><br><span class="line">heroImage: </span><br><span class="line">heroText: LinView</span><br><span class="line">tagline: 简洁、美观、开源的UI框架</span><br><span class="line">actionText: 快速上手 →</span><br><span class="line">actionLink: /componentDocs/start</span><br><span class="line">features:</span><br><span class="line">- title: 简洁至上</span><br><span class="line">  details: 以 Markdown 为中心的项目结构，以最少的配置帮助你专注于写作。</span><br><span class="line">- title: 美观</span><br><span class="line">  details: 享受 Vue + webpack 的开发体验，在 Markdown 中使用 Vue 组件，同时可以使用 Vue 来开发自定义主题。</span><br><span class="line">- title: 开源免费</span><br><span class="line">  details: VuePress 为每个页面预渲染生成静态的 HTML，同时在页面被加载的时候，将作为 SPA 运行。</span><br><span class="line">footer: MIT Licensed | Copyright © 2021-present BambooLSF</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>具体可以参考vuepress的官网配置：<a href="https://vuepress.vuejs.org/zh/">https://vuepress.vuejs.org/zh/</a></p>
<p>接下来就是配置脚本：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;docs:dev&quot;</span>: <span class="string">&quot;vuepress dev docs&quot;</span>,</span><br><span class="line"><span class="string">&quot;docs:build&quot;</span>: <span class="string">&quot;vuepress build docs&quot;</span>,</span><br><span class="line"><span class="string">&quot;depoly&quot;</span>: <span class="string">&quot;bash ./build/deploy.sh&quot;</span></span><br></pre></td></tr></table></figure>

<p>docs:dev：运行vuepress</p>
<p>docs:build：打包</p>
<p>depoly：部署</p>
<p>接下来就是部署到githubpage：</p>
<p>build/deploy.sh</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保脚本抛出遇到的错误</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成静态文件</span></span><br><span class="line">npm run docs:build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入生成的文件夹</span></span><br><span class="line"><span class="built_in">cd</span> docs/.vuepress/dist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是发布到自定义域名</span></span><br><span class="line"><span class="comment"># echo &#x27;www.example.com&#x27; &gt; CNAME</span></span><br><span class="line"></span><br><span class="line">git init</span><br><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">&#x27;deploy&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果发布到 https://&lt;USERNAME&gt;.github.io</span></span><br><span class="line"><span class="comment"># git push -f git@github.com:&lt;USERNAME&gt;/&lt;USERNAME&gt;.github.io.git master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果发布到 https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;</span></span><br><span class="line"> git push -f git@github.com:LSFCXZ/linview.git master:gh-pages</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> -</span><br></pre></td></tr></table></figure>

<p>注意： git push是要换成你的github地址 </p>
<p>执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run depoly</span><br></pre></td></tr></table></figure>

<p>如果在window上无法执行，那么使用git命令窗口即可，这样站点已经完成。</p>
<p>再把我们的项目代码上传：git init ,git add . ,git commit -m ‘’’第一次提交’ ，git push等一把梭上传代码</p>
<p>至此，UI框架基本完成，可以新建项目，npm install 自己的UI库进行测试。</p>
<h1 id="版本问题"><a href="#版本问题" class="headerlink" title="版本问题"></a>版本问题</h1><p>为了避免因为版本问题引起的错误，这里列举开发时版本环境：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;core-js&quot;</span>: <span class="string">&quot;^3.6.5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue&quot;</span>: <span class="string">&quot;^2.6.11&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;@vue/cli-plugin-babel&quot;</span>: <span class="string">&quot;~4.5.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@vue/cli-plugin-eslint&quot;</span>: <span class="string">&quot;~4.5.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@vue/cli-service&quot;</span>: <span class="string">&quot;~4.5.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;babel-eslint&quot;</span>: <span class="string">&quot;^10.1.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint&quot;</span>: <span class="string">&quot;^6.7.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint-plugin-vue&quot;</span>: <span class="string">&quot;^6.2.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;gulp&quot;</span>: <span class="string">&quot;^4.0.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;gulp-minify-css&quot;</span>: <span class="string">&quot;^1.2.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;gulp-sass&quot;</span>: <span class="string">&quot;^4.1.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;node-sass&quot;</span>: <span class="string">&quot;^4.14.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;sass-loader&quot;</span>: <span class="string">&quot;^5.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-loader&quot;</span>: <span class="string">&quot;^15.9.8&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-template-compiler&quot;</span>: <span class="string">&quot;^2.6.11&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vuepress&quot;</span>: <span class="string">&quot;^1.8.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack-cli&quot;</span>: <span class="string">&quot;^4.8.0&quot;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>经过已上步骤，基本已经形成一个较为完整的UI框架，唯一的缺点是按需加载有问题，接下来有待优化。</p>
<p>Github开源地址：<a href="https://github.com/LSFCXZ/linview">https://github.com/LSFCXZ/linview</a></p>
<p>文档站点：<a href="https://lsfcxz.github.io/linview/">https://lsfcxz.github.io/linview/</a></p>
]]></content>
      <categories>
        <category>开源项目</category>
      </categories>
      <tags>
        <tag>自定义组件库</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH免密钥连接服务器</title>
    <url>/article/f85a2d78.html</url>
    <content><![CDATA[<p>一般登录服务器通过SSH方式，每次都是需要密码，非常繁琐，本文介绍一种只需要<code>ssh+别名</code>就能连接服务器的方法。</p>
<h1 id="什么是SSH"><a href="#什么是SSH" class="headerlink" title="什么是SSH"></a>什么是SSH</h1><p>SSH是一种网络协议，用于计算机之间的加密登录。如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露，默认的端口是22</p>
<h1 id="怎么连接"><a href="#怎么连接" class="headerlink" title="怎么连接"></a>怎么连接</h1><p>通过<code>ssh root@IP</code>回车，输入密码就可以连接到，如果默认端口修改了就需要加-p参数，这在后面修改端口号讲。</p>
<h1 id="修改主机名字"><a href="#修改主机名字" class="headerlink" title="修改主机名字"></a>修改主机名字</h1><p>查询：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/hostname</span><br></pre></td></tr></table></figure>

<p>修改：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/hostname</span><br></pre></td></tr></table></figure>

<p>修改按<code>i</code>进入编辑，按<code>esc</code>退出编辑，<code>:wq</code>退出并保存</p>
<h1 id="修改端口"><a href="#修改端口" class="headerlink" title="修改端口"></a>修改端口</h1><p>查询默认监听的端口：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -anlp |grep sshd</span><br></pre></td></tr></table></figure>

<p>修改：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>

<p>按<code>i</code>进入编辑，打开prot的注释，修改你想要的端口，我们可以看到上面的一段话，如果你修改端口号，需要执行：<code>semanage port -a -t ssh_port_t -p tcp #PORTNUMBER</code>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># If you want to change the port on a SELinux system, you have to tell</span><br><span class="line"># SELinux about this change.</span><br><span class="line"># semanage port -a -t ssh_port_t -p tcp #PORTNUMBER</span><br></pre></td></tr></table></figure>

<p>执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">semanage port -a -t ssh_port_t -p tcp #你修改的端口</span><br></pre></td></tr></table></figure>

<p>如果提示<code>-bash: semanage: command not found</code>，则执行:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum whatprovides semanage</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y policycoreutils-python</span><br></pre></td></tr></table></figure>

<p>再次执行刚才的命令，没有返回任何信息，通过以下命令查找是否添加成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">semanage port -l | grep ssh</span><br></pre></td></tr></table></figure>

<p>最后就是重启一下ssh:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure>

<p>返回<code>Redirecting to /bin/systemctl restart sshd.service</code>即是成功，</p>
<p>通过查找默认端口，或者重新连接服务器确认是否成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -p 你修改端口号 root@IP</span><br></pre></td></tr></table></figure>

<p>需要注意的是，在服务云商店那里是需要 开放端口的，否则连接不上。</p>
<h1 id="免密登陆"><a href="#免密登陆" class="headerlink" title="免密登陆"></a>免密登陆</h1><p>首先需要在本地生成ssh证书，在本地计算机，命令如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure>

<p>一直回车即可，在win10上，找到目录：<code>C:\Users\自己用户名\.ssh</code></p>
<p>打开，没有则新建config文件，不要有后缀名：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host #别名</span><br><span class="line">  Port #你修改后的端口</span><br><span class="line">  HostName #IP</span><br><span class="line">  User root#用户名</span><br><span class="line">  IdentityFile #密钥地址，要包含文件名</span><br><span class="line">  IdentitiesOnly yes</span><br></pre></td></tr></table></figure>

<p>在服务器上通过<code>cd ~/.ssh</code>，<code>ls</code>,查看有没有<code>authorized_keys</code>文件，有则编辑，没有则新建。</p>
<p>新建：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/.ssh</span><br><span class="line">vi authorized_keys</span><br></pre></td></tr></table></figure>

<p>把本地计算机的pub文件复制进去，再次通过<code>ssh 别名</code>连接服务器成功。</p>
<p>至此，已经完成服务器的免密登录</p>
]]></content>
      <categories>
        <category>开发技巧</category>
      </categories>
      <tags>
        <tag>效率</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建属于自己的UI组件库二</title>
    <url>/article/c7f47550.html</url>
    <content><![CDATA[<p>前段时间写了LinView组件库，但是由于问题太多，按需引入出错，最后参考element-ui框架和参考一些技术博文，重新编写整个组件库，因为重写，具体的不一 一例举，重点把遇到的坑点和心得记录下。</p>
<h1 id="工程化目录"><a href="#工程化目录" class="headerlink" title="工程化目录"></a>工程化目录</h1><p>首先依然使用vue/cli形成目录，这是最后的目录结构：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">|-- WeX-UI</span><br><span class="line">    |-- .gitignore</span><br><span class="line">    |-- babel.config.js</span><br><span class="line">    |-- components.json</span><br><span class="line">    |-- deploy.sh         <span class="comment">//vuepress部署</span></span><br><span class="line">    |-- package-lock.json</span><br><span class="line">    |-- package.json</span><br><span class="line">    |-- README.md</span><br><span class="line">    |-- build          <span class="comment">//打包配置文件</span></span><br><span class="line">    |   |-- utlis.js</span><br><span class="line">    |   |-- webpack.base.js</span><br><span class="line">    |   |-- webpack.component.js</span><br><span class="line">    |   |-- webpack.prod.js</span><br><span class="line">    |-- docs           <span class="comment">//vuepress文档</span></span><br><span class="line">    |   |-- index.md</span><br><span class="line">    |   |-- .vuepress</span><br><span class="line">    |   |   |-- config.js</span><br><span class="line">    |   |   |-- enhanceApp.js</span><br><span class="line">    |   |   |-- public</span><br><span class="line">    |   |       |-- card.png</span><br><span class="line">    |   |-- componentdocs</span><br><span class="line">    |   |   |-- card.md</span><br><span class="line">    |   |   |-- index.md</span><br><span class="line">    |   |   |-- start.md</span><br><span class="line">    |   |-- update</span><br><span class="line">    |       |-- index.md</span><br><span class="line">    |-- lib            <span class="comment">//打包后的组件和样式</span></span><br><span class="line">    |   |-- card.js</span><br><span class="line">    |   |-- demo.js</span><br><span class="line">    |   |-- wex-ui.min.js</span><br><span class="line">    |   |-- styles</span><br><span class="line">    |       |-- card.css</span><br><span class="line">    |       |-- demo.css</span><br><span class="line">    |       |-- index.css</span><br><span class="line">    |-- packages         <span class="comment">//原生代码</span></span><br><span class="line">    |   |-- card</span><br><span class="line">    |   |   |-- index.js</span><br><span class="line">    |   |   |-- src</span><br><span class="line">    |   |       |-- Index.vue</span><br><span class="line">    |   |-- demo</span><br><span class="line">    |   |   |-- index.js</span><br><span class="line">    |   |   |-- src</span><br><span class="line">    |   |       |-- Index.vue</span><br><span class="line">    |   |-- theme-chalk         <span class="comment">//样式文件</span></span><br><span class="line">    |       |-- gulpfile.js</span><br><span class="line">    |       |-- src</span><br><span class="line">    |           |-- card.scss</span><br><span class="line">    |           |-- demo.scss</span><br><span class="line">    |           |-- index.scss</span><br><span class="line">    |-- public</span><br><span class="line">    |   |-- favicon.ico</span><br><span class="line">    |   |-- index.html</span><br><span class="line">    |-- src</span><br><span class="line">        |-- App.vue</span><br><span class="line">        |-- index.js        <span class="comment">//全局注册组件</span></span><br><span class="line">        |-- main.js</span><br><span class="line">        |-- assets</span><br><span class="line">        |   |-- logo.png</span><br><span class="line">        |-- components</span><br></pre></td></tr></table></figure>

<ul>
<li>整个目录结构是参考了ElementUI的写法，组件库没到一定规模，当然做了减法。</li>
<li>为了第三方项目的按需加载，打包后的都放在lib文件夹。</li>
<li>把gulp打包文件放在CSS的包这是参考了ElementUI，感觉上更加舒服，不会在build文件夹还存放另外的打包工具文件。</li>
<li>components.json也是参考ElementUI，这是为了按需引入单独打包加上。</li>
<li>webpack分成3个，一个公共打包，一个打包全部组件，一个用来单独组件打包，虽然现在一个也可以足够打包，但是为了后续的扩展，目前采取该方式。</li>
<li>enhanceAppjs文件是用来导入全部组件的，属于应用级别，以前写法是把组件复制过来，麻烦且浪费空间，应用该文件后，开发后的组件就可以书写文档。</li>
<li>deploy.sh拉取到最外层，让config只有webpack打包配置 ，（utils是为解决路径问题）</li>
</ul>
<h1 id="webpack打包"><a href="#webpack打包" class="headerlink" title="webpack打包"></a>webpack打包</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.component.js 按需加载，单独组件打包</span></span><br><span class="line"><span class="keyword">const</span> &#123;VueLoaderPlugin&#125;  = <span class="built_in">require</span>(<span class="string">&#x27;vue-loader&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> components = <span class="built_in">require</span>(<span class="string">&#x27;../components.json&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> utlis = <span class="built_in">require</span>(<span class="string">&#x27;./utlis&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> list = &#123;&#125; <span class="comment">//入口文件</span></span><br><span class="line"><span class="keyword">const</span> basePath = path.resolve(__dirname, <span class="string">&#x27;../&#x27;</span>)</span><br><span class="line"><span class="built_in">Object</span>.keys(components).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  list[key] = path.join(basePath,  components[key])</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// console.log(list);</span></span><br><span class="line"><span class="keyword">const</span> webpackconfig = &#123;</span><br><span class="line">  <span class="attr">entry</span>: list,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>,<span class="comment">//生产模式</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: utlis.DIST_PATH,</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">    <span class="attr">library</span>: <span class="string">&#x27;wex-ui&#x27;</span>, <span class="comment">//包名称</span></span><br><span class="line">    <span class="attr">libraryTarget</span>: <span class="string">&#x27;umd&#x27;</span>, <span class="comment">//支持的引入模式</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;<span class="comment">//告诉webpack，什么文件使用什么rules</span></span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;vue-loader&#x27;</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">     <span class="keyword">new</span> VueLoaderPlugin()</span><br><span class="line">  ]</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = webpackconfig</span><br></pre></td></tr></table></figure>

<ul>
<li>整个打包文件主要就是对每个组件进行简单打包压缩，后续可能需要优化，尽量减少包的体积。</li>
</ul>
<h1 id="NPM上传"><a href="#NPM上传" class="headerlink" title="NPM上传"></a>NPM上传</h1><p>这是最没技术含量的问题，却是困惑我许久的问题：</p>
<ul>
<li>NPM莫名上传失败</li>
</ul>
<p>今天依旧想上传npm包，却发现：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211008210126.png"></p>
<p>这个问题网上找了很久，几乎全网没有答案，尝试了切版本，换源都没有用，最后尝试把http换成https，成功。</p>
<ul>
<li>NPM换源问题</li>
</ul>
<p>在上面问题没有解决的同时，我有进入另外别人设置好的的坑，没错就是下面的博文，</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211008210738.png"></p>
<p>没错，这个源是错误的，正确的是：npm config set registry <a href="https://registry.npmjs.org/">https://registry.npmjs.org</a></p>
<p>但是因为当时急于解决第一个问题，导致了失误。</p>
<p>目前已经举报。。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>目前重写后可以正常使用，按需加载正常，后续包的优化，组件的增加有待研究。</p>
]]></content>
      <categories>
        <category>开源项目</category>
      </categories>
      <tags>
        <tag>自定义组件库</tag>
      </tags>
  </entry>
  <entry>
    <title>变量声明提升和var、let、const的区别</title>
    <url>/article/43391fd9.html</url>
    <content><![CDATA[<p>本文主要介绍JavaScript变量声明提升。</p>
<p>JavaScript是一门运行时的脚本语言，也就是没有编译阶段，但是存在一个预编译阶段，预编译阶段会去预读所有变量的定义。</p>
<h1 id="什么是变量声明提升？"><a href="#什么是变量声明提升？" class="headerlink" title="什么是变量声明提升？"></a><strong>什么是变量声明提升？</strong></h1><p>我们可以提前使用一个稍后才声明的变量，而不会引发异常。</p>
<h1 id="变量声明提升带来的后果："><a href="#变量声明提升带来的后果：" class="headerlink" title="变量声明提升带来的后果："></a><strong>变量声明提升带来的后果：</strong></h1><p>变量声明提升只是提升了定义，但不会提升值，比如下面代码，输出的是undefined，这是因为var a 被提升了，但是后面的值没有被提升，一个没有赋初值的变量，输出肯定是undefined。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>这其实是一种非常不好的写法，如果在其他编译语言，这是会直接报错，但是js会产生这种现象是由于语言本身的特性导致，在ES6中，新增了<code>let</code>，<code>const</code>两个声明变量，这两个就不会存在变量声明提升。</p>
<p>变量声明提升<strong>只提升到当前作用域下</strong>，比如以下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);<span class="comment">//undefine</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//  ReferenceError: a is not define</span></span><br></pre></td></tr></table></figure>

<h1 id="注意变量声明提升"><a href="#注意变量声明提升" class="headerlink" title="注意变量声明提升"></a>注意变量声明提升</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a)<span class="comment">//5</span></span><br><span class="line">&#125;</span><br><span class="line">fun()</span><br><span class="line"> <span class="built_in">console</span>.log(a)<span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<ul>
<li>函数的var a 会提升到函数前面，此时a是undefine，到了执行阶段，自增就是NaN,后面5赋值给a，那么输出就是5</li>
<li>变量声明提升把函数里面的a++变成了局部变量，外部是不受影响</li>
</ul>
<h1 id="变量提升的区域："><a href="#变量提升的区域：" class="headerlink" title="变量提升的区域："></a><strong>变量提升的区域</strong>：</h1><p>变量提升只会提升到当前的作用域前面，而不会是全局</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);<span class="comment">//undefine</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line">      &#125;</span><br><span class="line">fun();</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>fun里面的a只是提升到fun的前面，试想一下，如果提升到全局，那么两个输出不都是1；</li>
</ul>
<h1 id="函数声明提升："><a href="#函数声明提升：" class="headerlink" title="函数声明提升："></a><strong>函数声明提升：</strong></h1><p>如果调用了一个未先定义的函数，结果会怎么样</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fun(<span class="string">&#x27;Hello world&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>结果输出Hello world，这是因为函数定义后就是等着被调用的，只有调用才会执行，但是如果复制给一个变量，那情况就不一样了</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fun(<span class="string">&#x27;Hello world&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span>  (<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>报错信息：<code>TypeError: fun is not a function</code>，这是因为js会理解为这是在定义一个变量，把var fun提升了，但是函数没有提升，所以去调用一个undefined，肯定报错这不是一个函数</li>
</ul>
<h1 id="var、let、const的区别"><a href="#var、let、const的区别" class="headerlink" title="var、let、const的区别"></a>var、let、const的区别</h1><h2 id="var"><a href="#var" class="headerlink" title="var:"></a>var:</h2><p>var是ES5中一个初始化变量的关键字，用var声明的变量，除了在函数使用var变量以外，其他都属于全局变量，全局变量是在顶级对象能调用的一个属性值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">fun();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;a-&gt;&#x27;</span> + <span class="built_in">window</span>.a + <span class="string">&#x27; b-&gt;&#x27;</span> + <span class="built_in">window</span>.b + <span class="string">&#x27; c-&gt;&#x27;</span> + <span class="built_in">window</span>.c);</span><br></pre></td></tr></table></figure>

<p>运行效果：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211028185202.png"></p>
<ul>
<li>可以看出window对象上已经绑定了变量a和c，属于全局的一个变量。如果想给var重新赋值，可以直接a=1或者重新var a = 1,重新赋值并不会改变上面的原则。而如果在函数内不使用<code>var</code>，该变量是全局的</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    b = <span class="number">22</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  fun();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27; b-&gt;&#x27;</span> + <span class="built_in">window</span>.b); <span class="comment">//b-&gt;22</span></span><br></pre></td></tr></table></figure>

<p>以上是在浏览器侧，在Node侧有小小的区别。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">global</span>.a);<span class="comment">//undefine</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">global</span>.b);<span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<ul>
<li>以上代码输出的其实是<code>undefine</code>，因为在<code>nodejs</code>侧，使用var一个变量，属于该JS文件局部的变量，只有a = 1的时候，才能被global调用，不过一般不建议这样做，会产生全局污染，除非这个变量是全局都需要去频繁使用到</li>
</ul>
<h2 id="let"><a href="#let" class="headerlink" title="let:"></a>let:</h2><p><code>let</code>是<code>ES6</code>新增的命令，用来声明变量，用法类似于<code>var</code>，但是所声明的变量，<strong>只在<code>let</code>命令所在的代码块内有效</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// ReferenceError: a is not defined.</span></span><br></pre></td></tr></table></figure>

<p>同时也<strong>不存在变量提升</strong>，以下代码表示在声明它之前，变量<code>a</code>是不存在的，这时如果用到它，就会抛出一个错误</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// 报错ReferenceError</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>let<strong>存在暂时性死区</strong>，也就是使用<code>let</code>声明变量前，该变量都不可用，原因在于let不存在变量提升，但JS的作用域链会往上面一层去找这个变量，这里就出现矛盾了，既然不提升，那就是这个区域没有这个变量，那我往上找不就可以，但是JS就是会在这里报错，这种情况就是暂时性死区，不给你往上找这个变量，const也是这种情况。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">60</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">50</span>;</span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br></pre></td></tr></table></figure>

<p><strong><code>let</code>不允许在相同作用域中重复声明</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">20</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">30</span></span><br><span class="line"><span class="comment">// Uncaught SyntaxError: Identifier &#x27;a&#x27; has already been declared</span></span><br></pre></td></tr></table></figure>

<p>当然在不同作用域下是可以重复声明，毕竟let属于块级作用域</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">20</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="const"><a href="#const" class="headerlink" title="const:"></a>const:</h2><p><code>const</code>声明一个只读的常量，一旦声明，常量的值就不能改变</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line">a = <span class="number">3</span></span><br><span class="line"><span class="comment">// TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure>

<p><code>const</code>一旦声明变量，就必须立即初始化，不能留到以后赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a;</span><br><span class="line"><span class="comment">// SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure>

<p>如果之前用<code>var</code>或<code>let</code>声明过变量，再用<code>const</code>声明同样会报错</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">20</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">30</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">30</span></span><br><span class="line"><span class="comment">// 都会报错</span></span><br></pre></td></tr></table></figure>

<p><code>const</code>实际上保证的并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动</p>
<p>对于简单类型的数据，值就保存在变量指向的那个内存地址，因此等同于常量</p>
<p>对于复杂类型的数据，变量指向的内存地址，保存的只是一个指向实际数据的指针，<code>const</code>只能保证这个指针是固定的，并不能确保改变量的结构不变</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 foo 添加一个属性，可以成功</span></span><br><span class="line">foo.prop = <span class="number">123</span>;</span><br><span class="line">foo.prop <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 foo 指向另一个对象，就会报错</span></span><br><span class="line">foo = &#123;&#125;; <span class="comment">// TypeError: &quot;foo&quot; is read-only</span></span><br></pre></td></tr></table></figure>

<p>其它情况，<code>const</code>与<code>let</code>一致</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>变量声明提升</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo图床的解决方案</title>
    <url>/article/4c6068df.html</url>
    <content><![CDATA[<p>网站链接嵌套得越深，越不利于SEO优化，Hexo默认链接是年月日标题，如果标题是中文，那么链接就会变成乱码，这很不利于搜索引擎的搜索，为了达到目的，我们会使用<code>hexo-abbrlink</code>插件来解决问题，但是我们需要上传图片，图片要么需要图床，不然你就只能附带博客里面，以下分析个人在遇到这个问题的取舍与想法，愿与诸君分享。</p>
<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul>
<li>我们需要利于SEO的网址</li>
<li>我们需要一个安全、稳定、足够、免费的图床</li>
<li>简单、最好一劳永逸</li>
</ul>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>我们知道，为了达到Hexo的链接优化，需要用到<code>hexo-abbrlink</code>这个插件，使用上传图片使用<code>hexo-asset-image</code>插件，这两个插件单独使用没有问题，但是一起使用就会出现问题，前者把路径改了，后者当然无法找到图片，网上也是一堆长篇大论，这里不在累赘，难道没有一劳永逸吗？</p>
<p>既然两者一起使用会出现问题，（<code>hexo-asset-image</code>插件作者曾提到这是hexo的编译原理，具体可以看官方的lssues）,那么就不一起使用，此路不通，另寻它路。其实最简单的方式就是使用图床功能，把一张图片放到别人的服务器，通过URL就能看到图片，简单快捷，</p>
<p>但是有几个问题：</p>
<ul>
<li><p>图片放在别人的服务器，不太安全</p>
</li>
<li><p>图床一般都需要收费，不可能给你白嫖</p>
</li>
<li><p>图床弄起来较为麻烦</p>
</li>
</ul>
<p>综合以上，其实我们可以利用Gitee来作为我们的图床，有以下几个原因</p>
<ul>
<li>使用<code>hexo-asset-image</code>插件图片本身也是存放在<code>gitee</code>，那么我们这样其实是一样的，只不过不用<code>hexo-asset-image</code>插件</li>
<li><code>Gitee</code>属于国内，速度更快</li>
<li>个人免费有5G的空间，如果只是博客，这个空间还是够的</li>
</ul>
<h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p>既然使用Gitee来作为图床，当然不能重复提交代码仓库来实现，这里使用picGo工具，</p>
<p>官网：<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p>
<p>安装好的界面</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20210926225740.png"></p>
<p>安装插件：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20210926230424.png"></p>
<p>填写信息：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20210926231011.png"></p>
<ul>
<li>用户名是注册时候的链接名，不是昵称！！</li>
<li>仓库名小写，直接写就行，不需要写路径</li>
<li>存放路径随意</li>
<li>令牌是<code>Gitee</code>私人令牌，不要给太多权限，第一个就行</li>
<li>图片只能1M上限，大于访问不了，需要登陆才可以有权限访问，这点可以自己测试</li>
</ul>
<h1 id="小工具"><a href="#小工具" class="headerlink" title="小工具"></a>小工具</h1><p>分享一个截图工具：snipaste，可以在win10商店里面下载即可。</p>
<p>官网：<a href="https://zh.snipaste.com/">https://zh.snipaste.com/</a></p>
<p>结合PicGo可以完美配合，复制粘贴上传，不用保存，截图大小也不是很大</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这个办法其实是脱离插件的使用，即满足了URL的优化，又能得到一个图床应用，体验下来还是很方便的，唯一缺点就是流程可能稍加繁琐，不过使用过程非常方便！还是值得推荐的！</p>
]]></content>
      <categories>
        <category>Hexo框架</category>
      </categories>
      <tags>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>小破站正式上线</title>
    <url>/article/36e749dc.html</url>
    <content><![CDATA[<p>断断续续半年时间，使用<code>Hexo</code>已有很长一段时间，经历了不断的优化踩坑，最开始使用<code>NexT</code>做为博客主题，到后来使用了Butterfly主题，到对主题的一系列魔改，最终还是回归到<code>NexT</code>作为博客的主题。</p>
<p><code>NexT</code>主题相对来说较为简洁，使用Butterfly主题确实对博客有很大的美化程度，但不简约，最主要是在浏览器渲染上面，由于集成大量插件和动画特效，使得手机浏览时不是特别顺畅。</p>
<p>最终本博客去繁化简，只留下实用功能，对博客轻美化，让网站即顺畅又优美。</p>
<p>目前使用<code>GithubPages</code>加<code>GiteePages</code>双代码平台推送，测试下来，电信网络访问<code>githubPages</code>很大概率屏蔽，<code>GiteePages</code>需要手动更新，较为麻烦，<code>CDN</code>加速效果不明显，CI平台需要收取一定费用，介于目前情况，只能暂时如此，未来计划使用服务器搭建自己的CI平台进行自动化部署</p>
]]></content>
      <categories>
        <category>Hexo框架</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>布局问题</title>
    <url>/article/9a7d9672.html</url>
    <content><![CDATA[<p>在开发网页布局的时候，遇到浏览器正常窗口，正常显示，但是浏览器缩小，页面混乱问题，特此记录一下。</p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>这是正常情况：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211023105243.png"></p>
<p>这是缩小情况，非常丑陋：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211023105341.png"></p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>通过审核元素可以看到，父盒子没有宽度，是由子盒子撑开，但是背景颜色是在父盒子，给父盒子设置宽度即可解决，但是背景颜色是铺满的，所以就需要使用min-width属性。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/image-20211023110010817.png"></p>
<p>第二个问题，就是轮播的问题，这里依然使用min-width属性给父盒子设置宽度即可解决。</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211023110527.png"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>设置width100%是有问题的，当浏览器缩小，那么会认为浏览器就是这么小，宽度就占满，那么再去拖动滚动条，后面的内容也就看不到了</p>
]]></content>
      <categories>
        <category>开发问题</category>
      </categories>
  </entry>
  <entry>
    <title>常用文本样式属性</title>
    <url>/article/90e0fc7e.html</url>
    <content><![CDATA[<p>CSS3提供了大量的文本字体样式属性，本文章介绍CSS常用文本样式属性。</p>
<h1 id="color属性"><a href="#color属性" class="headerlink" title="color属性"></a>color属性</h1><ul>
<li>Color属性可以设置文本的前景色</li>
<li>属性值主要有英文、十六进制、rgb()、rgba()等表示法</li>
<li>具有继承性</li>
</ul>
<p>十六进制表示法：</p>
<p>#ff0000：三颜色，红绿蓝，ff是十进制的255，每种颜色都是0~255之间</p>
<p>rgb()表示法：</p>
<p>rgb(255,0,0)：三颜色，红绿蓝，ff是十进制的255，每种颜色都是0~255之间</p>
<p>rgba()表示法：(IE9兼容)</p>
<p>rgb(255,0,0, .65)：三颜色，红绿蓝，ff是十进制的255，每种颜色都是0<del>255之间，最后一位表示透明度，0</del>1之间</p>
<h1 id="font-size属性"><a href="#font-size属性" class="headerlink" title="font-size属性"></a>font-size属性</h1><p>font-size属性用来设置字号，单位有px、em、rem，浏览器一般最小是10px</p>
<h1 id="font-weight属性"><a href="#font-weight属性" class="headerlink" title="font-weight属性"></a>font-weight属性</h1><p>font-weight属性用来设置粗细</p>
<table>
<thead>
<tr>
<th align="center">属性值</th>
<th align="center">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">normal</td>
<td align="center">正常属性，400等值</td>
</tr>
<tr>
<td align="center">bold</td>
<td align="center">加粗</td>
</tr>
<tr>
<td align="center">lighter</td>
<td align="center">更细（多数中文字体不支持）</td>
</tr>
<tr>
<td align="center">bolder</td>
<td align="center">更粗（多数中文字体不支持）</td>
</tr>
</tbody></table>
<h1 id="font-style属性"><a href="#font-style属性" class="headerlink" title="font-style属性"></a>font-style属性</h1><table>
<thead>
<tr>
<th align="center">属性值</th>
<th align="center">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">normal</td>
<td align="center">取消倾斜</td>
</tr>
<tr>
<td align="center">italic</td>
<td align="center">倾斜字体</td>
</tr>
<tr>
<td align="center">oblique</td>
<td align="center">倾斜字体(不常用)</td>
</tr>
</tbody></table>
<h1 id="font-decoration属性"><a href="#font-decoration属性" class="headerlink" title="font-decoration属性"></a>font-decoration属性</h1><table>
<thead>
<tr>
<th align="center">属性值</th>
<th align="center">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">none</td>
<td align="center">没有修饰线</td>
</tr>
<tr>
<td align="center">underline</td>
<td align="center">下划线</td>
</tr>
<tr>
<td align="center">line-through</td>
<td align="center">删除线</td>
</tr>
</tbody></table>
<h1 id="font-family属性"><a href="#font-family属性" class="headerlink" title="font-family属性"></a>font-family属性</h1><p>示例：font-family:”微软雅黑”,serif,”Times New Roman”</p>
<ul>
<li>多个字体用逗号隔开，</li>
<li>按顺序，第一个为首选字体，如果系统中没有该字体，则选择后面字体，以此类推</li>
<li>中文和含有空格的英文字体需要引号包裹</li>
<li>通常必须是用户计算机安装的字体</li>
</ul>
<p>自定义字体：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;webfont&#x27;</span>;</span><br><span class="line">  <span class="attribute">font-display</span>: swap;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;//at.alicdn.com/t/webfont_8pxgkjvoelj.eot&#x27;</span>); <span class="comment">/* IE9*/</span></span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;//at.alicdn.com/t/webfont_8pxgkjvoelj.eot?#iefix&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;embedded-opentype&#x27;</span>), /* IE6-IE8 */</span><br><span class="line">  <span class="built_in">url</span>(<span class="string">&#x27;//at.alicdn.com/t/webfont_8pxgkjvoelj.woff2&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff2&#x27;</span>),</span><br><span class="line">  <span class="built_in">url</span>(<span class="string">&#x27;//at.alicdn.com/t/webfont_8pxgkjvoelj.woff&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>), /* chrome、firefox */</span><br><span class="line">  <span class="built_in">url</span>(<span class="string">&#x27;//at.alicdn.com/t/webfont_8pxgkjvoelj.ttf&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>), /* chrome、firefox、opera、Safari, Android, iOS <span class="number">4.2</span>+*/</span><br><span class="line">  <span class="built_in">url</span>(<span class="string">&#x27;//at.alicdn.com/t/webfont_8pxgkjvoelj.svg#思源黑体-极细&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;svg&#x27;</span>); <span class="comment">/* iOS 4.1- */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="text-indent属性"><a href="#text-indent属性" class="headerlink" title="text-indent属性"></a>text-indent属性</h1><p>首行缩进，单位em，表示字符宽度。</p>
<h1 id="text-align属性"><a href="#text-align属性" class="headerlink" title="text-align属性"></a>text-align属性</h1><table>
<thead>
<tr>
<th align="center">属性值</th>
<th align="center">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">center</td>
<td align="center">居中</td>
</tr>
<tr>
<td align="center">right</td>
<td align="center">居右</td>
</tr>
<tr>
<td align="center">left</td>
<td align="center">居左</td>
</tr>
</tbody></table>
<h1 id="line-height属性"><a href="#line-height属性" class="headerlink" title="line-height属性"></a>line-height属性</h1><p>定义行高，行高等于盒子高实现垂直居中效果，单位可以是px，也可以是倍数，百分数</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>文章锚点失效问题</title>
    <url>/article/26e0b522.html</url>
    <content><![CDATA[<p>在测试博客中发现文章锚点失效问题，特此记录一下。</p>
<p>在 <code>Hexo</code> 更新至 5.x 版本，Next 更新至 7.x 版本后，会出现文章的中文目录点击跳转失效的 bug，本博客正式遇到此问题。</p>
<p>在控制台打印如下错误：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">utils.js:<span class="number">240</span> Uncaught <span class="built_in">TypeError</span>: Cannot read properties <span class="keyword">of</span> <span class="literal">null</span> (reading <span class="string">&#x27;getBoundingClientRect&#x27;</span>)</span><br><span class="line">    at HTMLAnchorElement.&lt;anonymous&gt; (utils.js:<span class="number">240</span>)</span><br></pre></td></tr></table></figure>

<p>翻看官方Issues得到解决方案：</p>
<p>链接：<a href="https://github.com/theme-next/hexo-theme-next/pull/1540/files">https://github.com/theme-next/hexo-theme-next/pull/1540/files</a></p>
<p>删除两行代码，增加两行代码：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20210927205653.png"></p>
]]></content>
      <categories>
        <category>Hexo框架</category>
      </categories>
      <tags>
        <tag>HexoBug</tag>
      </tags>
  </entry>
  <entry>
    <title>无题</title>
    <url>/article/9b44950b.html</url>
    <content><![CDATA[<p>欢乐和苦恼必然联系在一起：每一个欢乐背后都隐藏着当这个欢乐失去后的苦恼，每一个苦恼背后都隐藏着，当这个苦恼失去后的快乐。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>开发效率网站</title>
    <url>/article/b8ba1c56.html</url>
    <content><![CDATA[<p>本文主要分享学习过程中的具有学习意义或者具有参考价值的网站</p>
<p>谷歌<code>bilibili</code>的官方视频号：<a href="https://space.bilibili.com/64169458?from=search&amp;seid=16725490532360573752&amp;spm_id_from=333.337.0.0">https://space.bilibili.com/64169458?from=search&amp;seid=16725490532360573752&amp;spm_id_from=333.337.0.0</a></p>
<ul>
<li>个人觉得，相比外网的视频，有着网络限制，而且对个人英文水平有很大考验，<code>bilibili</code>上面的视频有中文字幕，而且也是官方出品，所以质量是较好的</li>
</ul>
<p>Github trending: <a href="https://github.com/trending">https://github.com/trending</a></p>
<ul>
<li>可以了解到最近非常火的开源项目。</li>
</ul>
<table>
<thead>
<tr>
<th align="left">网址</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://unbug.github.io/codelf">https://unbug.github.io/codelf</a></td>
<td align="left">变量命名智能推荐（支持中文）</td>
</tr>
<tr>
<td align="left"><a href="https://www.docschina.org/">https://www.docschina.org</a></td>
<td align="left">Web 前端开发人员提供优质中文文档</td>
</tr>
<tr>
<td align="left"><a href="https://regexr.com/">https://regexr.com</a></td>
<td align="left">正则表达式验证匹配</td>
</tr>
<tr>
<td align="left"><a href="https://any-rule/">https://any-rule</a></td>
<td align="left">正则表达式库，非常全，使用起来很方便</td>
</tr>
<tr>
<td align="left"><a href="https://www.toptal.com/developers">https://www.toptal.com/developers</a></td>
<td align="left">多张图片合成雪碧图，并生成对应 <code>CSS</code></td>
</tr>
<tr>
<td align="left"><a href="https://tool.lu/">https://tool.lu</a></td>
<td align="left">众多工具集合，包括时间戳转换，进制转换等</td>
</tr>
<tr>
<td align="left"><a href="https://www.bootcdn.cn/">https://www.bootcdn.cn</a> 或 <a href="https://cdn.baomitu.com/">https://cdn.baomitu.com</a></td>
<td align="left">国内的<code>CDN</code>库，速度快</td>
</tr>
<tr>
<td align="left"><a href="https://www.jsdelivr.com/">https://www.jsdelivr.com</a></td>
<td align="left">国外的 <code>CDN</code>库，支持 <code>github</code>，<code>npm</code>，<code>WordPress</code></td>
</tr>
<tr>
<td align="left"><a href="https://www.gitignore.io/">https://www.gitignore.io</a></td>
<td align="left">根据选择会去生成 <code>.gitignore</code> 文件</td>
</tr>
<tr>
<td align="left"><a href="https://codesandbox.io/">https://codesandbox.io</a></td>
<td align="left">在线编辑代码</td>
</tr>
<tr>
<td align="left"><a href="https://www.typora.io/">https://www.typora.io</a></td>
<td align="left">实用的 Markdown 写作工具，所见即所得</td>
</tr>
<tr>
<td align="left"><a href="https://mdnice.com/">https://mdnice.com</a></td>
<td align="left">使 markdown 语法更加美观，如果你有写博客，那这个非常合适你</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>物理像素和CSS像素</title>
    <url>/article/158ced0d.html</url>
    <content><![CDATA[<p>本文主要记录移动端像素知识。</p>
<p><strong>分辨率：</strong></p>
<p>是指屏幕的物理像素点，比如：1792 X 828像素表示纵轴有1792个像素点，横轴828个像素点。分辨率越高显示越清晰</p>
<p><strong>物理像素（physical pixel）:</strong></p>
<p>物理像素也是设备像素（dp：device pixel），开发中不以物理像素为准，因为设备的物理像素各不相同，如果用1像素描述一块区域，在标清屏显示更大，在高清屏显示更小，物理像素是不能被放大的，所以就导致开发一个页面，在这台设备可能设配的，在其他设备就不行</p>
<p><strong>CSS像素:</strong></p>
<p>CSS像素也是逻辑像素（logical pixel），也可以是设备独立像素(dip:device independent pixel)</p>
<p>实际开发会用的像素，比如px就是。</p>
<p>CSS像素如果在标清用2像素点描述2px，那么在高清屏就是放大到4倍</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211024180350.png"></p>
<p><strong>设备像素比（dpr:device pixel ratio）:</strong></p>
<p>设备像素比：dpr= 设备像素/CSS像素（缩比是1的情况下）</p>
<p><strong>缩放：</strong></p>
<p>缩放改变的是CSS像素大小</p>
<p><strong>PPI:</strong></p>
<p>PPI是pixels per inch缩写，表示为每英寸的物理像素点，也可以是dpi，理解为像素密度点</p>
<p>计算公式：</p>
<p><img src="https://gitee.com/bamboolsf/image-bed/raw/master/img/20211024174454.png"></p>
]]></content>
      <categories>
        <category>移动端Web</category>
      </categories>
      <tags>
        <tag>像素</tag>
      </tags>
  </entry>
</search>
